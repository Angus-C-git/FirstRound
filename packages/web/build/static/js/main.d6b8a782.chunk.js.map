{"version":3,"sources":["constants/userTypes.js","components/MapView/getAllVenuesMap.gql.js","components/MapView/venueSearchMaps.gql.js","components/MapView/MapLegend.jsx","components/MapView/VenueMarker.jsx","components/MapView/MapView.jsx","shared-components/primary-button/PrimaryButton.jsx","constants/urls.js","assets/img/coffee.svg","assets/img/beer.svg","assets/img/restaurant.svg","gql/search/searchUser.gql.js","gql/venueInfo/shareVenue.gql.js","gql/routes/shareRoute.gql.js","shared-components/AlertBar.jsx","components/HomeSidebar/ShareModal.jsx","components/HomeSidebar/CardOpeningHours.jsx","components/HomeSidebar/VenueCard.jsx","components/HomeSidebar/TopMenu.jsx","components/HomeSidebar/FilterDropdown.jsx","gql/routes/updateRoute.gql.js","gql/routes/saveRoute.gql.js","components/HomeSidebar/FinaliseModal.jsx","components/HomeSidebar/RoutePlanner.jsx","components/HomeSidebar/HomeSidebar.jsx","gql/self/getSelf.gql.js","assets/img/logo.svg","shared-components/CircularBadge.jsx","components/NavBar/LoginBadge.jsx","components/NavBar/BusinessBadge.jsx","components/SmallModal/SmallModal.jsx","components/LogoutBadge/logout.gql.js","components/LogoutBadge/LogoutBadge.jsx","components/NavBar/AccountBadge.jsx","gql/self/notifications.js","components/Notifications/NotificationButton.jsx","components/Notifications/Notification.jsx","components/Notifications/NotificationFeed.jsx","components/Notifications/NotificationBadge.jsx","components/NavBar/BuisnessHomeBadge.jsx","components/NavBar/MapBadge.jsx","components/NavBar/NavBarItems.jsx","components/NavBar/NavBar.jsx","gql/venueInfo/venueInfo.gql.js","components/AdvancedSearchBar/VenueTypeDropdown.jsx","components/AdvancedSearchBar/MenuItemCard.jsx","gql/search/getAllItemKinds.gql.js","components/AdvancedSearchBar/DropDownKindBar.jsx","components/AdvancedSearchBar/AddMenuCard.jsx","gql/venueInfo/getAllTags.gql.js","components/AdvancedSearchBar/DropdownTagBar.jsx","components/AdvancedSearchBar/AdvancedSearchBar.jsx","gql/venueInfo/getMyTags.gql.js","gql/venueInfo/addRating.gql.js","gql/venueInfo/addTag.gql.js","gql/venueInfo/removeTag.gql.js","components/Menu/SpecialHoursForm.jsx","gql/venueInfo/addMenuItem.gql.js","components/FileUpload/uppyConfig.js","components/FileUpload/Zone.jsx","components/FileUpload/UploadMenuItem.jsx","components/Menu/TimedSpecialForm.jsx","components/Menu/AddItemForm.jsx","components/Menu/AddItemGroup.jsx","gql/self/profile.gql.js","gql/self/redeemPromotion.gql.js","components/Menu/RedeemPromotion.jsx","components/Menu/PromotionSection.jsx","components/Menu/OpeningHours.jsx","components/Menu/Banner.jsx","components/Menu/MenuSection.jsx","components/Menu/Item.jsx","components/Menu/MenuPane.jsx","components/RouteCriteria/Header.jsx","components/RouteCriteria/LocationCriteria.jsx","components/RouteCriteria/TimeCriteria.jsx","components/RouteCriteria/CriteriaBox2.jsx","components/RouteCriteria/MultiCrit.jsx","gql/routes/generateRoute.gql.js","gql/routes/getRouteById.gql.js","pages/Home.jsx","components/AuthInput/AuthInput.jsx","gql/auth/login.gql.js","components/LoginForm/LoginForm.jsx","pages/Login.jsx","gql/auth/register.gql.js","components/RegisterForm/RegistrationForm.jsx","pages/Register.jsx","gql/auth/reset.gql.js","pages/Forgot.jsx","gql/venueRequests/getRequestsByStatus.gql.js","gql/venueRequests/updateRequestStatus.gql.js","components/AdminDashboardComponent/getCounts.gql.js","components/AdminDashboardComponent/RejectVenueRequestModal.jsx","components/AdminDashboardComponent/AdminDashboardCarousel.jsx","components/AdminDashboardComponent/AdminDashboardComponent.jsx","pages/AdminDashboard.jsx","components/NavBar/BusinessNav.jsx","components/BusinessDashboard/getMyRequests.gql.js","components/BusinessDashboard/getAllVenues.gql.js","components/FileUpload/VerificationUpload.jsx","components/BusinessDashboard/AddVenueModal.jsx","components/BusinessDashboard/getMyVenues.gql.js","components/BusinessDashboard/addPromotion.gql.js","components/BusinessDashboard/DateForm.jsx","components/BusinessDashboard/AddPromotionForm.jsx","components/BusinessDashboard/gql/uploadMenu.gql.js","components/BusinessDashboard/UploadMenuForm.jsx","components/BusinessDashboard/VenueMenu.jsx","components/BusinessDashboard/processMenuItem.gql.js","components/BusinessDashboard/MenuItemCard.jsx","components/BusinessDashboard/ReviewVenueCarousel.jsx","components/BusinessDashboard/VenueDisplayAccordion.jsx","components/BusinessDashboard/SideNav.jsx","components/BusinessDashboard/BusinessDashboardComponent.jsx","pages/BusinessDashboard.jsx","pages/Reset.jsx","components/ProfileBadge/ProfileBadge.jsx","components/Profile/CreditBadge.jsx","components/Profile/PromotionSummary.jsx","components/Profile/PromotionCard.jsx","components/Profile/PromotionsFeed.jsx","components/Profile/RouteSummary.jsx","components/Profile/RoutesFeed.jsx","gql/auth/delete.gql.js","components/DeleteButton/DeleteButton.jsx","components/Profile/AccountDash.jsx","components/Profile/NavDial.jsx","pages/Profile.jsx","components/Router/Router.jsx","index.jsx"],"names":["UserTypes","GET_ALL_VENUES_MAP","gql","SEARCH_VENUES_MAP","MapLegend","props","Segment","style","zIndex","position","width","marginTop","marginLeft","maxHeight","overflow","padding","borderRadius","Label","circular","color","empty","paddingLeft","VenueMarker","icon","venueType","longitude","latitude","venueName","venueID","setSelectedVenue","setLat","setLong","setId","isPromotion","onRoute","Icon","inverted","name","BarIcon","CafeIcon","RestaurantIcon","onClick","defaultProps","MapView","useState","height","zoom","viewport","setViewport","selLong","selLat","clicked","setClicked","routeClick","setRouteClick","marker","setMarker","routeMarker","setRouteMarker","logEvents","onMarkerDragStart","useCallback","event","_events","onDragStart","lngLat","onMarkerDrag","onDrag","onMarkerDragEnd","onDragEnd","selectLocationCallback","data","popUpFunc","selectedVenue","handleVenueSelect","selection","circleStyle","id","type","paint","center","radius","routeRadius","options","steps","units","properties","foo","circle","Circle","center2","calcCenter","circle2","markers","useMemo","venueArray","map","venue","location","coordinates","_id","venuePopup","backgroundColor","onClose","className","onDblClick","selecting","selectingRoute","setRouteLocationCallback","doubleClickZoom","mapStyle","onViewportChange","nextViewport","offsetTop","offsetLeft","draggable","size","undefined","routeData","toGeoJSON","content","routeGeometry","venuesInRoute","index","showCalCenter","positionOptions","enableHighAccuracy","trackUserLocation","showAccuracyCircle","shape","PrimaryButton","testReference","clientUrl","window","host","SearchUser","ShareVenue","SHARE_ROUTE","Alert","forwardRef","ref","elevation","variant","AlertBar","show","setShow","message","severity","handleClose","reason","Snackbar","open","autoHideDuration","sx","Transition","React","Slide","direction","ShareModal","openTrigger","stateHandler","title","shareID","shareName","isOpen","setIsOpen","timeout","setTimeoutHandler","searchFragment","setSearchFragment","selectedUsers","setSelectedUsers","alertMessage","setAlertMessage","setSeverity","useMutation","onCompleted","shareVenue","useLazyQuery","variables","usernameFragment","searchUser","loading","error","shareRoute","handleCloseDialog","matchingUsers","console","log","searchUsers","length","idx","push","username","Dialog","TransitionComponent","keepMounted","DialogTitle","DialogContent","Stack","spacing","Box","mb","Search","fluid","input","iconPosition","placeholder","onResultSelect","e","result","find","user","text","prevSelected","key","isLoading","results","value","onSearchChange","fragment","target","Popup","on","trigger","IconButton","link","navigator","clipboard","writeText","clearTimeout","onOpen","setTimeout","display","flexWrap","maxWidth","p","Chip","label","onDelete","targetUser","userChips","filter","DialogActions","forEach","recipient","route","routeID","disabled","CardOpeningHours","hours","today","format","Date","todaysHours","hour","day","Typography","String","padStart","minutes","close","VenueCard","venueLogo","removeHandler","addHandler","routePlanner","authenticated","existing","history","useHistory","showModal","setShowModal","barLogo","cafeLogo","restaurantLogo","mt","alignSelf","Card","Content","Image","floated","src","Button","Header","Meta","openingHours","Description","flexDirection","tags","as","image","tag","pathname","Tooltip","arrow","fontSize","extra","address","component","contactNumber","ToggleButton","styled","MuiToggleButton","TopMenu","setActivePanel","activePanel","ToggleButtonGroup","fullWidth","exclusive","onChange","newAlignment","FilterDropdown","sortDistance","sortPrice","sortReviews","Dropdown","floating","button","Menu","Item","UPDATE_ROUTE","SAVE_ROUTE","FinaliseModal","setFinalising","setRouteID","setShareRoute","routeVenues","routeName","setRouteName","clearRoutePlan","routeVenuesIDS","showAlert","setShowAlert","alertSeverity","setAlertSeverity","saveRoute","errors","Backdrop","theme","drawer","CircularProgress","DialogContentText","FormControl","m","TextField","required","RoutePlanner","venues","handleAdd","handleRemove","droppableId","provided","droppableProps","innerRef","draggableId","snapshot","draggableProps","dragHandleProps","HomeSidebar","existingRoute","setVenueArray","searchResultVenues","featuredVenues","setRouteVenues","updateRouteGeo","finalising","finaliseModal","setFinaliseModal","fetchPolicy","editRoute","updateRoute","updatedVenues","venueIDs","_","i","resArray","pt","ml","mr","minWidth","autoHide","basic","destination","newCardOrder","Array","from","splice","source","removed","justifyContent","LoadingButton","loadingPosition","endIcon","bgcolor","GetSelf","CircularBadge","iconName","LoginBadge","BusinessBadge","SmallModal","openState","handleFunction","buttonContent","Modal","closeIcon","Actions","LogoutUser","LogoutBadge","localStorage","clear","logout","setOpen","AccountBadge","SubNotificationsFeed","GET_USR_NOTIFICATIONS","buttonStyle","NotificationButton","active","Badge","Notification","action","date","Feed","Event","Summary","formatDistance","addSuffix","Avatar","NotificationFeed","feed","autoHeight","notification","Divider","NotificationBadge","updateFeed","hasNotifications","setHasNotifications","useSubscription","onSubscriptionData","subscriptionData","prevFeed","subscriptionErr","useQuery","getNotifications","BusinessHomeBadge","MapBadge","NavBarItems","customer","business","admin","unauthenticated","NavBar","setAuthenticated","Dimmer","Loader","fixed","logo","href","getSelf","userType","borderless","SummaryVenueInfo","DetailedVenueInfo","GET_FEATURED_VENUES","venueTypeOptions","VenueTypeDropdown","setVenueType","MenuItemCard","itemSearch","setItemSearch","price","itemName","itemKind","card","indexOf","removeItem","GetAllItemKinds","DropdownKindBar","setItemKind","allOptions","foodTypes","getAllItemKinds","food","drinkTypes","drink","concat","search","clearable","ds","tagText","option","renderLabel","alert","AddMenuCard","setName","setPrice","spec","setSpec","Input","Grid","Column","DropDownKindBar","Checkbox","checked","textAlign","paddingTop","newItem","cost","parseFloat","addItem","GetAllTags","DropdownTagBar","searchTag","setSearchTag","multiple","getAllTags","muiTheme","createTheme","overrides","MuiSlider","track","thumb","AdvancedSearchBar","ratingStar","setRatingStar","venueCondition","setVenueCondition","searchTags","setSearchTags","setLocation","setRadiusCallback","setSelectingLocation","locationType","setLocationType","onRadiusChange","handleLocationChange","geolocation","getCurrentPosition","radFloat","searchCenter","coords","maximumAge","ThemeProvider","Slider","valueLabelDisplay","min","max","openNow","promotion","Radio","Rating","onRate","rating","maxRating","GetMyTags","AddRating","AddTag","RemoveTag","SpecialHoursForm","sundayTime","setSundayTime","mondayTime","setMondayTime","tuesdayTime","setTuesdayTime","wednesdayTime","setWednesdayTime","thursdayTime","setThursdayTime","fridayTime","setFridayTime","saturdayTime","setSaturdayTime","FormControlLabel","control","set","to","TimePicker","newValue","renderInput","params","minDateTime","MenuItemUpload","uppy","Uppy","meta","restrictions","maxNumberOfFiles","maxFileSize","minNumberOfFiles","autoProceed","formData","allowMultipleUploadBatches","Zone","proudlyDisplayPoweredByUppy","allowedFileTypes","hideUploadButton","UploadMenuItem","TimedSpecialForm","dateValue","setDateValue","fromTime","setFromTime","toTime","setToTime","DateRangePicker","disablePast","calendars","startProps","endProps","Fragment","AddItemForm","credits","setMessage","setItemName","itemPrice","setItemPrice","isSpecial","setIsSpecial","isTimedSpecial","setIsTimedSpecial","category","setCategory","itemType","setItemType","isRecurring","setIsRecurring","disableTypeSelect","setDisableTypeSelect","itemNameInvalid","setItemNameInvalid","itemPriceInvalid","setItemPriceInvalid","categoryInvalid","setCategoryInvalid","itemTypeInvalid","setItemTypeInvalid","reset","res","menuItemUpload","uploadMenuItem","uploadLoading","timedSpecialCheckbox","FormGroup","LocalizationProvider","dateAdapter","DateAdapter","noValidate","autoComplete","InputLabelProps","shrink","InputProps","startAdornment","InputAdornment","inputMode","pattern","Number","InputLabel","htmlFor","Select","defaultValue","MenuItem","foodItem","drinkItem","Fade","in","Collapse","specialExpiry","specialStart","specialEnd","specialHours","getHours","getMinutes","constructSpecialHours","upload","then","getFiles","file","menuItemData","AddItemGroup","isWide","useMediaQuery","flex","pointing","labelPosition","GET_PROFILE","REDEEM_PROMOTION","RedeemPromotion","setOpenRedeem","creditsRequired","percentageOff","startDate","endDate","setCredits","alertType","setAlertType","getProfile","loadingProfile","refetchProfile","refetch","a","redeemPromotion","success","loadingRedeem","toLocaleDateString","PromotionSection","openRedeem","days","OpeningHours","special","menuInfo","trading","alignItems","Banner","selectedTags","selectTag","canSelect","addRating","openForm","setFormOpen","anchorEl","setAnchorEl","reviewsOpen","Boolean","readOnly","precision","currentTarget","Popover","anchorOrigin","vertical","horizontal","transformOrigin","align","container","columns","clickable","includes","MenuSection","isActive","verified","checkBoxPromo","checkBoxID","addCheckedItems","checkedItems","setCheckedItems","now","getDay","currentHour","currentMinute","specialHour","specialOnNow","itemIcon","specialTimes","expiryTime","specialHoursIcon","marginBottom","corner","MenuPane","propData","useParams","setSelectedTags","setCanSelect","selfLoading","selfErrors","notifyOnNetworkStatusChange","loadingVenue","errorsVenue","dataVenue","refetchVenueInfo","allTagsResults","getMyTags","datum","addTag","removeTag","specials","drinks","getVenueInfoByID","venueInformation","menu","menuItem","averageRating","tagID","uploadValue","float","cancel","gutterBottom","startIcon","LocationCriteria","next","setSelRouteLocation","setVenueReq","routeLocationType","setRouteLocationType","setCalcCenter","showMap","setShowMap","showSelected","setShowSelected","errorOccured","setErrorOccured","locationError","setLocationError","margin","paddingRight","centered","RadioGroup","row","centre","geometry","postion","routeCenter","handleNext","TimeCriteria","back","maxHourTime","setMaxHourTime","venueCount","setVenueCount","timeAtVenue","setStartTime","setTimeAtVenue","venueReq","dateVal","setDateVal","venueMinError","setVenueMinError","venueMaxError","setVenueMaxError","dateError","setDateError","pastError","setPastError","venueOpenAtTime","time","currentDay","nextStep","flag","newDate","hourInc","dateToCheck","addHours","verifyRequiredRoutesOpen","differenceInMinutes","DateTimePicker","helperText","inputprops","CriteriaBox2","confirm","MultiCrit","setShowCrit","setRouteLocation","step","setStep","continues","preventDefault","GenerateRoute","GetRouteByID","breakpoints","values","xs","sm","md","lg","xl","Home","venueData","setVenueData","panelData","setPanelData","showAdv","setShowAdv","showCrit","desktopRes","up","mobileOpen","setMobileOpen","handleDrawerToggle","updateDisplayData","updateSideBar","wrappedArray","flat","setCurrentPanel","setFeaturedVenues","setSearchResultVenues","setRoutePlanner","getFeaturedVenues","loadingFeatured","setVenueName","searchRadius","setSearchRadius","selectingLocation","routeRating","setRouteRating","routeItemSearch","setRouteItemSearch","routeTags","setRouteTags","setRouteRadius","startTime","genRouteData","setGenRouteData","selectVenuesFlag","setSelectVenuesFlag","routelocation","selRouteLocation","parseInput","basicSearch","menuItems","item","venueTags","promotionNow","r","minRating","searchCriteria","parseRoute","maxTourTime","parseInt","requiredVenues","minVenues","maxVenues","venueCriteria","generateRoute","routeInput","defaultResults","getAllVenues","defaultQuery","getRouteByID","routeIDQuery","routeIDResults","searchVenues","searchQuery","popUpResults","popUpQuery","displayPopupInfo","useEffect","distance","coor1","coor2","b","haversine","matches","newOpen","sidebarProps","panel","sortedRes","sort","averagePrice","costA","CssBaseline","Toolbar","edge","computer","mobile","tablet","Drawer","anchor","ModalProps","flexShrink","UsernameInput","setUsername","Form","EmailInput","email","setEmail","PasswordInput","password","setPassword","LOGIN","LoginForm","hideError","login","handleLogin","credentials","token","setItem","verticalAlign","raised","Message","hidden","header","Login","RegisterCustomer","RegisterBusiness","RegistrationForm","RegisterQuery","queryName","redirectRef","register","handleRegister","Register","ForgotPassword","ResetAccount","Forgot","forgotPassword","stacked","GET_REQUESTS_BY_STATUS","UPDATE_REQUEST_STATUS","GET_USERS_COUNT","GET_BUSINESS_COUNT","RejectVenueRequestModal","comment","setComment","completeRejection","negative","TextArea","mod","n","AdminDashboardCarousel","currentBusiness","setCurrentBusiness","businessList","updateCallback","Container","Row","Group","attached","claimant","verificationDocuments","rel","decision","requestID","Or","positive","AdminDashboardComponent","mainDisplay","pendingStats","userStats","businessStats","userResults","businessResults","status","refetchQueries","query","updateRequest","inline","getRequestsByStatus","getUsersCount","count","getBusinessCount","overflowX","Statistic","widths","Value","AdminDashboard","BusinessNav","AppBar","enableColorOnDark","GET_MY_PENDING_REQUESTS","GET_MY_REJECTED_REQUESTS","GET_ALL_VENUES","UPLOAD_FILE","VerificationUpload","uploadFile","initUpload","refetchQuery","catch","err","handler","off","setShowCallback","setFileCallback","queryToDropdownOptions","venuesFound","transform","boxShadow","top","left","AddVenueModal","networkStatus","showUpload","setShowUpload","setVenueID","fileID","setFileID","NetworkStatus","startRefetchPending","removeFile","GET_MY_VENUES","AddPromotion","DateForm","AddPromoForm","refetchVenues","percentage","setPercentage","points","setPoints","percentageError","setPercentageError","pointsError","setPointsError","addPromotion","aligntItems","marginRight","inputProps","promotionInput","menuItemIDs","UploadMenu","UploadMenuForm","handleReset","uploadMenu","VenueMenu","openPromo","setOpenPromo","addCheckedItem","flexBasis","ProcessMenuItem","propVenueID","updateQueue","approveMenuItem","CardContent","CardActions","menuItemID","ReviewVenueCarousel","venuesList","getVenues","verificationQueue","updateVerificationQueue","queueDone","setQueueDone","currentVenue","setCurrentVenue","itemID","newVenueJobs","VenueDisplayAccordion","verifiedVenues","pendingVenues","rejectedVenues","pendingResults","stateProp","setVenues","getVenuesForSelf","rejectedResults","Accordion","AccordionSummary","expandIcon","AccordionDetails","getMyRequestsByStatus","reasonForRejection","drawerWidth","SideNav","onHome","setOnHome","onVerification","setOnVerification","List","ListItem","selected","ListItemIcon","ListItemText","primary","noWrap","boxSizing","flexGrow","BusinessDashboardComponent","BusinessDashboard","Reset","newPassword","setNewPassword","confirmPassword","setConfirmPassword","setToken","resetAccount","ProfileBadge","avatarUrl","CreditBadge","creditScore","PromotionSummary","validFrom","validTo","Paper","useCouponEndpoint","PromotionCard","promotionID","userID","qrCodeUrl","pl","pb","CardMedia","cursor","PromotionsFeed","activePromotions","futurePromotions","expiredPromotions","placement","RouteSummary","RoutesFeed","myRoutes","sharedWithMe","DeleteUser","DeleteButton","deleteUser","handleDelete","AccountDash","joinedDate","actions","NavDial","setPage","SpeedDial","ariaLabel","bottom","SpeedDialIcon","SpeedDialAction","tooltipTitle","Profile","setAvatarUrl","setUserID","setUserType","setJoinedDate","setActivePromotions","setFuturePromotions","setExpiredPromotions","setMyRoutes","sharedRoutes","setSharedRoutes","page","customerData","errorProfile","authToken","getItem","wsService","WebSocketLink","uri","reconnect","connectionParams","httpUploadServiceSplitter","createUploadLink","splitService","split","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","Router","CookiesProvider","ApolloProvider","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6b8a782.chunk.js","sourcesContent":["\nconst CUSTOMER = 'Customer';\nconst BUSINESS = 'Business';\nconst ADMIN = 'Admin';\n\nexport const UserTypes = {\n  CUSTOMER,\n  BUSINESS,\n  ADMIN,\n}; ","import { gql } from '@apollo/client';\n\nconst GET_ALL_VENUES_MAP = gql`\n    query getMapDisplayData($now: DateTime!) {\n            getAllVenues {\n                _id\n                name\n                venueType\n                contactNumber\n                location {\n                    coordinates\n                }\n                isPromotion(now: $now)\n                averageRating\n                averagePrice\n        }\n    }\n`;\n\nexport default GET_ALL_VENUES_MAP;","import { gql } from '@apollo/client';\n\nconst SEARCH_VENUES_MAP = gql`\n    query search($searchCriteria: SearchInput!, $now: DateTime!) {\n        searchVenues(searchCriteria: $searchCriteria) {\n            content {\n                _id\n                name\n                venueType\n                address\n                contactNumber\n                location {\n                    coordinates\n                }\n                openingHours {\n                    _id\n                    hours {\n                      _id\n                      day\n                      open {\n                        _id\n                        hours\n                        minutes\n                      }\n                      close {\n                        _id\n                        hours\n                        minutes\n                      }\n                    }\n                }\n                tags {\n                    tag {\n                        _id\n                        text\n                    }\n                    count\n                }\n                isPromotion(now: $now)\n                averageRating\n                averagePrice\n            }\n            errors\n        }\n    }\n`\nexport default SEARCH_VENUES_MAP;","import React from 'react';\nimport { \n    Segment, \n    Label \n} from 'semantic-ui-react'\n\n/**\n * @returns Map legend with color\n * codes to undertsand map\n * \n */\n\nconst MapLegend = (props) =>{\n\n    const segmentStyle = {\n        zIndex: 999,\n        position: 'absolute',\n        width: '20%',\n        marginTop: '5%',\n        marginLeft: '1%',\n        maxHeight: 'calc(100vh - 3vw)',\n        overflow: 'auto',\n        padding: '2%',\n        borderRadius: '15px'\n    }\n    \n    return (\n        <Segment style={segmentStyle} >\n            <div>\n                <Label circular color='yellow' empty/>\n                <span style={{paddingLeft: '1%'}}>On Promotion</span>\n            </div>\n            <div>\n                <Label circular color='blue' empty/>\n                <span style={{paddingLeft: '1%'}}>Venues</span>\n            </div>\n            <div>\n                <Label circular color='purple' empty/>\n                <span style={{paddingLeft: '1%'}}>On route</span>\n            </div>\n            <div>\n                <Label circular color='green' empty/>\n                <span style={{paddingLeft: '1%'}}>My Location</span>\n            </div>\n            \n        </Segment>\n    );\n\n}   \n\nexport default MapLegend;","import React from 'react';\nimport { Icon } from 'semantic-ui-react';\nimport { bool, func, number, string } from 'prop-types';\nimport { Marker } from 'react-map-gl';\n\nconst BarIcon = (isPromotion, onRoute) => {\n    if (isPromotion) {\n        return (\n            <Icon circular inverted color='yellow' name='beer' />\n        );\n    }\n    if (onRoute) {\n        return (\n            <Icon circular inverted color='purple' name='beer' />\n        );\n    }\n    return (\n        <Icon circular inverted color='teal' name='beer' />\n    );\n\n};\n\nconst CafeIcon = (isPromotion, onRoute) => {\n    if (isPromotion) {\n        return (\n            <Icon circular inverted color='yellow' name='coffee' />\n        );\n    }\n    if (onRoute) {\n        return (\n            <Icon circular inverted color='purple' name='coffee' />\n        );\n    }\n    return (\n        <Icon circular inverted color='teal' name='coffee' />\n    );\n\n};\n    \n\nconst RestaurantIcon = (isPromotion, onRoute) => {\n    if (isPromotion) {\n        return (\n            <Icon circular inverted color='yellow' name='utensils' />\n        );\n    }\n    if (onRoute) {\n        return (\n            <Icon circular inverted color='purple' name='utensils' />\n        );\n    }\n    return (\n        <Icon circular inverted color='teal' name='utensils' />\n    );\n\n};\n\n/**\n *\n * @returns A venue marker to display on the map\n * accordind to conditions different colour's and \n * Icons will be displayed indication different type of venues\n * \n * @param venueType - venue type to display icon\n * \n * @param longitude - logitude of marker\n * \n * @param latitude - latitude of marker\n * \n * @param venueName - venues name\n * \n * @param venueID - venue ID \n * \n * @param setSelectedVenue - state to show popUp\n * \n * @param setLat - populates popUp coordinates\n * \n * @param setLong - populates popUp coordinates\n * \n * @param setID - populates popUp id\n * \n * @param isPromotion - bool to change venues color\n * \n * @param onRoute - bool to change venues color\n * \n */\n\n\nconst VenueMarker = (props) => {\n    const { \n        venueType, \n        longitude, \n        latitude, \n        venueName, \n        venueID, \n        setSelectedVenue, \n        setLat, \n        setLong, \n        setId, \n        isPromotion,\n        onRoute,\n    } = props;\n\n    let icon;\n    switch (venueType) {\n        case \"BAR\": \n            icon = BarIcon(isPromotion, onRoute);\n            break;\n        case \"CAFE\":\n            icon = CafeIcon(isPromotion, onRoute);\n            break;\n        default: \n            icon = RestaurantIcon(isPromotion, onRoute);\n            break;\n    }\n\n    function showPopUp() {\n        setLat(latitude);\n        setLong(longitude);\n        // fire show venue card too\n        setSelectedVenue(venueName, venueID);\n        setId(venueID);\n    }\n\n    return (\n        <Marker longitude={longitude} latitude={latitude} onClick={showPopUp}>\n            {icon}\n        </Marker>\n    );\n};\n\nVenueMarker.defaultProps = {\n    venueType: \"\",\n    longitude: 0,\n    latitude: 0,\n    venueName: \"\",\n    venueID: \"\",\n    isPromotion: false,\n    onRoute: false,\n}\n\nVenueMarker.propTypes = {\n    venueType: string,\n    longitude: number,\n    latitude: number,\n    venueName: string,\n    venueID: string,\n    setSelectedVenue: func,\n    setLong: func,\n    setLat: func,\n    setId: func,\n    isPromotion: bool,\n    onRoute: bool,\n}\n\nexport default VenueMarker;","import React, { \n    useMemo, \n    useState, \n    useCallback } \nfrom 'react';\nimport { \n    shape, \n    PropTypes \n} from 'prop-types';\nimport ReactMapGL, { \n    Popup, \n    Marker, \n    Source, \n    Layer, \n    GeolocateControl \n} from 'react-map-gl';\nimport Circle from '@turf/circle'\nimport { toGeoJSON } from '@mapbox/polyline';\nimport { Icon } from 'semantic-ui-react';\nimport MapLegend from './MapLegend';\nimport VenueMarker from './VenueMarker';\nimport 'maplibre-gl/dist/maplibre-gl.css';\nimport '../../styles/panes.css';\n\n\n/**\n * @returns MapView to show\n * all venues, routes, radius overlay\n * \n * @param {*} props \n * \n * Conditionally renders with props states.\n * Dependingon state, routes/venues or \n * radius overlay is displayed.\n * \n * User can double click to select location on\n * certain situations which are handled by \n * the props\n */\nconst MapView = (props) =>{\n\n    const [viewport, setViewport] = useState({\n        width: 'fit',\n        height: '100%',\n        latitude: -33.9159104,\n        longitude:  151.2278473,\n        zoom: 15\n        // renderTextureMode: true\n    });\n\n    const [vID, setId] = useState(null);\n    const [selLong, setLong] = useState();\n    const [selLat, setLat] = useState();\n    const [clicked, setClicked] = useState();\n    const [routeClick, setRouteClick] = useState(false);\n\n\n    const [marker, setMarker] = useState({\n        latitude: 0,\n        longitude: 0,\n    });\n\n    const [routeMarker, setRouteMarker] = useState({\n        latitude: '',\n        longitude: '',\n    });\n\n    const [events, logEvents] = useState({});\n    \n    const onMarkerDragStart = useCallback(event => {\n    logEvents(_events => ({..._events, onDragStart: event.lngLat}));\n    }, []);\n    \n    const onMarkerDrag = useCallback(event => {\n    logEvents(_events => ({..._events, onDrag: event.lngLat}));\n    }, []);\n    \n    const onMarkerDragEnd = useCallback(event => {\n        logEvents(_events => ({..._events, onDragEnd: event.lngLat}));\n        props.selectLocationCallback(event.lngLat);\n        setMarker({\n            longitude: event.lngLat[0],\n            latitude: event.lngLat[1]\n        });\n        // SET LOCATION RADIUS!!\n    }, []);\n\n    \n    const { data } = props;\n    const { popUpFunc } = props;\n      \n    const [selectedVenue, setSelectedVenue] = useState(null);\n    const handleVenueSelect = (selection, venueID) => {\n        setSelectedVenue(selection);\n        popUpFunc(venueID);\n    };\n\n    const circleStyle = {\n        id: 'point',\n        type: 'fill',\n        paint: {\n            'fill-color': '#5a3fc0',\n            'fill-opacity': 0.3,\n        }\n    };\n\n    const lineStyle = {\n        'type': 'line',\n        'layout': {\n        'line-join': 'round',\n        'line-cap': 'round'\n        },\n        'paint': {\n        'line-color': '#4D4861',\n        'line-width': 5\n        }\n    }\n\n    let center = [routeMarker.longitude,  routeMarker.latitude];\n    let radius = props.routeRadius;\n    let options = {steps: 64, units: 'kilometers', properties: {foo: 'bar'}};\n    let circle = Circle(center, radius, options);\n\n    let center2 = [props.calcCenter.longitude,  props.calcCenter.latitude];\n    let circle2 = Circle(center2, radius, options);\n\n    // Only update markers when our data changes\n    const markers = useMemo(() => (data.venueArray.map(\n        venue => (\n            <VenueMarker\n                key={venue._id}\n                venueType={venue.venueType}\n                longitude={venue.location.coordinates[0]}\n                latitude={venue.location.coordinates[1]} \n                venueName={venue.name}\n                venueID={venue._id}\n                setSelectedVenue={handleVenueSelect}\n                setLat={setLat}\n                setLong={setLong}\n                setId={setId}\n                isPromotion={venue.isPromotion}\n            />\n        )\n    )), [data]);\n\n    const venuePopup = (\n            <Popup \n                latitude={selLat} \n                longitude={selLong} \n                style={{backgroundColor: 'white'}}\n                onClose={() => setSelectedVenue(null)} \n            >\n                <h3>{selectedVenue}</h3>\n            </Popup>\n    );\n\n    const {width, height, latitude, longitude, zoom} = viewport;\n    return (\n        <div className='home-primary-pane map-pane'>\n            {/* TODO: change to use env */}\n            <ReactMapGL\n                onDblClick={event => {\n                    \n                    if (props.selecting) {\n                        props.selectLocationCallback(event.lngLat);\n                        setMarker({\n                            longitude: event.lngLat[0],\n                            latitude: event.lngLat[1]\n                        })\n                        setClicked(true);\n                    }\n                    if (props.selectingRoute) {\n                        props.setRouteLocationCallback(event.lngLat);\n                        setRouteMarker({\n                            longitude: event.lngLat[0],\n                            latitude: event.lngLat[1],\n                        })\n                        setRouteClick(true);\n                    }\n                }}\n\n                doubleClickZoom={!props.selecting && !props.selectingRoute}\n                width={width}\n                height={height}\n                latitude={latitude}\n                longitude={longitude}\n                zoom={zoom}\n                mapStyle=\"https://api.maptiler.com/maps/topographique/style.json?key=peQ2YdnjhT2eYwSigw9X\"\n                onViewportChange={nextViewport => setViewport(nextViewport)}\n            >\n                {props.selecting && clicked? (\n                    <div>\n                    <Marker\n                        longitude={marker.longitude}\n                        latitude={marker.latitude}\n                        offsetTop={-20}\n                        offsetLeft={-10}\n                        draggable\n                        onDragStart={onMarkerDragStart}\n                        onDrag={onMarkerDrag}\n                        onDragEnd={onMarkerDragEnd}\n                        >\n                        <Icon inverted color='red' size='big' name='map marker alternate' />\n                    </Marker>\n                </div>\n                ): null}\n                {props.selectingRoute && routeClick? (\n                    <div>\n                    <Marker\n                        longitude={routeMarker.longitude}\n                        latitude={routeMarker.latitude}\n                        offsetTop={-20}\n                        offsetLeft={-10}\n                        draggable\n                        onDragStart={onMarkerDragStart}\n                        onDrag={onMarkerDrag}\n                        onDragEnd={onMarkerDragEnd}\n                        >\n                        <Icon inverted color='black' size='big' name='map marker alternate' />\n                    </Marker>\n                    <Source id=\"my-data\" type=\"geojson\" data={circle}>\n                        <Layer {...circleStyle} />\n                    </Source>\n                </div>\n                ): null}\n                {markers}\n                {props.routeData !== undefined && props.routeData !== null ? (\n                    <>\n                    <Source type='geojson' data={toGeoJSON(props.routeData.content.routeGeometry)}>\n                        <Layer\n                            {...lineStyle}\n                        />\n                                    \n                    </Source>\n                    {props.routeData.content.venuesInRoute.map((venue, index) => (\n                            <div>\n                                <VenueMarker\n                                    key={venue._id}\n                                    venueType={venue.venueType}\n                                    longitude={venue.location.coordinates[0]}\n                                    latitude={venue.location.coordinates[1]} \n                                    venueName={venue.name}\n                                    venueID={venue._id}\n                                    setSelectedVenue={handleVenueSelect}\n                                    setLat={setLat}\n                                    setLong={setLong}\n                                    setId={setId}\n                                    onRoute={true}\n                                />\n                            </div>\n                        ))\n                    }\n                    </>\n                ) : null} \n                {props.showCalCenter ? (\n                    <div>\n                        <Marker\n                            longitude={props.calcCenter.longitude}\n                            latitude={props.calcCenter.latitude}\n                            offsetTop={-20}\n                            offsetLeft={-10}\n                        >\n                            <Icon inverted color='black' size='big' name='map marker alternate' />\n                        </Marker>\n                        <Source id=\"selected_circle\" type=\"geojson\" data={circle2}>\n                            <Layer {...circleStyle} />\n                        </Source>\n                    </div>\n                ): null}\n                {selectedVenue ? venuePopup : null}\n                <MapLegend />\n                <GeolocateControl\n                    positionOptions={{ enableHighAccuracy: true }}\n                    trackUserLocation={true}\n                    showAccuracyCircle={false}\n                />\n            </ReactMapGL>\n        </div>\n    );\n}\n\nMapView.defaultProps = {\n    data: shape({\n        venueArray: [],\n    })\n}\n\nMapView.propTypes = {\n    data: PropTypes.any,\n    popUpFunc: PropTypes.func,\n    routeData: PropTypes.object,\n}\n\n\nexport default MapView;","import * as React from \"react\"\nimport PropTypes from 'prop-types';\n\n/**\n * Primary Button component will be the rounded (oval)\n * style of the buttons.\n */\nfunction PrimaryButton({\n    content, \n    onClick,\n    testReference\n}) {\n    return (\n        <button \n            className=\"ui circular button primary\" \n            onClick={onClick}\n            data-cy={testReference}\n        >\n            {content}\n        </button>\n    );\n}\n\n\nPrimaryButton.propTypes = {\n    content: PropTypes.string.isRequired,\n    onClick: PropTypes.func,\n    testReference: PropTypes.string\n};\n\nexport default PrimaryButton;\n\n","export const clientUrl = `${window.location.host}`;\nexport const serverUrl = `http://localhost:2048/graphql`;\nexport const avatarEndpoint = \"https://avatars.dicebear.com/api/gridy\";","export default __webpack_public_path__ + \"static/media/coffee.74588761.svg\";","export default __webpack_public_path__ + \"static/media/beer.88cb9114.svg\";","export default __webpack_public_path__ + \"static/media/restaurant.4b33cc10.svg\";","import { gql } from '@apollo/client';\n\n// TODO - write backend\nexport const SearchUser = gql`\n    query SearchUser($usernameFragment: String!) {\n        searchUsers(usernameFragment: $usernameFragment) {\n            username\n            _id\n        }\n    }\n`;\n","import { gql } from '@apollo/client';\n\n/** @todo - patch this to drop senderID */\nexport const ShareVenue = gql`\n    mutation venueNotification(\n        $recipient: String!, \n        $venue: String!, \n        $venueID: String!\n    ) {\n        shareVenue(\n            recipient: $recipient,\n            venue: $venue, \n            venueID: $venueID\n        )\n    }\n`;\n","import { gql } from '@apollo/client';\n\n\nexport const SHARE_ROUTE = gql`\n    mutation ShareRoute(\n        $recipient: String!,\n        $route: String!,\n        $routeID: String!, \n    ) {\n        shareRoute(\n            recipient: $recipient,\n            route: $route,\n            routeID: $routeID\n        )\n    }\n`;\n","import React, { forwardRef } from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert from '@mui/material/Alert';\n\n\n\nconst Alert = forwardRef(function Alert(props, ref) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\n\nconst AlertBar = ({\n    show, setShow,\n    message, severity\n}) => {\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway')\n            return;\n\n        setShow(false);\n    };\n\n    return (\n        <Snackbar open={show} autoHideDuration={2000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity={severity} sx={{ width: '100%' }}>\n                { message }\n            </Alert>\n        </Snackbar>\n    )\n};\n\n\n\nexport default AlertBar;","import React, { useState } from 'react';\nimport { Search, Popup } from 'semantic-ui-react';\nimport { useMutation, useLazyQuery } from '@apollo/client';\nimport { SearchUser } from '../../gql/search/searchUser.gql';\nimport { ShareVenue } from '../../gql/venueInfo/shareVenue.gql';\nimport { SHARE_ROUTE } from '../../gql/routes/shareRoute.gql';\nimport PropTypes from 'prop-types';\n\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Slide from '@mui/material/Slide';\nimport Stack from '@mui/material/Stack';\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport AlertBar from '../../shared-components/AlertBar';\n\nimport { clientUrl } from '../../constants/urls';\n\nconst hideAfter = 700;\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\n/**\n * \n * @param {*} openTrigger\n * @param {*} stateHandler\n * @param {*} title\n * @param {*} icon\n * @returns ShareModal\n * \n * @description\n * \n * display a modal for sharing\n * that takes in a title, icon for the\n * share 'wizard' and a setState\n * hook and a state to control it.\n * \n * \n * @todo \n * \n * + make more generic\n *   for route sharing\n */\nconst ShareModal = ({\n    openTrigger,\n    stateHandler,\n    type,\n    title,\n    shareID,\n    shareName\n}) => {\n    // make prop to use dynamically\n    let popupText = 'Copied Share Link!';\n    const [ isOpen, setIsOpen ] = useState(false);\n    const [ timeout, setTimeoutHandler ] = useState('');\n    const [ searchFragment, setSearchFragment ] = useState('');\n    const [ selectedUsers, setSelectedUsers ] = useState([]);\n\n    // alert bar states\n    const [ alertMessage, setAlertMessage ] = useState('');\n    const [ severity, setSeverity ] = useState('');\n    const [ show, setShow ] = useState(false);\n\n\n    const [ shareVenue ] = useMutation(ShareVenue,\n        {\n            onCompleted: (data) => {\n                if (data.shareVenue) {\n                    setSelectedUsers([]);\n                    setAlertMessage(`Venue shared!`);\n                    setSeverity('success');\n                    setShow(true);\n                    stateHandler(false);\n                } else {\n                    setAlertMessage(\n                        `Failed to share, please refresh and try again!`\n                    );\n                    setSeverity('error');\n                    setShow(true);\n                }\n            }\n        }\n    );\n    const [ searchUser, { loading, error, data }] = useLazyQuery(SearchUser, {\n        variables: {\n            usernameFragment: searchFragment\n        }\n    });\n\n    // share route\n    const [ shareRoute ] = useMutation(SHARE_ROUTE,\n        {\n            onCompleted: (data) => {\n                if (data.shareRoute) {\n                    setSelectedUsers([]);\n                    setAlertMessage(`Route shared!`);\n                    setSeverity('success');\n                    setShow(true);\n                    stateHandler(false);\n                } else {\n                    setAlertMessage(\n                        `Failed to share, please refresh and try again!`\n                    );\n                    setSeverity('error');\n                    setShow(true);\n                }\n            }\n        }\n    );\n\n\n    const handleSearch = (fragment) => {\n        setSearchFragment(fragment);\n        if (fragment.length > 1)\n            searchUser();\n    }\n\n    const handleOpen = () => {\n        setIsOpen(true)\n\n        setTimeoutHandler(\n            setTimeout(() => {\n                setIsOpen(false)\n            }, hideAfter)\n        )\n    }\n\n    const handleClose = () => {\n        setIsOpen(false);\n        clearTimeout(timeout)\n    }\n\n    const handleCloseDialog = () => {\n        setSelectedUsers([]);\n        stateHandler(false);\n    }\n\n    const removeUser = (targetUser) => {\n        setSelectedUsers(\n            (userChips) => userChips.filter((user) => user.key !== targetUser.key)\n        );\n    }\n\n    const selectUser = (e, { result }) => {\n        console.log(\"[>>] selected  => \", result.title);\n\n        // check if the user was already selected\n        if (selectedUsers.find((user) => user.text === result.title)) {\n            setAlertMessage(`User already selected!`);\n            setSeverity('warning');\n            setShow(true);\n            return;\n        }\n            \n\n        // append selected user to head of selectedUsers\n        setSelectedUsers((prevSelected) => [\n            {\n                key: prevSelected.length,\n                text: result.title,\n            },\n            ...prevSelected\n        ]);\n\n        // clear search\n        setSearchFragment('');\n    }\n\n    const copyLink = () => {\n        const link = `${clientUrl}/${type}/${shareID}`;\n        navigator.clipboard.writeText(link);\n    }\n\n    // todo make conditional query\n    const handleShare = () => {\n\n        if (selectedUsers.length > 0 && type === 'menu') {\n            selectedUsers.forEach((user) => {\n                shareVenue({\n                    variables: {\n                        recipient: user.text,  // username selected\n                        venue: shareName,\n                        venueID: shareID,\n                    }\n                });\n            });\n        }\n\n        if (selectedUsers.length > 0 && type === 'route') {\n            selectedUsers.forEach((user) => {\n                shareRoute({\n                    variables: {\n                        recipient: user.text,  // username selected\n                        route: shareName,\n                        routeID: shareID,\n                    }\n                });\n            });\n        }\n    }\n\n\n    let matchingUsers = []\n\n    if (error)\n        console.log(\"[>>] got error\", error);\n\n    if (data) {\n        if (data.searchUsers.length > 0) {\n            for (let idx = 0; idx < data.searchUsers.length; idx++) {\n                matchingUsers.push({\n                    title: data.searchUsers[idx].username,\n                });\n            }\n        }\n    }\n\n\n    return (\n        <>\n            <Dialog\n                open={openTrigger}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={handleCloseDialog}\n                aria-describedby=\"share-dialog\"\n            >\n                <DialogTitle>{title}</DialogTitle>\n                <DialogContent>\n                    <Stack direction=\"row\" spacing={3}>\n                        <Box\n                            sx={{ mb: 25 }}\n                        >\n                            <Search\n                                fluid\n                                size='large'\n                                input={{ iconPosition: 'left' }} \n                                placeholder='Search user ...'\n                                loading={loading}\n                                onResultSelect={selectUser}\n                                isLoading={loading}\n                                results={matchingUsers}\n                                value={searchFragment}\n                                onSearchChange={event => handleSearch(event.target.value)}\n                            />\n                        </Box>\n                        <Box>\n                            <Popup \n                                content={popupText}\n                                position='top center'\n                                on='click'\n                                trigger={\n                                    <IconButton\n                                        icon='copy'\n                                        onClick={copyLink}\n                                    >\n                                        <ContentCopyIcon />\n                                    </IconButton>\n                                }\n                                open={isOpen}\n                                onClose={handleClose}\n                                onOpen={handleOpen}\n                            />\n                        </Box>\n                    </Stack>\n                    <Box\n                        sx={{\n                            display: 'flex',\n                            flexWrap: 'wrap',\n                            maxWidth: 400\n                        }}\n                    >\n                        { \n                            selectedUsers.map(user => (\n                                <Box sx={{p: 0.5}}>\n                                    <Chip\n                                        key={user.key}\n                                        label={user.text}\n                                        onDelete={() => removeUser(user)}\n                                    />\n                                </Box>\n                            ))\n                        }\n                    </Box>\n                </DialogContent>\n                <DialogActions>\n                    <Button \n                        onClick={handleCloseDialog}\n                        color='error'\n                        variant='outlined'\n                    >\n                        Cancel\n                    </Button>\n                    <Button \n                        onClick={handleShare}\n                        disabled={selectedUsers.length === 0}\n                        color='success'\n                        variant='outlined'\n                    >\n                        Share\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <AlertBar\n                show={show}\n                setShow={setShow}\n                message={alertMessage}\n                severity={severity}\n            />\n        </>\n    )\n};\n\nShareModal.propTypes = {\n    openTrigger: PropTypes.bool.isRequired,\n    stateHandler: PropTypes.func.isRequired,\n};\n\nexport default ShareModal;","import React from 'react';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Stack from '@mui/material/Stack';\nimport { format } from 'date-fns'\n\n/**\n * Renders a venues trading hours for\n * the current day or indicates that\n * the venue is closed on the current\n * day\n * \n * @prop hours - the venues trading hours\n */\nconst CardOpeningHours = ({ hours }) => {\n    const today = format(new Date(), \"eeee\");\n    // attempt to match today in hours\n    const todaysHours = hours.find((hour) => hour.day === today)\n    if (todaysHours)\n        return (\n            <Stack direction=\"row\" spacing={0.5}>\n                <Box>\n                    <Typography> \n                        {todaysHours.day} \n                    </Typography>\n                </Box>\n                <Box>\n                    <Typography>\n                        {String(todaysHours.open.hours).padStart(2, '0')}:\n                        {String(todaysHours.open.minutes).padStart(2, '0')} \n                        <> - </> \n                        {String(todaysHours.close.hours).padStart(2, '0')}:\n                        {String(todaysHours.close.minutes).padStart(2, '0')}\n                    </Typography>\n                </Box>\n            </Stack>\n        )\n    else\n        return (\n            <Typography >\n                { today } Closed\n            </Typography>\n        ) \n};\n\n\n\nexport default CardOpeningHours;","import React, { useState } from 'react';\nimport { \n    Label, \n    Card, \n    Image, \n    Icon,\n    Button,\n    Popup\n} from 'semantic-ui-react';\nimport { useHistory } from 'react-router-dom';\nimport { clientUrl } from '../../constants/urls';\nimport PropTypes from 'prop-types';\nimport { \n    cafeLogo, \n    barLogo, \n    restaurantLogo \n} from '../../constants/venueImages';\nimport Typography from '@mui/material/Typography';\nimport PrimaryButton from '../../shared-components/primary-button/PrimaryButton';\nimport ShareModal from './ShareModal';\nimport CardOpeningHours from './CardOpeningHours';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport RemoveCircleIcon from '@mui/icons-material/RemoveCircle';\nimport './index.css';\nimport IconButton from '@mui/material/IconButton';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport Tooltip from '@mui/material/Tooltip';\n\n/**\n * Render a card representing key \n * information about a venue including\n *  - name\n *  - associated tags\n *  - trading hours  \n *  - location/address\n * \n * @prop venue - data about the venue\n * @prop authenticated - user authenticated state\n *  as determined by get self \n */\nconst VenueCard = ({\n    index,\n    removeHandler,\n    addHandler, \n    routePlanner,\n    venue, \n    authenticated,\n    existing\n}) => {\n\n    const history = useHistory();\n    const [ showModal, setShowModal ] = useState(false);\n\n    let venueLogo;\n    switch (venue.venueType) {\n        case \"BAR\":\n            venueLogo = barLogo;\n            break;\n        case \"CAFE\":\n            venueLogo = cafeLogo;\n            break;\n        case \"RESTAURANT\":\n            venueLogo = restaurantLogo;\n            break;\n        default:\n            venueLogo = cafeLogo;\n    }\n\n    // trigger the router to mount venue page\n    const venueMenuRoute = (venueID) => {\n        history.push({\n                pathname: `/menu/${venueID}`,\n                id: venueID,\n        })\n    }\n\n    const handleShare = () => {\n        console.log(`sharing venue ${venue._id}`);\n        setShowModal(true);\n    }\n\n    const copyLink = () => {\n        const link = `${clientUrl}/menu/${venue._id}`;\n        navigator.clipboard.writeText(link);\n    }\n\n    return (\n        <Box sx={{ mb: 2, mt: 2 }} >\n            <Stack direction=\"row\">\n                {routePlanner &&\n                    <Box \n                        sx={{\n                            alignSelf: 'center',\n                        }}\n                    >\n                        <IconButton onClick={() => removeHandler(index)}>\n                            <RemoveCircleIcon />\n                        </IconButton>\n                    </Box>\n                }\n                <Card fluid >\n                    <Card.Content>\n                        <Image\n                            floated='left'\n                            size='tiny'\n                            src={venueLogo}\n                        />\n                        {\n                            authenticated ?\n                            <Button \n                                floated='right'\n                                icon='share' \n                                onClick={handleShare}\n                            />\n                            :\n                            <Popup\n                                content=\"Copy Link!\" \n                                position='top center'\n                                trigger={\n                                    <Button \n                                        floated='right'\n                                        icon='copy'\n                                        onClick={copyLink}   \n                                    />\n                                }\n                            />   \n        \n                        }\n        \n                        <ShareModal\n                            openTrigger={showModal}\n                            stateHandler={setShowModal}\n                            type={'menu'}\n                            shareID={venue._id}\n                            shareName={venue.name}\n                            title='Share Venue'\n                            icon='share'\n                        />\n\n                        <Card.Header>\n                            {venue.name}\n                        </Card.Header>\n                        <Card.Meta>\n                            <CardOpeningHours hours={venue.openingHours.hours} />\n                        </Card.Meta>\n                        <Card.Description>\n                            <Stack spacing={2}>\n                                <Box\n                                    sx={{\n                                        display: 'flex',\n                                        flexDirection: 'row',\n                                        flexWrap: 'wrap',\n                                    }}\n                                >\n                                    {venue.tags && \n                                        venue.tags.map((tags, index) => (\n                                            <Box sx={{ p: 0.2 }}>\n                                                <Label \n                                                    key={index}\n                                                    as='a' \n                                                    image\n                                                    circular\n                                                >\n                                                    {tags.tag.text}\n                                                </Label>\n                                            </Box>\n                                        ))\n                                    }\n                                </Box>\n                                <Box>\n                                    <PrimaryButton \n                                        onClick={() => {venueMenuRoute(venue._id)}}\n                                        content='More Info'\n                                    />\n                                    { (!routePlanner && !existing) &&\n                                        <Tooltip title=\"Add to route plan\" arrow>\n                                            <IconButton\n                                                size=\"large\" \n                                                onClick={() => addHandler(index)}\n                                            >\n                                                <AddCircleIcon fontSize=\"inherit\" />\n                                            </IconButton>\n                                        </Tooltip>\n                                    }\n                                </Box>\n                            </Stack>\n                        </Card.Description>\n                    </Card.Content>\n                    <Card.Content extra>\n                        <a>\n                            <Icon name='location arrow' />\n                            {venue.address}\n                        </a>\n                        <br />\n                        <Typography variant=\"body1\" component=\"a\">\n                            <Icon name='phone' />\n                            {venue.contactNumber}\n                        </Typography>\n                    </Card.Content>\n                </Card>\n            </Stack>\n        </Box>\n    )\n};\n\n\nVenueCard.propTypes = {\n    venue: PropTypes.object.isRequired,\n    authenticated: PropTypes.bool.isRequired\n};\n\nexport default VenueCard;","import React, { useState } from 'react';\nimport Box from '@mui/material/Box';\nimport MuiToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport { styled } from '@mui/material/styles';\n\n// apply custom styles, this is the least\n// intuitive thing ive ever seen\nconst ToggleButton = styled(MuiToggleButton)(({\n    borderRadius: 15,\n    '&.Mui-selected, &.Mui-selected:hover': {\n        color: 'white',\n        backgroundColor: '#177E89',\n    },\n}));\n\n/**\n * Renders a button group with a toggle button \n * for each of the three sidebar views:\n * \n *  + featured\n *  + search results\n *  + route plan\n */\nconst TopMenu = ({ setActivePanel, activePanel }) => {\n\n    const handleChange = (event, newAlignment) => {\n        if (!newAlignment)\n            return;\n\n        setActivePanel(newAlignment);\n    };\n\n    // opt for small toggle group\n    // to support smaller screens\n    return (\n        <Box>\n            <ToggleButtonGroup\n                fullWidth\n                size=\"small\"\n                value={activePanel}\n                exclusive\n                onChange={handleChange}\n            >\n                <ToggleButton value=\"featured\">\n                    Featured\n                </ToggleButton>\n                <ToggleButton value=\"searchResults\">\n                    Search Results\n                </ToggleButton>\n                <ToggleButton value=\"routePlan\">\n                    Route Plan\n                </ToggleButton>\n            </ToggleButtonGroup>\n        </Box>\n    );\n};\n\n\n\nexport default TopMenu;","import React from 'react';\nimport { Dropdown } from 'semantic-ui-react';\nimport PropTypes from 'prop-types'\n\nconst FilterDropdown = ({sortDistance, sortPrice, sortReviews}) => {\n\n\treturn (\n\t\t<Dropdown\n\t\ticon='filter'\n\t\tfloating\n\t\tbutton\n\t\tclassName='icon'\n\t\tcolor='yellow'\n\t\t>\n\t\t\t<Dropdown.Menu>\n\t\t\t\t<Dropdown.Header icon='tags' content='Sort Results' />\n\t\t\t\t<Dropdown.Item \n\t\t\t\t\ticon='dollar' \n\t\t\t\t\ttext='Price ($ - $$)' \n\t\t\t\t\tonClick={(event, { text }) => {\n\t\t\t\t\t\tsortPrice();\n\t\t\t\t\t}}/>\n\t\t\t\t<Dropdown.Item \n\t\t\t\t\ticon='map marker' \n\t\t\t\t\ttext='Distance from me' \n\t\t\t\t\tonClick={(event, { text }) => {\n\t\t\t\t\t\tsortDistance();\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<Dropdown.Item \n\t\t\t\t\ticon='star' \n\t\t\t\t\ttext='By Reviews' \n\t\t\t\t\tonClick={(event, { text }) => {\n\t\t\t\t\t\tsortReviews();\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</Dropdown.Menu>\n\t\t</Dropdown>\n\t);\n}\n\nexport default FilterDropdown;\n\nFilterDropdown.propTypes = {\n\tsortDistance: PropTypes.func,\n    sortReviews: PropTypes.func,\n    sortPrice: PropTypes.func,\n}\n","import { gql } from '@apollo/client';\n\nexport const UPDATE_ROUTE = gql`\n    query EditRoute($venueIDs: [String!]!) {\n    editRoute(venueIDs: $venueIDs) {\n            errors\n            content {\n                venuesInRoute {\n                    _id\n                    name\n                    name\n                    venueType\n                    address\n                    contactNumber\n                    location {\n                        type\n                        coordinates\n                    }\n                    tags {\n                        count\n                        tag {\n                            text\n                        }\n                    }\n                    openingHours {\n                        hours {\n                            day\n                            open {\n                                hours\n                                minutes\n                            }\n                            close {\n                                hours\n                                minutes\n                            }\n                        }\n                    }\n                }                \n\n                routeGeometry\n            }\n        }\n    }\n`;","import { gql } from '@apollo/client';\n\n// save route mutation\nexport const SAVE_ROUTE = gql`\n    mutation GenerateRoute($route: SaveRouteInput!) {\n        saveRoute(route: $route) {\n            content {\n                _id\n                name\n            }\n            errors\n        }\n    }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { SAVE_ROUTE } from '../../gql/routes/saveRoute.gql';\nimport Box  from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Slide from '@mui/material/Slide';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport AlertBar from '../../shared-components/AlertBar';\nimport FormControl from '@mui/material/FormControl';\nimport Backdrop from '@mui/material/Backdrop';\nimport CircularProgress from '@mui/material/CircularProgress';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\n\n/**\n * \n * @param show - boolean to show or\n * hide the modal\n * \n * @param setShow - function to set the\n * show state\n * \n * @param setFinalising - function to set the\n * finalising state\n * \n * @param setRouteID - function to set the\n * routeID state\n * \n * @param setShareRoute - function to set the\n * shareRoute state\n * \n * @param routeVenues - array of venues\n * \n * \n * @todo\n * \n * + set routeGeometry To Null on save \n */\nconst FinaliseModal = ({ \n    show, \n    setShow, \n    setFinalising,\n    setRouteID,\n    setShareRoute,\n    routeVenues,\n    routeName,\n    setRouteName,\n    routeData,\n    clearRoutePlan,\n}) => {\n    // extract _id from each venue in route\n    const routeVenuesIDS = routeVenues.map(venue => venue._id);\n    const handleRouteName = (event) => setRouteName(event.target.value);\n    const [showAlert, setShowAlert ] = useState(false);\n    const [alertMessage, setAlertMessage] = useState('');\n    const [alertSeverity, setAlertSeverity] = useState('');\n    const [saveRoute, {loading, error, data}] = useMutation(\n        SAVE_ROUTE,\n        {\n            onCompleted: (data) => {\n\n                // check for errors\n                if (data.saveRoute.errors) {\n                    setAlertMessage('Failed to save route please try again!');\n                    setAlertSeverity('error');\n                    setShowAlert(true);\n                    setFinalising(false);\n                    return;\n                }\n\n                setRouteID(data.saveRoute.content._id);\n                setAlertMessage('Route Saved!');\n                setAlertSeverity('success');\n                setShowAlert(true);\n\n                // clear route plan\n                clearRoutePlan();\n\n                // display share modal\n                setShareRoute(true);\n                setShow(false);\n                setFinalising(false);\n            }\n        }\n    );\n\n    const handleClose = () => {\n        setShow(false);\n        setFinalising(false);\n    };\n\n     // fire mutation -> alert -> setRouteID\n    const handleSave = () => {\n\n        // tmp hardcode of polyline\n        saveRoute({\n            variables: {\n                route: {\n                    name: routeName,\n                    venuesInRoute: routeVenuesIDS,\n                    routeGeometry: routeData.content.routeGeometry\n                }\n            }\n        })\n    }\n\n    if (loading)\n        return (\n            <Backdrop\n                sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\n                open={loading}\n            >\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n\n    return (\n       <Box>\n            <Dialog\n                open={show}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={handleClose}\n                aria-describedby=\"finalise-dialog\"\n            >\n                <DialogTitle>\n                    Finalise Route\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"finalise-dialog-description\">\n                        <FormControl \n                            variant='standard'  \n                            sx={{\n                                mt: 0.5, \n                                '& > :not(style)': { m: 1, width: '100%' }, \n                                '& .MuiTextField-root': { m: 0.5, width: '32ch' },\n                                width: '100%' \n                            }}\n                        >\n                            <Typography variant=\"subtitle1\">\n                                Name your route\n                            </Typography>\n                            <TextField \n                                id=\"outlined-search\" \n                                required\n                                label=\"Route name\" \n                                type=\"search\" \n                                value={routeName}\n                                onChange={handleRouteName}\n                            />            \n                        </FormControl>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        variant=\"outlined\"\n                        color=\"error\" \n                        onClick={handleClose}\n                    >\n                        Cancel\n                    </Button>\n                    <Button\n                        variant=\"contained\" \n                        color=\"success\"\n                        disabled={routeName.length < 1}\n                        onClick={handleSave}\n                    >\n                        Save\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            <AlertBar \n                show={showAlert}\n                setShow={setShowAlert}\n                message={alertMessage}\n                severity={alertSeverity}\n            />\n       </Box>\n    )\n};\n\n\n\nexport default FinaliseModal;","import React from 'react';\nimport CardSplitter from './CardSplitter';\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport VenueCard from './VenueCard';\nimport Box from '@mui/material/Box';\n\n\n/**\n * \n * @param {*} param0 \n * @returns \n */\nconst RoutePlanner = ({ \n    venues, \n    onDragEnd,\n    handleAdd,\n    handleRemove, \n    authenticated \n}) => {\n    return (\n        <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"venue-list\">\n                {(provided) => (  \n                    <Box\n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                    >\n                        { venues && \n                            venues.length > 0 ? \n                            venues.map((venue, index) => (\n                                <Box key={index}>\n                                    <Draggable draggableId={venue._id} index={index} key={venue._id}>\n                                        {(provided, snapshot) => (\n                                            <Box\n                                                ref={provided.innerRef}\n                                                {...provided.draggableProps}\n                                                {...provided.dragHandleProps}\n                                                snapshot={snapshot}\n                                            >\n                                                <VenueCard\n                                                    index={index}\n                                                    removeHandler={handleRemove}\n                                                    addHandler={handleAdd}\n                                                    routePlanner\n                                                    venue={venue}\n                                                    authenticated={authenticated}\n                                                    snapshot={snapshot}\n                                                    provided={provided}\n                                                />\n                                            </Box>\n                                        )}\n                                    </Draggable>\n\n                                    {/* { activePanel === 'routePlan' &&\n                                        <CardSplitter\n                                            index={index} \n                                            last={index === venueArray.resArray.length - 1} \n                                        />\n                                    } */}\n                                </Box>\n                            )) : null\n                        }\n                        {provided.placeholder}\n                    </Box>\n                )}\n            </Droppable>\n        </DragDropContext>\n    )\n};\n\n\n\nexport default RoutePlanner;","import React, { createRef, useState } from 'react';\nimport { Segment } from 'semantic-ui-react';\nimport { Scrollbars } from 'react-custom-scrollbars-2';\nimport VenueCard from './VenueCard';\nimport TopMenu from './TopMenu';\nimport FilterDropdown from './FilterDropdown';\nimport PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\nimport Tooltip from '@mui/material/Tooltip';\nimport 'semantic-ui-less/semantic.less';\nimport './index.css';\n\n// route plans\nimport { useLazyQuery } from '@apollo/client';\nimport { UPDATE_ROUTE } from '../../gql/routes/updateRoute.gql';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport SendIcon from '@mui/icons-material/Send';\nimport FinaliseModal from './FinaliseModal';\nimport ShareModal from './ShareModal';\nimport RoutePlanner from './RoutePlanner';\n\n/**\n * \n * @param authenticated - whether the user\n * is signed into the platform\n * \n * @param existingRoute - is the user viewing\n * a existing saved route\n * \n * @param setActivePanel -  \n * \n * @returns sidebar for the\n * homepage with a list of venues\n * and a top menu in a scrollable segment\n */\nexport const HomeSidebar = ({\n    authenticated,\n    existingRoute,\n    setActivePanel,\n    activePanel,\n    routePlanner,\n    venueArray, \n    setVenueArray,\n    searchResultVenues,\n    featuredVenues,\n    routeVenues,\n    setRouteVenues,\n    sortDistance, \n    sortPrice, \n    sortReviews,\n    updateRouteGeo,\n    setShowAlert,\n    setAlertSeverity,\n    setAlertMessage,\n    routeData,\n}) => {\n\n    // route plan finalise button handlers\n    const [finalising, setFinalising] = useState(false);\n    const [finaliseModal, setFinaliseModal] = useState(false);\n    const [shareRoute, setShareRoute] = useState(false);\n    const [routeID, setRouteID] = useState('');\n    const [routeName, setRouteName ] = useState('');\n\n    // edit route query\n    const [updateRoute, { loading: updateRouteLoading }] = useLazyQuery(UPDATE_ROUTE, {\n        fetchPolicy: 'network-only',\n        onCompleted: (data) => {\n            console.log('[>>] updateRoute', data.editRoute);\n            updateRouteGeo(null);\n            if (!data.errors)\n                updateRouteGeo(\n                    data.editRoute\n                );\n            else {\n                console.log(\"[>>] edit route failed\", data.errors);\n                setAlertMessage('Try again!');\n                setAlertSeverity('error');\n                setShowAlert(true);\n            }\n        }\n    });\n\n    // handle finalise \n    const handleFinalise = () => {\n        setFinalising(true);\n        // start save and share flow\n        setFinaliseModal(true);\n    }\n\n    const onDragEnd = (result) => {\n        if (!result.destination) return;\n\n        const newCardOrder = Array.from(venueArray.resArray);\n        const [removed] = newCardOrder.splice(result.source.index, 1);\n        newCardOrder.splice(result.destination.index, 0, removed);\n        setVenueArray({ resArray: newCardOrder });\n        updateRouteGeo(\n            {\n                content: {\n                    routeGeometry: \"\",\n                    venuesInRoute: []\n                }\n            }\n        );\n        // update the map view\n        updateRoute({\n            variables: {\n                venueIDs: newCardOrder.map(venue => venue._id)\n            }\n        });\n\n        console.log(\"[>>] post drag\", newCardOrder);\n    }\n\n    // add venue to route plan\n    const handleAdd = (index) => {\n        let updatedVenues;\n        // add venue to route planner from\n        // current list of venues (featured || search)\n        if (activePanel === 'featured') {\n            updatedVenues = [...routeVenues, featuredVenues[index]];\n        }\n        else if (activePanel === 'searchResults') {\n            updatedVenues = [...routeVenues, searchResultVenues[index]];\n        }\n\n        setRouteVenues(updatedVenues);\n\n        // show add alert bar\n        setShowAlert(false); // deal with rapid add\n        setAlertMessage('Venue Added!');\n        setAlertSeverity('success');\n        setShowAlert(true);\n\n        // call update route with routeVenues\n        updateRoute({\n            variables: {\n                venueIDs: updatedVenues.map(venue => venue._id)\n            }\n        });\n\n    }\n\n    // remove route items\n    const handleRemove = (index) => {\n        updateRouteGeo(null);\n        updateRouteGeo(\n            {\n                content: {\n                    routeGeometry: \"\",\n                    venuesInRoute: []\n                }\n            }\n        );\n        const updatedVenues = routeVenues.filter((_, i) => i !== index);\n        // update venues list too\n        setVenueArray({ resArray: updatedVenues });\n        setRouteVenues(updatedVenues);\n        \n        // show remove alert bar\n        setShowAlert(false); // deal with rapid remove\n        setAlertMessage('Venue Removed');\n        setAlertSeverity('info');\n        setShowAlert(true);\n\n        // call update route with routeVenues\n        updateRoute({\n            variables: {\n                venueIDs: updatedVenues.map(venue => venue._id)\n            }\n        });\n    }\n\n\n    // clear route plan helper\n    const clearRoutePlan = () => {\n        setVenueArray({ resArray: [] });\n        setRouteVenues([]);\n        updateRouteGeo(\n            {\n                content: {\n                    routeGeometry: \"\",\n                    venuesInRoute: []\n                }\n            }\n        );\n    }\n      \n\n    return (\n        <Box \n            sx={{ \n                pt: 0, \n                ml: 1, \n                mr: 1.5,\n                minWidth: 265\n            }}\n        >\n            <TopMenu \n                setActivePanel={setActivePanel} \n                activePanel={activePanel}\n            />\n    \n            <Scrollbars\n                autoHide\n                style={{ height: 660, marginTop: '6px' }}\n            >\n                { activePanel === 'searchResults' &&\n                    venueArray.resArray.length > 0 ?  (\n                        <FilterDropdown \n                            sortDistance={sortDistance}\n                            sortPrice={sortPrice}\n                            sortReviews={sortReviews}\n                        />\n                    ) : null\n                }\n\n                <Segment basic >\n                    {(routePlanner && !existingRoute) ? (\n                        <RoutePlanner \n                            venues={venueArray.resArray}\n                            onDragEnd={onDragEnd}\n                            authenticated={authenticated}\n                            existingRoute={existingRoute}\n                            handleAdd={handleAdd}\n                            handleRemove={handleRemove}\n                        />\n                        ) : (\n                            venueArray.resArray.length > 0 &&\n                            venueArray.resArray.map((venue, index) => (\n                                <Box key={index}>\n                                    <VenueCard\n                                        index={index}\n                                        removeHandler={handleRemove}\n                                        addHandler={handleAdd}\n                                        venue={venue}\n                                        authenticated={authenticated}\n                                        existing={existingRoute}\n                                    />\n                                </Box>\n                            ))  \n                        )\n                    }\n                </Segment>\n            </Scrollbars>\n            { (activePanel === 'routePlan' && !existingRoute) &&\n                <Box\n                    sx={{\n                        mt: 2,\n                        display: 'flex',\n                        justifyContent: 'center',\n                    }}\n                >\n                    {authenticated ?\n                        <LoadingButton\n                            disabled={routeVenues.length < 1}\n                            onClick={handleFinalise} \n                            loading={finalising}\n                            loadingPosition=\"end\"\n                            variant=\"contained\" \n                            endIcon={<SendIcon />}\n                        >\n                            Finalise\n                        </LoadingButton>\n\n                        : \n                        \n                        <Tooltip title=\"Login to save routes\" arrow>\n                            <LoadingButton\n                                sx={{ bgcolor: 'text.disabled'}}\n                                loadingPosition=\"end\"\n                                variant=\"contained\" \n                                endIcon={<SendIcon />}\n                            >\n                                Finalise\n                            </LoadingButton> \n                        </Tooltip>\n                    }\n                    <FinaliseModal \n                        show={finaliseModal}\n                        setShow={setFinaliseModal}\n                        setFinalising={setFinalising}\n                        setRouteID={setRouteID}\n                        setShareRoute={setShareRoute}\n                        routeVenues={routeVenues}\n                        routeName={routeName}\n                        setRouteName={setRouteName}\n                        routeData={routeData}\n                        clearRoutePlan={clearRoutePlan}\n                    />\n\n                    <ShareModal \n                        openTrigger={shareRoute}\n                        stateHandler={setShareRoute}\n                        shareID={routeID}\n                        title=\"Share Route\"\n                        type=\"route\"\n                        shareName={routeName}\n                    />\n                </Box>\n            }\n        </Box>\n    )\n}\n\nHomeSidebar.propTypes = {\n\tvenueArray: PropTypes.object,\n    FilterDropdown: PropTypes.object,\n    sortDistance: PropTypes.func,\n    sortReviews: PropTypes.func,\n    sortPrice: PropTypes.func,\n}\n\nexport default HomeSidebar;","import { gql } from '@apollo/client';\n\nexport const GetSelf = gql`\n    query Self {\n        getSelf { \n            userID\n            username\n            userType\n        }\n    }\n`;","export default __webpack_public_path__ + \"static/media/logo.17625113.svg\";","import * as React from \"react\"\nimport { Icon } from 'semantic-ui-react'\nimport PropTypes from 'prop-types';\n\n/**\n * Circular Button component will be the rounded\n * style of the buttons.\n */\nconst CircularBadge = ({ iconName, onClick }) => {\n    return (\n        <button \n            className=\"ui icon button primary\" \n            style={{ borderRadius: 100}} \n            onClick={onClick}\n        >\n            <Icon name={iconName}/>\n        </button>\n    );\n}\n\n\nCircularBadge.propTypes = {\n    iconName: PropTypes.string.isRequired,\n    handleFunction: PropTypes.func,\n};\n\n\n\nexport default CircularBadge;","import * as React from \"react\"\nimport CircularBadge from \"../../shared-components/CircularBadge\";\nimport { useHistory  } from 'react-router-dom';\n\n\n/**\n * @returns LoginBadge sits in\n * navbar to redirect user to \n * Login/page to get \n * athenticated\n * \n */\n\n\nconst LoginBadge = () => {\n    const history = useHistory();\n\n    const goToLoginPage = () => {\n       history.push('/login');\n    }\n  \n    return (\n        <CircularBadge \n            iconName={'sign in alternate'}\n            onClick={goToLoginPage}\n            testReference={'login-button'}\n        />\n    );\n};\n\nexport default LoginBadge;","import * as React from \"react\";\nimport { Button } from 'semantic-ui-react';\nimport 'semantic-ui-less/semantic.less';\nimport { useHistory  } from 'react-router-dom';\n\n/**\n *\n * @returns Business Badge sits in\n * navbar to re-direct to login page \n * with USERTYPE business\n * for authentication.\n * \n */\n\nconst BusinessBadge = () => {\n    const history = useHistory();\n\n    const goToBusinessSignIn = () => {   \n        history.push(\"/register-business\");\n    }\n  \n    return (\n        <Button \n            className='ui button primary'\n            content={\"I'm a business!\"}\n            circular\n            onClick={goToBusinessSignIn}\n        />\n    );\n};\n\nexport default BusinessBadge;","import React from 'react'\nimport { \n    Button, \n    Header, \n    Icon, \n    Modal \n} from 'semantic-ui-react'\nimport PropTypes from 'prop-types';\n/**\n * Displays Modal for logging out\n * \n * @param open  - state to show where logout is open\n * @param setOpen - function to set state\n * @param handleFunction - function call, executes on click\n * @param title - title over \n * @param content - modal content\n * @param buttonContent - button content to approve\n */\nfunction SmallModal( {\n  open, \n  openState, \n  handleFunction, \n  title, \n  content, \n  buttonContent\n}) {\n  \n    return (\n        <Modal\n            closeIcon\n            open={open}\n            onClose={() => openState(false)}\n            onOpen={() => openState(true)}\n            size='mini'\n        >\n            <Header \n                icon='log out' \n                content={title} \n            />\n            <Modal.Content>\n                <p>\n                {content}\n                </p>\n            </Modal.Content>\n            <Modal.Actions>\n                <Button \n                    color='green' \n                    onClick={() => openState(false)}\n                >\n                    <Icon name='remove' /> \n                    Cancel\n                </Button>\n                <Button\n                    data-cy='modal-confirm-button' \n                    color='red' \n                    onClick={handleFunction}\n                >\n                    <Icon name='checkmark' /> \n                    {buttonContent}\n                </Button>\n            </Modal.Actions>\n        </Modal>\n    )\n}\n\nexport default SmallModal;\n\nSmallModal.propTypes = {\n  open: PropTypes.bool,\n  openState: PropTypes.func,\n  handleFunction: PropTypes.func,\n  title: PropTypes.string,\n  content: PropTypes.string,\n  buttonContent: PropTypes.string,\n};\n","import { gql } from '@apollo/client';\n\nexport const LogoutUser = gql`\n    query Query {\n        logout\n    }\n`;\n","import * as React from \"react\"\nimport CircularBadge from \"../../shared-components/CircularBadge\";\nimport SmallModal from \"../SmallModal/SmallModal\";\nimport { LogoutUser } from './logout.gql';\nimport { useLazyQuery } from '@apollo/client';\n\n\nconst LogoutBadge = () => {\n\n    // call the logout query\n    const [ logout ] = useLazyQuery(\n        LogoutUser, \n        {\n            onCompleted: () => {\n                localStorage.clear();\n                // todo sevier the websocket connection\n\n                // I dont like this but otherwise\n                // it gets cached, maybe can\n                // evict from cache here instead\n                window.location = '/login';\n            }\n        }\n    );\n\n\n    const showModal = () => {\n        setOpen(true);\n    }\n\n    const [open, setOpen] = React.useState(false)\n    \n    return (\n        <>\n            <CircularBadge\n                iconName={'sign out alternate'}\n                onClick={showModal} \n            />\n            <SmallModal \n                open={open}\n                openState={setOpen}\n                handleFunction={logout}\n                title={'Logout'}\n                content={'Are you sure you want to logout from your account?'}\n                buttonContent={'Logout'}\n            />\n        </>\n    );\n};\n\nexport default LogoutBadge;\n","import * as React from \"react\"\nimport { Icon } from \"semantic-ui-react\";\nimport { useHistory  } from 'react-router-dom';\n\n\n\n/**\n *\n * @returns Account Badge sits in\n * navbar to redired to \n * user account page.\n * Where they can see their \n * routes and credits\n * \n */\n\n\nconst AccountBadge = () => {\n\n    const history = useHistory();\n\n    const goToAccount = () => {\n        history.push(\"/profile\");\n    }\n\n    return (\n        <button\n            className=\"ui icon button primary\" \n            style={{ borderRadius: 100}} \n            onClick={goToAccount}\n            data-cy='account-badge'\n        >\n            <Icon name=\"user circle outline\"/>\n        </button>\n    );\n};\n\nexport default AccountBadge;","import { gql } from '@apollo/client';\n\nexport const SubNotificationsFeed = gql`\n    subscription NotificationsFeed {\n        feed {\n            recipient\n            message\n            date\n            action\n            senderID\n        }\n    }\n`;\n\n\nexport const GET_USR_NOTIFICATIONS = gql`\n    query GetNotifications {\n        getNotifications {\n            recipient\n            message\n            date\n            action\n        }\n    }    \n`;","import React from 'react';\nimport NotificationsIcon from '@mui/icons-material/Notifications';\nimport IconButton from '@mui/material/IconButton';\nimport Badge from '@mui/material/Badge';\n\n/**\n *\n * @returns Notifition button\n * with active (new) indicator\n * \n * @param onclick - executes command \n * @param active - passed active state\n */\n\nconst buttonStyle = {\n    borderRadius: 100,\n    backgroundColor: '#FFC328',\n    padding: 1.6,\n\n    '&: hover' : {\n        backgroundColor: '#FFC328',\n    }\n}\n\nconst NotificationButton = ({\n    onClick,\n    active\n}) => {\n    return (\n        <IconButton sx={buttonStyle} onClick={onClick}>\n            <Badge variant={active ? \"dot\": \"\"} color=\"error\">\n                <NotificationsIcon sx={{ color: 'text.primary' }}/>\n            </Badge>\n        </IconButton>\n    )\n};\n\n\n\nexport default NotificationButton;","import React from 'react';\nimport { Feed } from 'semantic-ui-react';\nimport { formatDistance } from 'date-fns'\nimport Avatar from '@mui/material/Avatar';\nimport Stack from '@mui/material/Stack';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\n\n\n/**\n *\n * Renders a Notification \n * this populates the users\n * notifications feed\n * \n * @param action - on click action to \n * carry out\n * \n * @param message - displays message\n * \n * @param date - date sent\n */\n\nconst Notification = ({ action, message, date }) => {\n\n    const handelNotificationAction = () => {\n        window.location = action;\n    }\n\n    return (\n        <Feed.Event\n            className=\"feed-item\"\n            // icon=\"location arrow\"\n        >\n            <Feed.Summary>\n                <Feed.Date>\n                    {date && \n                        formatDistance(new Date(date), new Date(), { addSuffix: true }) \n                    }\n                </Feed.Date>\n                <Box\n                    onClick={handelNotificationAction}\n                >\n                    <Stack direction=\"row\" spacing={1}>\n                        <Avatar />\n                        <Typography>\n                            { message }\n                        </Typography>\n                    </Stack>\n                </Box>\n            </Feed.Summary>\n        </Feed.Event> \n    )\n};\n\n\n\nexport default Notification;","import React from 'react';\nimport { Feed } from 'semantic-ui-react';\nimport Notification from './Notification';\nimport { Scrollbars } from 'react-custom-scrollbars-2';\nimport Divider from '@mui/material/Divider';\nimport './notifications.css'\n\n/**\n * \n * @param {*} feed \n * @returns feed component\n * \n * Takes in a notifications feed \n * for the current user and displays\n * them in real time in a list.\n * \n * @todo \n * \n * + Add a way to remove a notification\n * + Fix persistence of notifications\n * + Add unread to alert to navbar\n */\nconst NotificationFeed = ({ feed }) => {\n    console.log(feed);\n    return (\n        <Scrollbars \n            autoHide\n            autoHeight\n            style={{ width: 200 }}\n        > \n            <Feed className='notification-feed'>\n                {\n                    feed.map((notification, index) => (\n                        <>\n                            <Notification \n                                key={index}\n                                date={notification.date}\n                                message={notification.message}\n                                action={notification.action}\n                            />\n                            <Divider />\n                        </>\n                    ))\n                }\n            </Feed>\n        </Scrollbars>\n    )\n};\n\n\n\nexport default NotificationFeed;","import React, { useState } from 'react';\nimport { Popup } from 'semantic-ui-react';\nimport { \n    useSubscription, \n    useQuery \n} from '@apollo/client';\nimport { \n    SubNotificationsFeed, \n    GET_USR_NOTIFICATIONS \n} from '../../gql/self/notifications';\nimport NotificationButton from './NotificationButton';\nimport NotificationFeed from './NotificationFeed';\n\n/**\n * @returns Notifition badge\n * sits in navbar for an authenticated user\n * \n * Calls NotificationFeed and NotificationButton\n * to display\n * \n */\n\n\n\nconst NotificationBadge = () => {\n\n    const [ feed, updateFeed ] = useState([\n        {\n            message: \"No notifications!\",\n            date: '',\n            action: ''\n        }\n    ]);\n\n    const [hasNotifications, setHasNotifications] = useState(false);\n    const { data: subscriptionData, error: subscriptionErr } = useSubscription(\n        SubNotificationsFeed, {\n            variables: {},\n            onSubscriptionData: ({ subscriptionData }) => {\n                if (feed.length > 1) \n                    updateFeed((prevFeed) => [subscriptionData.data.feed, ...prevFeed]);\n                else\n                    updateFeed([subscriptionData.data.feed]); \n\n                setHasNotifications(true);\n            }\n        }\n    );\n    \n    const { \n        data: usrNotifications, \n        loading: loadingUsrNotifications, \n        error: usrNotificationsErr \n    } = useQuery(GET_USR_NOTIFICATIONS,\n        {\n            onCompleted: (data) => {\n                if (data.getNotifications.length > 0)\n                    updateFeed([]);\n                \n                data.getNotifications.map(notification => \n                    updateFeed((prevFeed) => [...prevFeed, notification])\n                );\n            }\n        }\n    );\n\n    \n    if (subscriptionErr)\n        console.log(\"[**] error\", subscriptionErr);\n\n    return (\n        <>\n            <Popup\n                content={\n                    <NotificationFeed feed={feed}/>\n                }\n                trigger= {\n                    <NotificationButton active={hasNotifications}/>\n                }\n                on='click'\n                onOpen={() => { setHasNotifications(false) }}\n                position='bottom center'\n            />\n        </>\n    )\n};\n\n\n\nexport default NotificationBadge;","import React from 'react';\nimport { Icon } from \"semantic-ui-react\";\nimport { useHistory  } from 'react-router-dom';\n\n\n/**\n *\n * @returns Home Badge sits in\n * navbar for only Business\n * accounts. Redirects them\n * to Business dashboard.\n */\n\nconst BusinessHomeBadge = () => {\n    const history = useHistory();\n    const goToHome = () => {\n        history.push(\"/business\");\n    }\n\n\n    return (\n        <button\n            className=\"ui icon button primary\" \n            style={{ borderRadius: 100}} \n            onClick={goToHome}\n        >\n            <Icon name=\"home\"/>\n        </button>\n    )\n};\n\n\n\nexport default BusinessHomeBadge;","import React from 'react';\nimport { Icon } from \"semantic-ui-react\";\nimport { useHistory  } from 'react-router-dom';\n\n/**\n *\n * @returns Map Badge sits in\n * navbar to render /home again\n * Used after when user sees routes\n * \n */\n\n\nconst MapBadge = () => {\n    const history = useHistory();\n    const gotToMap = () => {\n       window.location = '/'; \n    };\n\n    return (\n        <button\n            className=\"ui icon button primary\" \n            style={{ borderRadius: 100}} \n            onClick={gotToMap}\n        >\n            <Icon name=\"map\"/>\n        </button>\n    )\n};\n\n\n\nexport default MapBadge;","import * as React from \"react\"\nimport {\n  Menu,\n} from 'semantic-ui-react'\nimport PropTypes from 'prop-types';\nimport LoginBadge from \"./LoginBadge\"\nimport BusinessBadge from \"./BusinessBadge\";\nimport LogoutBadge from \"../LogoutBadge/LogoutBadge\";\nimport AccountBadge from \"./AccountBadge\";\nimport NotificationBadge from \"../Notifications/NotificationBadge\";\nimport BusinessHomeBadge from \"./BuisnessHomeBadge\";\nimport MapBadge from \"./MapBadge\";\n\nfunction NavBarItems({\n\tcustomer, \n\tbusiness, \n\tadmin, \n\tunauthenticated\n}) {\n\t\n  \tif (customer) {\n\t\treturn (\n\t\t\t<>\n                <Menu.Item>\n                    <MapBadge />\n                </Menu.Item> \n\n                <Menu.Item>\n                    <NotificationBadge />\n                </Menu.Item> \n\n                <Menu.Item>\n                    <AccountBadge />\n                </Menu.Item> \n                \n                <Menu.Item>\n                    <LogoutBadge />\n                </Menu.Item> \n\t\t\t</>\n\t\t);\n  \t}\n\t\n\tif (business) {\n\t\treturn (\n\t\t\t<>\n                <Menu.Item>\n                    <MapBadge />\n                </Menu.Item> \n\n                <Menu.Item>\n                    <NotificationBadge />\n                </Menu.Item> \n\n                <Menu.Item>\n                    <BusinessHomeBadge />\n                </Menu.Item>  \n\n                <Menu.Item>\n                    <AccountBadge />\n                </Menu.Item> \n \n                <Menu.Item>\n                    <LogoutBadge />\n                </Menu.Item>                 \n            </>\n\t\t);\n\t}\n\t\n\tif (admin){\n\t\treturn (\n            <>\n                <Menu.Item>\n                    <LogoutBadge />\n                </Menu.Item> \n            </>\n\t\t);\n\t}\n\n\tif (unauthenticated) {\n\t\treturn (\n\t\t\t<>\n                <Menu.Item>\n                    <MapBadge />\n                </Menu.Item> \n\n\t\t\t\t<Menu.Item >\n\t\t\t\t\t<BusinessBadge />\n\t\t\t\t</Menu.Item>\n                \n\t\t\t\t<Menu.Item>\n\t\t\t\t\t<LoginBadge />\n\t\t\t\t</Menu.Item>\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default NavBarItems;\n\nNavBarItems.propTypes = {\n    customer: PropTypes.bool,\n    business: PropTypes.bool,\n    admin: PropTypes.bool,\n    unauthenticated: PropTypes.bool\n};\n\nNavBarItems.defaultProps = {\n  customer: false,\n  business: false,\n  admin: false,\n  unauthenticated: true,\n};\n","import * as React from \"react\"\nimport {\n  Image,\n  Menu,\n  Loader,\n  Dimmer\n} from 'semantic-ui-react';\nimport { UserTypes } from '../../constants/userTypes';\nimport { GetSelf } from \"../../gql/self/getSelf.gql\";\nimport { useQuery } from \"@apollo/client\";\nimport PropTypes from \"prop-types\";\nimport logo from \"../../assets/img/logo.svg\";\nimport NavBarItems from \"./NavBarItems\";\n\n\nexport const NavBar = ({ setAuthenticated }) => {\n    \n    // I'll do this a better way\n    // one day\n    let customer = false;\n    let business = false;\n    let admin = false;\n\n    /**\n     * here we want to make a self query\n     * to get the user type and other info\n     * \n     * we can then use that info to render the navbar,\n     * apollo cache will help make this speedy\n     */\n    const  { loading, error, data } = useQuery(\n        GetSelf, \n        {\n            // fetchPolicy: 'network-only',\n            // onCompleted: (data) => {\n            //     // console.log(\"[>>] performed refetch\", data);\n            // }\n        },\n    );\n\n    if (loading)\n        return (\n            <Dimmer active>\n                <Loader />\n            </Dimmer>\n        )\n\n    // user not logged in or \n    // something else horrid occurred\n    if (error) {\n        // if we have a state handler\n        // flag now\n        if (setAuthenticated)\n            setAuthenticated(false);\n        \n        // return default Nav\n        return (\n            <div className=\"ui blue inverted menu\" fixed=\"top\">\n                <Image \n                    size={'small'} \n                    src={logo}  \n                    href={'/'}\n                    style={{ marginLeft: '3%' }}\n                />\n                <Menu.Menu position=\"right\"> \n                    <NavBarItems key={1}/>\n                </Menu.Menu>\n            </div>\n        )\n    }\n\n    if (data) {\n        customer = false;\n        business = false;\n        admin = false;\n\n        // if we have a state handler\n        // flag it now\n        if (setAuthenticated)\n            setAuthenticated(true);\n\n        switch(data.getSelf.userType) {\n            case UserTypes.CUSTOMER:\n                customer = true;\n                break;\n            case UserTypes.BUSINESS:\n                business = true;\n                break;\n            case UserTypes.ADMIN:\n                admin = true;\n                break;\n            default:\n                console.log(\"User type not found\");\n                break;\n        }\n    }\n\n    /**\n     * The menu here should probably\n     * be modified in the styles builder\n     * instead of using the text prop\n     * ect. But this works.\n     */\n    return (\n        <div \n            className=\"ui blue inverted menu\" \n            fixed=\"top\"\n        >\n            <Image \n                size={'small'} \n                src={logo}  \n                href={'/'}\n                style={{ marginLeft: '3%' }}\n            />\n            <Menu \n                floated={'right'} \n                borderless \n                text \n                size={'huge'}\n            > \n                <NavBarItems \n                    key={1}\n                    customer={customer}\n                    business={business}\n                    admin={admin}\n                />\n            </Menu>\n        </div>\n    );\n}\n\nNavBar.propTypes = {\n    setAuthenticated: PropTypes.func\n}\n","import { gql } from '@apollo/client';\n\n// return high-level venue information\nexport const SummaryVenueInfo = gql`\nquery Query($venueID: String!) {\n    getVenueInfoByID(venueID: $venueID) {\n      errors\n      venueInformation {\n        _id\n        name\n        venueType\n        address\n        contactNumber\n\n        location {\n            coordinates\n        }\n\n        openingHours {\n          hours {\n            day\n            open {\n              hours\n              minutes\n            }\n            close {\n              hours\n              minutes\n            }\n          }\n        }\n\n        promotion {\n            startDate\n            endDate\n            percentageOff\n            creditsRequired\n        }\n        \n        tags {\n          tag {\n            text\n          }\n          count\n        }\n\n      }\n    }\n  }\n`\n\n// return detailed venue information\n\n\nexport const DetailedVenueInfo = gql`\n    query Query($venueID: String!) {\n    getVenueInfoByID(venueID: $venueID) {\n        venueInformation {\n            _id\n            name\n            venueType\n            averageRating\n            averagePrice\n            uploadValue\n\n            openingHours {\n                hours {\n                    day\n                    open {\n                        minutes\n                        hours\n                    }\n                    close {\n                        hours\n                        minutes\n                    }\n                }\n            }\n\n            menu {\n                name\n                price\n                verified\n                uploader\n                special\n                promotion\n                itemKind {\n                    category\n                    type\n                }\n                specialExpiry {\n                    specialStart\n                    specialEnd\n                }\n                specialHours {\n                    hours {\n                        day\n                        open {\n                            hours\n                            minutes\n                        }\n                        close {\n                            hours\n                            minutes\n                        }\n                    }\n                }\n            }\n\n            promotion {\n                startDate\n                endDate\n                percentageOff\n                creditsRequired\n            }\n            \n            tags {\n                tag {\n                    _id\n                    text\n                }\n                count\n            }\n\n            location {\n                _id\n                type\n                coordinates\n            }\n\n            address\n            postcode\n            contactNumber\n        }\n    }\n}`;\n\n\nexport const GET_FEATURED_VENUES = gql`\n    query GetVenueData {\n        getFeaturedVenues {\n            _id\n            name\n            address\n            venueType\n            contactNumber\n\n            openingHours {\n                hours {\n                    day\n                    open {\n                        minutes\n                        hours\n                    }\n                    close {\n                        hours\n                        minutes\n                    }\n                }\n            }\n\n            location {\n                coordinates\n            }\n\n            tags {\n                tag {\n                    text\n                }\n            }\n        }\n    }\n`;","import React from \"react\";\nimport { \n\tDropdown,\n} from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\n\n/**\n * \n * @returns a drop down bar to set the venueType\n * this component is used in advanced search.\n * \n * @param venueType - state used to set current venueType\n * \n * @param setVenueType - state function used to set setVenueType\n * \n */\n\nconst venueTypeOptions = [\n\t{\n\t\tkey: \"BAR\",\n\t\ttext: \"Bars/Pubs\",\n\t\tvalue: \"BAR\"\n\t},\n\t{\n\t\tkey: \"RESTAURANT\",\n\t\ttext: \"Restaurants\",\n\t\tvalue: \"RESTAURANT\"\n\t},\n\t{\n\t\tkey: \"CAFE\",\n\t\ttext: \"Cafés\",\n\t\tvalue: \"CAFE\"\n\t},\n\t{\n\t\tkey: \"ALL\",\n\t\ttext: \"All\",\n\t\tvalue: \"All\"\n\t}    \n]\n\nconst VenueTypeDropdown = ({venueType, setVenueType}) => {\n    return ( \n\t\t<Dropdown\n\t\t\tplaceholder='Select venue type'\n\t\t\tselection\n\t\t\tfluid\n\t\t\tonChange={(event, { value }) => {\n\t\t\t\tif (value === 'All') {\n\t\t\t\t\tsetVenueType(value);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsetVenueType(value);\n\t\t\t\t}\n\t\t\t}}\n\t\t\tvalue={venueType}\n\t\t\toptions={venueTypeOptions}\n\t\t/> \n\n    );\n};\nexport default VenueTypeDropdown;\n\nVenueTypeDropdown.propTypes = {\n    venueType: PropTypes.string.isRequired,\n    setVenueType: PropTypes.func.isRequired\n}\n","import React from \"react\";\nimport { \n\tIcon,\n\tLabel\n} from 'semantic-ui-react';\nimport PropTypes from 'prop-types'\n\n\n/**\n * \n * @returns a card that renders the item search in \n * labels so the user can see which item they added\n * to the search criteria\n * \n * Also handles removing item from search criteria\n * \n * @param itemSearch - state used to items to search\n * \n * @param setItemSearch - state function used to set items to search\n * \n */\n\nconst MenuItemCard = ({itemSearch, setItemSearch}) => {\n\n\tconst removeItem = index => {\n\t\tsetItemSearch([...itemSearch.filter(card => itemSearch.indexOf(card) !== index)]);\n\t};\n\n    return ( \n\t\t<div>\n\t\t\t{\n\t\t\t\titemSearch.map((tag, index) => (\n\t\t\t\t\t<Label \n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\tas='a' \n\t\t\t\t\t\ticon\n\t\t\t\t\t\tcircular\n\t\t\t\t\t\tcolor='blue'\n\t\t\t\t\t\tstyle={{marginTop: '3%'}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{tag.price ? `$${tag.price}` : ''} {tag.itemName} {tag.itemKind.text}\n\t\t\t\t\t\t<Icon name='close' onClick={() => removeItem(index)}  />\n\t\t\t\t\t</Label>\n\t\t\t\t))\n\t\t\t}\n\t\t</div>\n\n    );\n};\nexport default MenuItemCard;\n\nMenuItemCard.propTypes = {\n    itemSearch: PropTypes.array.isRequired,\n    setItemSearch: PropTypes.func.isRequired\n}","import { gql } from '@apollo/client';\n\nexport const GetAllItemKinds = gql`\n    query GetAllItemKinds {\n        getAllItemKinds {\n            food {\n                _id\n                type\n            }\n            drink {\n                _id\n                type\n            }\n        }\n    }\n`;","import * as React from \"react\"\nimport PropTypes from 'prop-types';\nimport { Dropdown } from \"semantic-ui-react\";\nimport { useQuery } from '@apollo/client';\nimport { GetAllItemKinds } from '../../gql/search/getAllItemKinds.gql';\n\n\n/**\n * \n * @returns a drop down search to look up\n * item kinds. This component is used in \n * search and in route criteria\n * \n * @param itemKind - state used to set current itemKind\n * \n * @param setItemKind - state function used to set itemKind\n * \n */\nconst DropdownKindBar = ({itemKind, setItemKind}) => {\n\n\tfunction renderLabel(label){\n\t\treturn {\n\t\t\tcontent: `${label.type}`,\n\t\t\tclassName: 'yellow'\n\t\t}\n\t}\n\n    const { loading, error, data } = useQuery(GetAllItemKinds);\n\n    let allOptions = [];\n\n    if (data) {\n        let foodTypes = data.getAllItemKinds.food;\n        let drinkTypes = data.getAllItemKinds.drink;\n        allOptions = foodTypes.concat(drinkTypes);\n    }\n\n\tif (!loading) {\n\t\tif (data) {\n\t\t\treturn (\n                <Dropdown\n                    placeholder='Select item kind'\n                    search\n                    selection\n                    clearable\n\t\t\t\t\tfluid\n                    options={allOptions.map(ds => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tkey: ds._id,\n\t\t\t\t\t\t\ttext: ds.type,\n\t\t\t\t\t\t\tvalue: ds._id,\n\t\t\t\t\t\t}\n\t\t\t\t\t})}\n                    onChange={(event, {value}) => {\n\t\t\t\t\t\tlet tagText;\n\t\t\t\t\t\tfor (let option of allOptions) {\n\t\t\t\t\t\t\tif (option._id  === value) {\n\t\t\t\t\t\t\t\ttagText = option.type;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n                        setItemKind({id: value, text: tagText});\n                    }}\n                    renderLabel={renderLabel}\n                    style={{marginTop: '3%'}}\n                    value={itemKind.id}\n                />\n\t\t\t);\n\t\t}\n\t}\n\tif (error) {\n\t\talert('An error occured! Try again');\n\t}\n\telse{\n\t\treturn <></>\n\t}\n}\n\nexport default DropdownKindBar;\n\nDropdownKindBar.propTypes = {\n    itemKind: PropTypes.object,\n    setItemKind: PropTypes.func,\n  };","import {useState} from \"react\";\nimport { \n\tGrid,\n\tCheckbox,\n    Segment,\n    Input,\n} from 'semantic-ui-react';\nimport PrimaryButton from '../../shared-components/primary-button/PrimaryButton';\nimport MenuItemCard from './MenuItemCard';\nimport DropDownKindBar from './DropDownKindBar';\nimport PropTypes from 'prop-types'\n\n/**\n * \n * @returns add menu card. This encompasses\n * adding an item, maximum price and itemKind\n *  \n * @param itemSearch - state array used to for to search items\n * \n * @param setItemSearch - state function used to set search items\n * \n */\n\n\nconst AddMenuCard = ({itemSearch, setItemSearch}) => {\n\n    const [name, setName] = useState('');\n\tconst [price, setPrice] = useState('');\n\tconst [spec, setSpec] = useState(false);\n\tconst [itemKind, setItemKind] = useState({id: '', text: ''});\n\n    const addItem = e => {\n\t\tif (name !== '' || itemKind.id !== '') {\n\t\t\tconst newItem = {};\n\t\t\tif (name !== '') {\n\t\t\t\tnewItem[\"itemName\"] = name;\n\t\t\t}\n\t\t\tif (price !== '') {\n\t\t\t\tlet cost = parseFloat(price);\n\t\t\t\tnewItem[\"price\"] = cost;\n\t\t\t}\n\t\t\tif (spec) {\n\t\t\t\tnewItem[\"isSpecial\"] = true;\n\t\t\t}\n\t\t\tif (itemKind !== '') {\n\t\t\t\tnewItem[\"itemKind\"] = itemKind;\n\t\t\t}\n\t\t\tconsole.log(newItem);\n\t\t\tsetItemSearch([...itemSearch, newItem]);\n\t\t\tsetName('');\n\t\t\tsetPrice('');\n\t\t\tsetSpec(false);\n\t\t\tsetItemKind({id: '', text: ''});\n\t\t}  \n\t}\n\n    return ( \n\t\t<Segment \n            color='blue' \n            // style={{marginTop: '%'}}\n            className='rounded'\n        >\n                <h5>Search for menu items</h5>\n                <Input \n                    placeholder='Enter item name' \n                    value={name}\n                    fluid \n                    onChange={(e) => setName(e.target.value)}>\n                    <input style={{borderRadius: '100px'}} />\n                </Input>\n                <div style={{marginTop: '3%'}}>\n                    <Grid>\n                        <Grid.Column width={10}>\n                            <Input \n                                size='small' \n                                icon='money bill alternate' \n                                placeholder='Maximum price' \n                                fluid\n                                value={price}\n                                onChange={(e) => setPrice(e.target.value)}\n                            />\n                            <DropDownKindBar \n                                itemKind={itemKind}\n                                setItemKind={setItemKind}\n                            />\n                        </Grid.Column>\n                        <Grid.Column width={3}>\n                            <Checkbox\n                                checked={spec}\n                                label='On special'\n                                onChange={(event, { checked }) => {\n                                    setSpec(checked);\n                                }}\n                            />\t\n                        </Grid.Column>\n                    </Grid>\n                </div>\t\n                <div style={{textAlign: 'center', paddingTop: '3%'}}>\n                    <PrimaryButton \n                        onClick={() => {addItem()}}\n                        content='Add item'\n                    />\n                </div>\n                {itemSearch.length !== 0 ? (\n                        <Segment>\n                            <MenuItemCard \n                                itemSearch={itemSearch}\n                                setItemSearch={setItemSearch}\n                            />\n                        </Segment>\n                    ): (null)}\n        </Segment>\n\n    );\n};\nexport default AddMenuCard;\n\nAddMenuCard.propTypes = {\n    itemSearch: PropTypes.array.isRequired,\n    setItemSearch: PropTypes.func.isRequired\n}","import { gql } from '@apollo/client';\n\nconst GetAllTags = gql`\n    query getTagsData {\n            getAllTags {\n                _id\n                text\n        }\n    }\n`;\n\nexport default GetAllTags;","import * as React from \"react\"\nimport PropTypes from 'prop-types';\nimport { Dropdown } from \"semantic-ui-react\";\nimport { useQuery } from '@apollo/client';\nimport GetAllTags from \"../../gql/venueInfo/getAllTags.gql\";\n\n\n/**\n * \n * @returns a dropdown multi select bar used in advanced search and\n * route criteria. \n * \n * @param searchTag - state array used to for to search tags\n * \n * @param setSearchTag - state function used to set search tags\n * \n */\n\nconst DropdownTagBar = ({searchTag, setSearchTag}) => {\n\n\tfunction renderLabel(label){\n\t\treturn {\n\t\t\tcontent: `${label.text}`,\n\t\t\tclassName: 'yellow'\n\t\t}\n\t}   \n\n\tconst { loading, error, data } = useQuery(GetAllTags);\n\tif (!loading) {\n\t\tif (data) {\n\t\t\treturn (\n\t\t\t\t<Dropdown \n\t\t\t\t\ticon='search'\n\t\t\t\t\tplaceholder='Add tags' \n\t\t\t\t\tfluid multiple selection \n\t\t\t\t\tsearch\n\t\t\t\t\toptions={data.getAllTags.map(ds => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tkey: ds._id,\n\t\t\t\t\t\t\ttext: ds.text,\n\t\t\t\t\t\t\tvalue: ds._id,\n\t\t\t\t\t\t\tlabel: { className: 'blue', color:'yellow', empty: true, circular: true }\n\t\t\t\t\t\t}\n\t\t\t\t\t})}\n\t\t\t\t\tonChange={(event, { value }) => {\n\t\t\t\t\t\tsetSearchTag(value);\n\t\t\t\t\t}}\n\t\t\t\t\tvalue={searchTag}\n\t\t\t\t\trenderLabel={renderLabel}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t}\n\tif (error) {\n\t\talert('An error occured! Tags didn\\'t load! Try again');\n\t}\n\telse{\n\t\treturn <></>\n\t}\n}\n\nexport default DropdownTagBar;\n\nDropdownTagBar.propTypes = {\n    searchTag: PropTypes.array,\n    setSearchTag: PropTypes.func,\n  };","import { useCallback } from 'react'\nimport { \n\tGrid, \n\tRating, \n\tRadio, \n\tSegment, \n\tCheckbox,\n} from 'semantic-ui-react';\nimport 'semantic-ui-less/semantic.less';\nimport { Alert } from '@mui/material';\nimport VenueTypeDropdown from './VenueTypeDropdown';\nimport PropTypes from 'prop-types'\nimport Slider from '@mui/material/Slider';\nimport AddMenuCard from './AddMenuCard';\nimport DropdownTagBar from './DropdownTagBar';\nimport { createTheme, ThemeProvider } from '@mui/material/styles/';\nimport './index.css'\n\nconst muiTheme = createTheme({\n\toverrides: {\n\t\tMuiSlider: {\n\t\t  track: { backgroundColor: 'red' },\n\t\t  thumb: { backgroundColor: 'red' },\n\t\t},\n\t}\n});  \n\n\n/**\n * \n * @returns a extensive searchbox with many criterias.\n *  \n * \n * @param venueType - state array used to for to search tags\n * \n * @param setVenueType - state function used to set search tags\n * \n * @param ratingStar - minimum rating value for search\n * \n * @param setRatingStar - set minimum rating value for search\n * \n * @param venueCondition - set venue condition -> open now and promotion\n * \n * @param setVenueCondition - set venue condition for search func\n * \n * @param searchTag - state array used to search tags passed to DropdownTagBar component\n * \n * @param setSearchTag - state function used to set search tags passed to DropdownTagBar component\n * \n * @param setLocation - only called if my location is selected\n * \n * @param setRadiusCallback - using radius call back to set radius\n * \n * @param setSelectingLocation - boolean value to set whether location is being selected from map\n * \n * @param radius - current radius value to render on slider\n * \n * @param locationType - changes between 'current' or 'map' to set location\n * \n * @param setLocationType -  set location type function\n * \n * @param itemSearch - state used to items to search passed to AddItemCard component\n * \n * @param setItemSearch - state function used to set items to search AddItemCard component\n * \n */\n\n\nconst AdvancedSearchBar = ({\n\tvenueType, setVenueType, \n\titemSearch, setItemSearch,\n\tratingStar, setRatingStar,\n\tvenueCondition, setVenueCondition,\n\tsearchTags, setSearchTags,\n\tsetLocation, setRadiusCallback,\n\tsetSelectingLocation, radius,\n\tlocationType, setLocationType\n\t}) => {\n\t\n\tconst onRadiusChange = useCallback(value => {\n\t\tsetRadiusCallback(value)\n    },[]);\n\n\tfunction handleLocationChange(event, {value}) {\n\t\tsetLocationType(value);\n\n\t\tif (value === 'current') {\n\n\t\t\tnavigator.geolocation.getCurrentPosition(\n\t\t\t\tsuccessCallback,\n\t\t\t\tconsole.error,\n\t\t\t\t{ maximumAge: 600_000 }\n\t\t\t  );\n\t\t\t  \n\t\t\t  function successCallback(position) {\n\t\t\t\t// By using the 'maximumAge' member above, the position\n\t\t\t\t// object is guaranteed to be at most 10 minutes old.\n\t\t\t\tlet radFloat = parseFloat(radius * 1000);\n\t\t\t\tsetLocation({\n\t\t\t\t\tsearchCenter: {\n\t\t\t\t\t\tlongitude: position.coords.longitude,\n\t\t\t\t\t\tlatitude: position.coords.latitude,\n\t\t\t\t\t},\n\t\t\t\t\tradius: radFloat,\n\t\t\t\t});\n\t\t\t\tsetSelectingLocation(false);\n\t\t\t}\n\t\t\t  \n\t\t}\n\t\tif (value === 'map') {\n\t\t\tsetSelectingLocation(true);\n\t\t}\n\t}\n\n\treturn (\n\t<Segment className='searchBox'\n\t\tstyle={{ \n\t\t\tborderRadius: '10px !important'\n\t\t}}\n\t>\n\t\t<div\n\t\t\tstyle={{marginTop: '2%'}}\n\t\t>\n\t\t\t<Grid>\n\t\t\t\t<Grid.Column width={8}>\n\t\t\t\t\t<Grid>\n\t\t\t\t\t\t<h5>Set search radius</h5>\n\t\t\t\t\t\t<Grid.Column width={15}>\n\t\t\t\t\t\t<ThemeProvider theme={muiTheme}>\n\t\t\t\t\t\t\t<Slider \t\t\t\t\t\t\n\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\taria-label=\"Small\"\n\t\t\t\t\t\t\t\tvalueLabelDisplay=\"auto\"\n\t\t\t\t\t\t\t\tvalue={radius}\n\t\t\t\t\t\t\t\tmin={1}\n\t\t\t\t\t\t\t\tmax={20}\n\t\t\t\t\t\t\t\tonChange={e => onRadiusChange(e.target.value)}\n\t\t\t\t\t\t\t\tstyle={{marginLeft: '2%'}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t </ThemeProvider>\n\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid.Column>\n\t\t\t\t<Grid.Column width={4} textAlign='center'>\n\t\t\t\t\t<Checkbox \n\t\t\t\t\t\tlabel='Open now' \n\t\t\t\t\t\tchecked={venueCondition.openNow}\n\t\t\t\t\t\tonChange={(event, { checked }) => {\n\t\t\t\t\t\t\tsetVenueCondition({\n\t\t\t\t\t\t\t\topenNow: true,\n\t\t\t\t\t\t\t\tpromotion: venueCondition.promotion,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</Grid.Column>\n\t\t\t\t<Grid.Column width={4} textAlign='center'>\n\t\t\t\t\t<Checkbox \n\t\t\t\t\t\tlabel='Promotion running' \n\t\t\t\t\t\tchecked={venueCondition.promotion}\n\t\t\t\t\t\tonChange={(event, { checked }) => {\n\t\t\t\t\t\t\tsetVenueCondition({\n\t\t\t\t\t\t\t\topenNow: venueCondition.openNow,\n\t\t\t\t\t\t\t\tpromotion: true,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</Grid.Column>\n\t\t\t</Grid>\n\t\t</div>\n\t\t<Grid>\n\t\t\t<Grid.Column width={8}>\n\t\t\t<Segment \n\t\t\t\tbasic={false} \n\t\t\t\tcolor='blue' \n\t\t\t\tclassName='locationClass rounded'\n\t\t\t\t>\n\t\t\t\t<Grid>\n\t\t\t\t\t<Grid.Column width={6}>\n\t\t\t\t\t\t<Radio\n\t\t\t\t\t\t\tlabel='Use current location'\n\t\t\t\t\t\t\tname='radioGroup'\n\t\t\t\t\t\t\tvalue='current'\n\t\t\t\t\t\t\tchecked={locationType === 'current'}\n\t\t\t\t\t\t\tonChange={handleLocationChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t<Grid.Column width={8}>\n\t\t\t\t\t\t<Radio\n\t\t\t\t\t\t\tlabel='Choose location on map'\n\t\t\t\t\t\t\tname='radioGroup'\n\t\t\t\t\t\t\tvalue='map'\n\t\t\t\t\t\t\tchecked={locationType === 'map'}\n\t\t\t\t\t\t\tonChange={handleLocationChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Grid.Column>\n\t\t\t\t</Grid>\t\n\t\t\t\t{locationType === 'map'? (\n                    <Alert severity=\"info\">Double click on desired map location!</Alert>\n                ) : (null)}\n\t\t\t</Segment>\n\t\t\t<Segment \n\t\t\t\tcolor='blue' \n\t\t\t\tclassName='rounded venueClass'\n\t\t\t>\n\t\t\t\t<h5>Set venue type</h5>\n\t\t\t\t<VenueTypeDropdown \n\t\t\t\t\tvenueType={venueType}\n\t\t\t\t\tsetVenueType={setVenueType}\n\t\t\t\t/>\n\t\t\t\t<h5>Set minimum rating</h5>\n\t\t\t\t<Rating\n\t\t\t\t\tonRate={(event, { rating }) => {\n\t\t\t\t\t\tsetRatingStar(rating);\n\t\t\t\t\t}}\n\t\t\t\t\trating={ratingStar}\n\t\t\t\t\tmaxRating={5}\n\t\t\t\t\ticon='star'\n            \t/>\n\t\t\t</Segment>\n\t\t\t\t<Segment \n\t\t\t\t\tcolor='blue'\n\t\t\t\t\tclassName='rounded'\n\t\t\t\t>\n\t\t\t\t\t<h5>Add search tags</h5>\n\t\t\t\t\t<DropdownTagBar \n\t\t\t\t\t\tsearchTag={searchTags}\n\t\t\t\t\t\tsetSearchTag={setSearchTags}\n\t\t\t\t\t/>\n\t\t\t\t</Segment>\n\t\t\t</Grid.Column>\n\t\t\t<Grid.Column width={8}>\n\t\t\t\t<AddMenuCard  \n\t\t\t\t\titemSearch={itemSearch}\n\t\t\t\t\tsetItemSearch={setItemSearch}\n\t\t\t\t/>\n\t\t\t</Grid.Column>\n\t\t</Grid>          \n\t</Segment> \n\t);\n};\n\nexport default AdvancedSearchBar;\n\n\nAdvancedSearchBar.propTypes = {\n\tvenueType: PropTypes.string,\n\tsetVenueType: PropTypes.func,\n    itemSearch: PropTypes.array,\n    setItemSearch: PropTypes.func,\n\tratingStar: PropTypes.number,\n\tsetRatingStar: PropTypes.func,\n\tvenueCondition: PropTypes.object,\n\tsetVenueCondition: PropTypes.func,\n\tsearchTags: PropTypes.array,\n\tsetSearchTag: PropTypes.func,\n\tsetLocation: PropTypes.func,\n\tradius: PropTypes.number,\n\tsetRadiusCallback: PropTypes.func,\n\tsetSelectingLocation: PropTypes.func,\n\tlocationType: PropTypes.string,\n\tsetLocationType: PropTypes.func,\n}\n","import { gql } from '@apollo/client';\n\nexport const GetMyTags = gql`\n    query getMyTags($venueID: String!) {\n        getMyTags(venueID: $venueID) {\n            tag {\n                _id\n            }\n        }\n    }\n`;","import { gql } from '@apollo/client';\n\n\nexport const AddRating = gql`\n    mutation AddReviewMutation($rating: Float!, $venueID: String!) {\n        addReview(rating: $rating, venueID: $venueID)\n    }\n`;","import { gql } from '@apollo/client';\n\nexport const AddTag = gql`\n    mutation AddTag($venueID: String!, $tagID: String!) {\n        addVenueTag(venueID: $venueID, tagID: $tagID) {\n            name\n        }\n    }\n`;","import { gql } from '@apollo/client';\n\nexport const RemoveTag = gql`\n    mutation RemoveTag($venueID: String!, $tagID: String!) {\n        removeVenueTag(venueID: $venueID, tagID: $tagID) {\n            name\n        }\n    }\n`;","import React, { useState } from 'react';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport TextField from '@mui/material/TextField';\nimport TimePicker from '@mui/lab/TimePicker';\n\nconst SpecialHoursForm = ({ \n    sundayTime, setSundayTime,\n    mondayTime, setMondayTime,\n    tuesdayTime, setTuesdayTime,\n    wednesdayTime, setWednesdayTime,\n    thursdayTime, setThursdayTime,\n    fridayTime, setFridayTime,\n    saturdayTime, setSaturdayTime,\n }) => {\n\n    return (\n        <FormControl\n            sx={{\n                '& .MuiTextField-root': { m: 0.5, width: '32ch' },\n                textAlign: 'left'\n            }}\n        >\n\n            <div>\n                <FormControlLabel \n                    control={\n                        <Checkbox \n                            id='Sunday'\n                            onChange={(event) => {\n                                setSundayTime({\n                                    set: event.target.checked,\n                                    from: sundayTime.from,\n                                    to: sundayTime.to\n                                });\n                            }}\n                        />\n                    } \n                    label='Sunday' \n                />\n                <div>\n                    <TimePicker\n                        disabled={!sundayTime.set}\n                        label=\"From\"\n                        value={sundayTime.from}\n                        onChange={(newValue) => {\n                            setSundayTime({\n                                set: sundayTime.set,\n                                from: newValue,\n                                to: sundayTime.to\n                            });\n                        }}\n                        renderInput={(params) => <TextField {...params} />}\n                        minDateTime={new Date()}\n                    />\n                    <TimePicker\n                        disabled={!sundayTime.set}\n                        label=\"To\"\n                        value={sundayTime.to}\n                        onChange={(newValue) => {\n                            setSundayTime({\n                                set: sundayTime.set,\n                                from: sundayTime.from,\n                                to: newValue\n                            });\n                        }}\n                        renderInput={(params) => <TextField {...params} />}\n                        minDateTime={new Date()}\n                    />\n                </div>\n            </div>\n\n\n            <div>\n                <FormControlLabel \n                    control={\n                        <Checkbox \n                            id='Monday'\n                            onChange={(event) => {\n                                setMondayTime({\n                                    set: event.target.checked,\n                                    from: mondayTime.from,\n                                    to: mondayTime.to\n                                });\n                            }}\n                        />\n                    } \n                    label='Monday'\n                />\n                <div>\n                    <TimePicker\n                        disabled={!mondayTime.set}\n                        label=\"From\"\n                        value={mondayTime.from}\n                          onChange={(newValue) => {\n                            setMondayTime({\n                                set: mondayTime.set,\n                                from: newValue,\n                                to: mondayTime.to\n                            })\n                        }}\n                        renderInput={(params) => <TextField {...params} />}\n                        minDateTime={new Date()}\n                    />\n                    <TimePicker\n                        disabled={!mondayTime.set}\n                        label=\"To\"\n                        value={mondayTime.to}\n                        onChange={(newValue) => {\n                            setMondayTime({\n                                set: mondayTime.set,\n                                from: mondayTime.from,\n                                to: newValue\n                            })\n                        }}\n                        renderInput={(params) => <TextField {...params} />}\n                        minDateTime={new Date()}\n                    />\n                </div>\n            </div>\n\n\n            <div>\n                <FormControlLabel \n                    control={\n                        <Checkbox \n                            id='Tuesday'\n                            onChange={(event) => {\n                                setTuesdayTime({\n                                    set: event.target.checked,\n                                    from: tuesdayTime.from,\n                                    to: tuesdayTime.to\n                                });\n                            }}\n                        />\n                    } \n                    label='Tuesday'\n                />\n                <div>\n                    <TimePicker\n                        disabled={!tuesdayTime.set}\n                        label=\"From\"\n                        value={tuesdayTime.from}\n                          onChange={(newValue) => {\n                            setTuesdayTime({\n                                set: tuesdayTime.set,\n                                from: newValue,\n                                to: tuesdayTime.to\n                            })\n            \n                        }}\n                        renderInput={(params) => <TextField {...params} />}\n                        minDateTime={new Date()}\n                    />\n                    <TimePicker\n                        disabled={!tuesdayTime.set}\n                        label=\"To\"\n                        value={tuesdayTime.to}\n                        onChange={(newValue) => {\n                            setTuesdayTime({\n                                set: tuesdayTime.set,\n                                from: tuesdayTime.from,\n                                to: newValue\n                            })\n                          \n                        }}\n                        renderInput={(params) => <TextField {...params} />}\n                        minDateTime={new Date()}\n                    />\n                </div>\n            </div>\n\n            <div>\n                <FormControlLabel \n                    control={\n                        <Checkbox \n                            id='Wednesday'\n                            onChange={(event) => {\n                                setWednesdayTime({\n                                    set: event.target.checked,\n                                    from: wednesdayTime.from,\n                                    to: wednesdayTime.to\n                                });\n                            }}\n                        />\n                    } \n                    label='Wednesday'\n                />\n                <div>\n                    <TimePicker\n                        disabled={!wednesdayTime.set}\n                        label=\"From\"\n                        value={wednesdayTime.from}\n                          onChange={(newValue) => {\n                            setWednesdayTime({\n                                set: wednesdayTime.set,\n                                from: newValue,\n                                to: wednesdayTime.to\n                            })\n                   \n                        }}\n                        renderInput={(params) => <TextField {...params} />}\n                        minDateTime={new Date()}\n                    />\n                    <TimePicker\n                        disabled={!wednesdayTime.set}\n                        label=\"To\"\n                        value={wednesdayTime.to}\n                        onChange={(newValue) => {\n                            setWednesdayTime({\n                                set: wednesdayTime.set,\n                                from: wednesdayTime.from,\n                                to: newValue\n                            })\n  \n                        }}\n                        renderInput={(params) => <TextField {...params} />}\n                        minDateTime={new Date()}\n                    />\n                </div>\n            </div>\n\n\n            <div>\n                <FormControlLabel \n                    control={\n                        <Checkbox \n                            id='Thursday'\n                            onChange={(event) => {\n                                setThursdayTime({\n                                    set: event.target.checked,\n                                    from: thursdayTime.from,\n                                    to: thursdayTime.to\n                                });\n                            }}\n                        />\n                    } \n                    label='Thursday'\n                />\n                <div>\n                    <TimePicker\n                        disabled={!thursdayTime.set}\n                        label=\"From\"\n                        value={thursdayTime.from}\n                          onChange={(newValue) => {\n                            setThursdayTime({\n                                set: thursdayTime.set,\n                                from: newValue,\n                                to: thursdayTime.to\n                            })\n                        }}\n                        renderInput={(params) => <TextField {...params} />}\n                        minDateTime={new Date()}\n                    />\n                    <TimePicker\n                        disabled={!thursdayTime.set}\n                        label=\"To\"\n                        value={thursdayTime.to}\n                        onChange={(newValue) => {\n                            setThursdayTime({\n                                set: thursdayTime.set,\n                                from: thursdayTime.from,\n                                to: newValue\n                            })\n                        }}\n                        renderInput={(params) => <TextField {...params} />}\n                        minDateTime={new Date()}\n                    />\n                </div>\n            </div>\n\n\n            <div>\n                <FormControlLabel \n                    control={\n                        <Checkbox \n                            id='Friday'\n                            onChange={(event) => {\n                                setFridayTime({\n                                    set: event.target.checked,\n                                    from: fridayTime.from,\n                                    to: fridayTime.to\n                                });\n                            }}\n                        />\n                    } \n                    label='Friday'\n                />\n                <div>\n                    <TimePicker\n                        disabled={!fridayTime.set}\n                        label=\"From\"\n                        value={fridayTime.from}\n                          onChange={(newValue) => {\n                            setFridayTime({\n                                set: fridayTime.set,\n                                from: newValue,\n                                to: fridayTime.to\n                            })\n                        }}\n                        renderInput={(params) => <TextField {...params} />}\n                        minDateTime={new Date()}\n                    />\n                    <TimePicker\n                        disabled={!fridayTime.set}\n                        label=\"To\"\n                        value={fridayTime.to}\n                        onChange={(newValue) => {\n                            setFridayTime({\n                                set: fridayTime.set,\n                                from: fridayTime.from,\n                                to: newValue\n                            })\n                        }}\n                        renderInput={(params) => <TextField {...params} />}\n                        minDateTime={new Date()}\n                    />\n                </div>\n            </div>\n\n\n            <div>\n                <FormControlLabel \n                    control={\n                        <Checkbox \n                            id='Saturday'\n                            onChange={(event) => {\n                                setSaturdayTime({\n                                    set: event.target.checked,\n                                    from: saturdayTime.from,\n                                    to: saturdayTime.to\n                                });\n                            }}\n                        />\n                    } \n                    label='Saturday'\n                />\n                <div>\n                    <TimePicker\n                        disabled={!saturdayTime.set}\n                        label=\"From\"\n                        value={saturdayTime.from}\n                          onChange={(newValue) => {\n                            setSaturdayTime({\n                                set: saturdayTime.set,\n                                from: newValue,\n                                to: saturdayTime.to\n                            })\n                        }}\n                        renderInput={(params) => <TextField {...params} />}\n                        minDateTime={new Date()}\n                    />\n                    <TimePicker\n                        disabled={!saturdayTime.set}\n                        label=\"To\"\n                        value={saturdayTime.to}\n                        onChange={(newValue) => {\n                            setSaturdayTime({\n                                set: saturdayTime.set,\n                                from: saturdayTime.from,\n                                to: newValue\n                            })\n                        }}\n                        renderInput={(params) => <TextField {...params} />}\n                        minDateTime={new Date()}\n                    />\n                </div>\n            </div>\n\n        </FormControl>\n    )\n};\n\n\n\nexport default SpecialHoursForm;","import { gql } from '@apollo/client';\n\nexport const MenuItemUpload = gql`\n    mutation MenuItemUpload(\n        $menuItemData: AddMenuItemInput!, \n        $venueID: String!, \n        $file: Upload!\n    ) {\n        menuItemUpload(\n            menuItemData: $menuItemData, \n            venueID: $venueID, \n            file: $file\n        )\n    }\n`;\n\n","import Uppy from '@uppy/core';\n/**\n * Uppy package config\n */\nexport const uppy = new Uppy({\n    meta: { \n        type: 'verification',\n    },\n    restrictions: { \n        maxNumberOfFiles: 1, \n        maxFileSize: 5000000, \n        minNumberOfFiles: 1 \n    },\n    autoProceed: false,\n    formData: true,\n    allowMultipleUploadBatches: true,\n});\n\n\n/***\n * Notes on uppy:\n * \n * - the uppy.upload() method\n * should be triggered by the\n * onClick event of the form\n * button in the higher order\n * component. However this creates\n * issues because the uppy object\n * needs to be given to a higher\n * order component. This is a\n * anti-pattern (most likely).\n * \n * - Probably want to do something\n * with callbacks to a higher order\n * handler \n * \n * - For now the inbuilt upload button\n * is used \n * \n * - can use getFile() to get the file\n * object with the ids from the uppy\n * result object\n * \n * - on complete fires after upload\n * \n * - upload fires twice on upload ??\n * and will fire on any file add \n * unless the autoProceed is set to\n * false\n * \n * the uppy.upload method can be called\n * to fire all of this logic from the\n * form button click event ideally\n */","import React from 'react';\nimport { Dashboard } from '@uppy/react';\nimport '@uppy/core/dist/style.css'\nimport '@uppy/dashboard/dist/style.css'\n\nconst Zone = ({ uppy }) => {\n    return (\n        <Dashboard\n            uppy={uppy}\n            proudlyDisplayPoweredByUppy={false}\n            allowedFileTypes={['application/pdf', 'image/jpeg', 'image/png']}\n            height='33vh'\n            width='100%'\n            hideUploadButton={true}   // use custom trigger\n        />\n    )\n};\n\n\n\nexport default Zone;","import React from 'react';\nimport { uppy } from './uppyConfig';\nimport Zone from './Zone';\n\n\nconst UploadMenuItem = () => {\n    return (\n       <Zone uppy={uppy} />\n    )\n};\n\nexport default UploadMenuItem;","import React, { useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport DateRangePicker from '@mui/lab/DateRangePicker';\nimport TimePicker from '@mui/lab/TimePicker';\n\n\nconst TimedSpecialForm = ({\n    dateValue, setDateValue,\n    fromTime, setFromTime,\n    toTime, setToTime\n}) => {\n\n    return (\n        <>\n            <DateRangePicker\n                disablePast\n                calendars={1}\n                value={dateValue}\n                onChange={(newValue) => {\n                    setDateValue(newValue);\n                }}\n                renderInput={(startProps, endProps) => (\n                    <React.Fragment>\n                    <TextField {...startProps} />\n                    <TextField {...endProps} />\n                    </React.Fragment>\n                )}\n            />\n            <br />\n            <div>\n                <TimePicker\n                    label=\"Available From\"\n                    value={fromTime}\n                    onChange={(newValue) => {\n                        setFromTime(newValue);\n                    }}\n                    renderInput={(params) => <TextField {...params} />}\n                    minDateTime={new Date()}\n                />\n                <TimePicker\n                    label=\"Available To\"\n                    value={toTime}\n                    onChange={(newValue) => {\n                        setToTime(newValue);\n                    }}\n                    renderInput={(params) => <TextField {...params} />}\n                    minDateTime={new Date()}\n                />\n            </div>\n        </>\n    )\n};\n\n\nexport default TimedSpecialForm;","import React, { useState } from 'react';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { Dimmer, Loader } from 'semantic-ui-react';\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport Slide from '@mui/material/Slide'; \nimport Fade from '@mui/material/Fade';\nimport Collapse from '@mui/material/Collapse';\nimport Select from '@mui/material/Select';\nimport DateAdapter from '@date-io/date-fns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport SpecialHoursForm from './SpecialHoursForm';\nimport { MenuItemUpload } from '../../gql/venueInfo/addMenuItem.gql';\nimport { GetAllItemKinds } from '../../gql/search/getAllItemKinds.gql';\nimport UploadMenuItem from '../FileUpload/UploadMenuItem';\nimport { uppy } from '../FileUpload/uppyConfig';\n\n\nimport TimedSpecialForm from './TimedSpecialForm';\nimport 'semantic-ui-less/semantic.less';\nimport AlertBar from '../../shared-components/AlertBar';\nimport { Typography } from '@mui/material';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\n\n\n/**\n * \n * @returns (currently) a modal\n * with a form  to add items\n * to a venues menu. This\n * includes the ability to\n * add specials or promotions? \n */\nconst AddItemForm = ({ open, setOpen, venueID, credits }) => {\n    //   const fullScreen = useMediaQuery(theme.breakpoints.down('md'));\n\n    // on upload success / fail\n    const [show, setShow] = useState(false);\n    const [message, setMessage] = useState('');\n    const [severity, setSeverity] = useState('success');\n\n    const [itemName, setItemName ] = useState('');\n    const [itemPrice, setItemPrice ] = useState(0.0);\n    const [dateValue, setDateValue] = useState([new Date(), new Date()]);\n    const [fromTime, setFromTime] = useState(new Date());\n    const [toTime, setToTime] = useState(new Date());\n    const [ isSpecial, setIsSpecial ] = useState(false);\n    const [ isTimedSpecial, setIsTimedSpecial ] = useState(false);\n    const [ category, setCategory ] = useState('');\n    const [ itemType, setItemType ] = useState('');\n    const [ isRecurring, setIsRecurring ] = useState(false);\n    const [ disableTypeSelect, setDisableTypeSelect ] = useState(true);\n\n    // form invalidators\n    const [itemNameInvalid, setItemNameInvalid] = useState(false);\n    const [itemPriceInvalid, setItemPriceInvalid] = useState(false);\n    const [categoryInvalid, setCategoryInvalid] = useState(false);\n    const [itemTypeInvalid, setItemTypeInvalid] = useState(false); \n\n    const [ sundayTime, setSundayTime ] = useState({\n        set: false, \n        from: new Date(),\n        to: new Date() \n    });\n\n    const [ mondayTime, setMondayTime ] = useState({ \n        set: false, \n        from: new Date(),\n        to: new Date() \n    });\n\n    const [ tuesdayTime, setTuesdayTime ] = useState({ \n        set: false, \n        from: new Date(),\n        to: new Date() \n    });\n\n    const [ wednesdayTime, setWednesdayTime ] = useState({\n        set: false, \n        from: new Date(),\n        to: new Date() \n    });\n\n    const [ thursdayTime, setThursdayTime ] = useState({ \n        set: false,\n        from: new Date(),\n        to: new Date() \n    });\n\n    const [ fridayTime, setFridayTime ] = useState({\n        set: false, \n        from: new Date(),\n        to: new Date() \n    });\n\n    const [ saturdayTime, setSaturdayTime ] = useState({\n        set: false, \n        from: new Date(),\n        to: new Date() \n    });\n\n    const constructSpecialHours = () => {\n        let specialHours = [];\n        if (sundayTime.set) {\n            specialHours.push({\n                day: 'Sunday',\n                open: {\n                    hours: sundayTime.from.getHours(),\n                    minutes: sundayTime.from.getMinutes()\n                },\n                close: {\n                    hours: sundayTime.to.getHours(),\n                    minutes: sundayTime.to.getMinutes()\n                }\n            });\n        }\n        if (mondayTime.set) {\n            specialHours.push({\n                day: 'Monday',\n                open: {\n                    hours: mondayTime.from.getHours(),\n                    minutes: mondayTime.from.getMinutes()\n                },\n                close: {\n                    hours: mondayTime.to.getHours(),\n                    minutes: mondayTime.to.getMinutes()\n                }\n            });\n        }\n        if (tuesdayTime.set) {\n            specialHours.push({\n                day: 'Tuesday',\n                open: {\n                    hours: tuesdayTime.from.getHours(),\n                    minutes: tuesdayTime.from.getMinutes()\n                },\n                close: {\n                    hours: tuesdayTime.to.getHours(),\n                    minutes: tuesdayTime.to.getMinutes()\n                }\n            });\n        }\n        if (wednesdayTime.set) {\n            specialHours.push({\n                day: 'Wednesday',\n                open: {\n                    hours: wednesdayTime.from.getHours(),\n                    minutes: wednesdayTime.from.getMinutes()\n                },\n                close: {\n                    hours: wednesdayTime.to.getHours(),\n                    minutes: wednesdayTime.to.getMinutes()\n                }\n            });\n        }\n        if (thursdayTime.set) {\n            specialHours.push({\n                day: 'Thursday',\n                open: {\n                    hours: thursdayTime.from.getHours(),\n                    minutes: thursdayTime.from.getMinutes()\n                },\n                close: {\n                    hours: thursdayTime.to.getHours(),\n                    minutes: thursdayTime.to.getMinutes()\n                }\n            });\n        }\n        if (fridayTime.set) {\n            specialHours.push({\n                day: 'Friday',\n                open: {\n                    hours: fridayTime.from.getHours(),\n                    minutes: fridayTime.from.getMinutes()\n                },\n                close: {\n                    hours: fridayTime.to.getHours(),\n                    minutes: fridayTime.to.getMinutes()\n                }\n            });\n        }\n        if (saturdayTime.set) {\n            specialHours.push({\n                day: 'Saturday',\n                open: {\n                    hours: saturdayTime.from.getHours(),\n                    minutes: saturdayTime.from.getMinutes()\n                },\n                close: {\n                    hours: saturdayTime.to.getHours(),\n                    minutes: saturdayTime.to.getMinutes()\n                }\n            });\n        }\n        return specialHours;\n    }\n\n\n    const handleClose = () => {\n        setIsSpecial(false);\n        setIsTimedSpecial(false);\n        uppy.reset();\n        setItemName('');\n        setItemPrice(0.0);\n        setDateValue([new Date(), new Date()]);\n        setFromTime(new Date());\n        setToTime(new Date());\n        setIsRecurring(false);\n        setSundayTime({\n            set: false, \n            from: new Date(),\n            to: new Date() \n        });\n        setMondayTime({\n            set: false, \n            from: new Date(),\n            to: new Date() \n        });\n        setTuesdayTime({\n            set: false, \n            from: new Date(),\n            to: new Date() \n        });\n        setWednesdayTime({\n            set: false, \n            from: new Date(),\n            to: new Date() \n        });\n        setThursdayTime({\n            set: false, \n            from: new Date(),\n            to: new Date() \n        });\n        setFridayTime({\n            set: false, \n            from: new Date(),\n            to: new Date() \n        });\n        setSaturdayTime({\n            set: false, \n            from: new Date(),\n            to: new Date() \n        });\n        \n        // restore valid form states\n        setItemNameInvalid(false);\n        setItemPriceInvalid(false);\n        setCategoryInvalid(false);\n        setItemTypeInvalid(false);\n\n        setOpen(false);\n    };\n\n\n    const {loading, error, data} = useQuery(GetAllItemKinds);\n    const [ uploadMenuItem, { loading: uploadLoading } ] = useMutation(MenuItemUpload, {\n        onCompleted: (res) => {\n            if (!res.menuItemUpload) {\n                setMessage('Error uploading menu item, please try again');\n                setSeverity('error');\n                setShow(true);\n            } else {\n                setMessage('Your upload is being verified!');\n                setSeverity('success');\n                setShow(true);\n                handleClose();\n            }\n        }\n    });\n\n    let foodTypes = [];\n    let drinkTypes = [];\n\n    const handleAddItem = () => {\n        // construct special expiry\n        const specialExpiry = isTimedSpecial ? {\n            specialStart: fromTime, \n            specialEnd: toTime\n        } : null;\n        // construct special hours\n        const specialHours = constructSpecialHours(); \n\n\n        if (!itemName || !itemPrice || itemPrice <= 0 || !category || !itemType) {\n            setMessage('Please fill out all fields correctly');\n            setSeverity('error');\n            setShow(true);\n\n            // set applicable error fields\n            if (!itemName) \n                setItemNameInvalid(true);\n            if (!itemPrice) \n                setItemPriceInvalid(true);\n            if (!category)\n                setCategoryInvalid(true);\n            if (!itemType)\n                setItemTypeInvalid(true);\n            return;\n        }\n    \n        uppy.upload().then(() => {\n            uppy.getFiles().forEach(file => {\n                uploadMenuItem({ \n                    variables: {\n                        menuItemData: {\n                            name: itemName,\n                            price: itemPrice,\n                            isSpecial: isSpecial,\n                            itemKind: itemType,\n                            specialExpiry: specialExpiry,\n                            specialHours: {\n                                hours: specialHours\n                            }\n                        },\n                        venueID: venueID,\n                        file: file.data\n                    } \n                })\n            });\n        });\n    }\n\n\n\n    const isSpecialToggle = () => setIsSpecial((isSpecial) => !isSpecial);\n    const isTimedSpecialToggle = () => setIsTimedSpecial((isTimedSpecial) => !isTimedSpecial);\n    const recurringToggle = () => setIsRecurring((isRecurring) => !isRecurring);\n\n    const handleItemName = (event) => {\n        setItemName(event.target.value);\n        setItemNameInvalid(false);\n    }\n    const handleItemPrice = (event) => {\n        setItemPrice(Number(event.target.value));\n        setItemPriceInvalid(false);\n    }\n    const handleCategorySelect = (event) => {\n        setCategory(event.target.value);\n        setDisableTypeSelect(false);\n        setCategoryInvalid(false);\n    }\n    const handleItemTypeSelect = (event) => {\n        setItemType(event.target.value);\n        setItemTypeInvalid(false);\n    }\n\n    const timedSpecialCheckbox = (\n        <FormGroup>\n            <FormControlLabel \n                control={\n                    <Checkbox\n                        onChange={isTimedSpecialToggle}\n                    />\n                } \n                label=\"Limited Availability\"\n            />\n        </FormGroup>\n    )\n\n    if (loading)\n        return (\n            <Dimmer active>\n                <Loader size=\"large\"/>\n            </Dimmer>\n        )\n\n    if (error) {\n        console.log(\"[**] Add Item Form error: \", error);\n        setOpen(false);\n        return null;\n    }\n\n    if (data) { \n        foodTypes = data.getAllItemKinds.food;\n        drinkTypes = data.getAllItemKinds.drink;\n    }\n\n    return (\n      <LocalizationProvider dateAdapter={DateAdapter}>\n        <Dialog \n            open={open} \n            onClose={handleClose}\n            TransitionComponent={Transition}\n            fullWidth\n        >\n            {\n                uploadLoading ?  \n                <Dimmer active>\n                    <Loader size=\"small\"/>\n                </Dimmer>\n                : null \n            }\n            <DialogTitle>Add New Menu Item</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Add a item's details and snap a photo to earn\n                    points!\n                </DialogContentText>\n                    <br />\n                    <Box \n                        noValidate\n                        autoComplete=\"off\"\n                        component=\"form\"\n                    >\n                        <FormControl \n                            variant='standard'  \n                            sx={{ \n                                '& > :not(style)': { m: 1, width: '100%' }, \n                                '& .MuiTextField-root': { m: 0.5, width: '32ch' },\n                                width: '100%' \n                            }}\n                        >\n                        <div>\n                            <TextField \n                                id=\"outlined-search\" \n                                required\n                                label=\"Item name\" \n                                type=\"search\" \n                                error={itemNameInvalid}\n                                value={itemName}\n                                onChange={handleItemName}\n                            />\n                            <TextField\n                                id=\"outlined-number\"\n                                label=\"Price\"\n                                type=\"number\"\n                                required\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                InputProps={{\n                                    startAdornment: <InputAdornment position=\"start\">\n                                                        $\n                                                    </InputAdornment>,\n                                    inputMode: 'numeric', \n                                    pattern: '[1-9]*'\n                                }}\n                                error={itemPriceInvalid || itemPrice < 0}\n                                onChange={handleItemPrice}\n\n                            />\n                        </div>\n                        <div>\n                            <FormControl \n                                sx={{ \n                                    m: 0.5, \n                                    minWidth: 150, \n                                    width: '32ch' \n                                }}\n                                error={categoryInvalid}\n                            >\n                                <InputLabel htmlFor=\"grouped-select\" required>\n                                    Item Category\n                                </InputLabel>\n                                <Select \n                                    defaultValue={null} \n                                    id=\"grouped-select\" \n                                    label=\"Grouping\"\n                                    onChange={handleCategorySelect}\n                                    \n                                >\n                                    <MenuItem value='food'>\n                                        Food\n                                    </MenuItem>\n                                    <MenuItem value='drink'>\n                                        Drink\n                                    </MenuItem>\n                                </Select>\n                            </FormControl>\n\n                            <FormControl \n                                sx={{ \n                                    m: 0.5, \n                                    minWidth: 150, \n                                    width: '32ch' \n                                }} \n                                error={itemTypeInvalid}\n                            >\n                                <InputLabel htmlFor=\"grouped-select\" required>\n                                    Item Type\n                                </InputLabel>\n                                <Select \n                                    disabled={disableTypeSelect}\n                                    defaultValue={null}\n                                    id=\"grouped-select\" \n                                    label=\"Grouping\"\n                                    onChange={handleItemTypeSelect}\n                                >\n                                    {\n                                        category === 'food' ?\n                                        foodTypes.map((foodItem, index) => (\n                                            <MenuItem value={foodItem._id} key={index + 1}>\n                                                {foodItem.type}\n                                            </MenuItem>\n                                        )) :\n                                        drinkTypes.map((drinkItem, index) => (\n                                            <MenuItem value={drinkItem._id} key={index + 1}>\n                                                {drinkItem.type}\n                                            </MenuItem>\n                                        ))\n                                    }\n                                </Select>\n                            </FormControl>\n                        </div>\n                        <FormGroup>\n                            <FormControlLabel \n                                control={\n                                    <Checkbox\n                                        disabled={isTimedSpecial || isRecurring}\n                                        onChange={isSpecialToggle}\n                                    />\n                                } \n                                label=\"On Special\"\n                            />\n                        </FormGroup>\n          \n                        <Fade in={isSpecial}>\n                            {timedSpecialCheckbox}\n                        </Fade>\n                        <Collapse in={isTimedSpecial}>\n                            <FormGroup>\n                                <TimedSpecialForm \n                                    dateValue={dateValue}\n                                    setDateValue={setDateValue}\n                                    fromTime={fromTime}\n                                    setFromTime={setFromTime}\n                                    toTime={toTime}\n                                    setToTime={setToTime}\n                                    isRecurring={isRecurring}\n                                    setIsRecurring={setIsRecurring}\n                                    sundayTime={sundayTime}\n                                    setSundayTime={setSundayTime}\n                                    mondayTime={mondayTime}\n                                    setMondayTime={setMondayTime}\n                                    tuesdayTime={tuesdayTime}\n                                    setTuesdayTime={setTuesdayTime}\n                                    wednesdayTime={wednesdayTime}\n                                    setWednesdayTime={setWednesdayTime}\n                                    thursdayTime={thursdayTime}\n                                    setThursdayTime={setThursdayTime}\n                                    fridayTime={fridayTime}\n                                    setFridayTime={setFridayTime}\n                                    saturdayTime={saturdayTime}\n                                    setSaturdayTime={setSaturdayTime}\n\n                                />\n                            </FormGroup>\n                        </Collapse>\n                        <Collapse in={isSpecial}>\n                            <FormGroup>\n                            <FormControlLabel \n                                control={\n                                    <Checkbox\n                                        onChange={recurringToggle}\n                                    />\n                                } \n                                label=\"Recurring\"\n                                />\n                            </FormGroup>\n                        </Collapse>\n                        <Collapse in={isRecurring}>\n                            <SpecialHoursForm \n                                sundayTime={sundayTime}\n                                setSundayTime={setSundayTime}\n                                mondayTime={mondayTime}\n                                setMondayTime={setMondayTime}\n                                tuesdayTime={tuesdayTime}\n                                setTuesdayTime={setTuesdayTime}\n                                wednesdayTime={wednesdayTime}\n                                setWednesdayTime={setWednesdayTime}\n                                thursdayTime={thursdayTime}\n                                setThursdayTime={setThursdayTime}\n                                fridayTime={fridayTime}\n                                setFridayTime={setFridayTime}\n                                saturdayTime={saturdayTime}\n                                setSaturdayTime={setSaturdayTime}\n                            />\n                        </Collapse>  \n                        \n                        <Typography variant=\"h6\">\n                            Attach a photo of the menu\n                        </Typography>\n                        <UploadMenuItem />\n                    \n                    </FormControl>\n                </Box>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleClose}>Cancel</Button>\n                <Button onClick={handleAddItem}>Add!</Button>\n            </DialogActions>\n        </Dialog>\n        \n        <AlertBar \n            show={show}\n            setShow={setShow}\n            message={message}\n            severity={severity}\n        />\n\n      </LocalizationProvider>\n    )\n};\n\n\n\nexport default AddItemForm;","import React, { useState } from 'react';\nimport { \n    Menu,\n    Button,\n    Popup\n} from 'semantic-ui-react';\nimport Box from '@mui/material/Box';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Slide from '@mui/material/Slide';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\n/**\n * Returns a two buttons one for triggering\n * the menu addition flow and one for representing\n * the prospective credit gain.\n * \n * @prop trigger \n * @prop credit \n * \n */\nconst AddItemGroup = ({ trigger, credits }) => {\n    const [open, setOpen] = useState(false);\n    const showInfoDialog = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n    const isWide = useMediaQuery('(max-width: 981px)');\n\n    return (\n        <Box\n            sx={{\n                flex: '2',\n                mr: '2%'\n            }}\n        >\n            <Menu.Menu className='add-item'> \n                <Menu.Item>\n                    <Popup\n                        content='Credits to earn'\n                        trigger={\n                            <Button\n                                // circular\n                                label={{as: 'p', pointing: 'left', content: `+ ${credits}`}} \n                                floated='right'\n                                icon='trophy'\n                                labelPosition='right'\n                                onClick={showInfoDialog}\n                            />\n                        \n                        } \n                    />\n                </Menu.Item>\n                <Menu.Item>\n                    {isWide ?\n                        <Button\n                            floated='right'\n                            icon='plus'\n                            onClick={trigger}\n                        />\n                        : \n                        <Button \n                            floated='right'\n                            icon='add' \n                            circular\n                            content='Add an Item'\n                            onClick={trigger}\n                        />\n                    }\n \n                </Menu.Item>\n\n            </Menu.Menu>   \n\n\n            <Dialog\n                open={open}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={handleClose}\n            >\n                <DialogTitle>{\"What are Credits?\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"info-modal\">\n                        Earn credits by adding menu items items \n                        to venues on FirstRound. \n\n                        Credits can be used to redeem promotions\n                        which give you discounts at participating \n                        venues.\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button \n                        onClick={handleClose}\n                    >\n                        Sweet!\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Box>\n    )\n};\n\n\n\nexport default AddItemGroup;","import { gql } from '@apollo/client';\n\n\nexport const GET_PROFILE = gql`\n    query GetProfile {\n        getProfile {\n            credits\n            username\n            email\n            joinedDate\n            myRoutes {\n                _id\n                name\n            }\n            sharedRoutes {\n                _id\n                name\n            }\n            activePromotions {\n                _id\n                venue {\n                    name\n                }\n                percentageOff\n                startDate\n                endDate\n            }\n            futurePromotions {\n                venue {\n                    name\n                }\n                percentageOff\n                startDate\n                endDate\n            }\n            expiredPromotions {\n                venue {\n                    name\n                }\n                percentageOff\n                startDate\n                endDate\n            }\n        }\n    }\n`;","import { gql } from \"@apollo/client\";\n\nexport const REDEEM_PROMOTION = gql`\n    mutation RedeemPromotionMutation($venueID: String!) {\n        redeemPromotion(venueID: $venueID) {\n            errors\n            success\n        }\n    }\n`;","import React, { useState } from 'react';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Slide from '@mui/material/Slide';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\nimport Backdrop from '@mui/material/Backdrop';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport AlertBar from '../../shared-components/AlertBar';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { GET_PROFILE } from '../../gql/self/profile.gql';\nimport { REDEEM_PROMOTION } from '../../gql/self/redeemPromotion.gql';\n\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\n/**\n * Shows a form from which\n * the user can redeem a \n * promotion.\n * \n * @param \n * @returns RedeemPromotion \n * \n * @todo\n * \n * + refetch the profile\n *   after successful redemption\n *   to update the balance and\n *   eligibility\n */\nconst RedeemPromotion = ({ \n    open,\n    setOpenRedeem,\n    venueID,\n    creditsRequired,\n    percentageOff,\n    startDate,\n    endDate\n }) => {\n    \n    const [ credits, setCredits ] = useState(0);\n    const [ showAlert, setShowAlert ] = useState(false);\n    const [ alertMessage, setAlertMessage ] = useState('');\n    const [ alertType, setAlertType ] = useState('');\n\n    const { \n        loading: loadingProfile, \n        error: errorProfile, \n        data: profileData,\n        refetch: refetchProfile\n    } = useQuery(GET_PROFILE, {\n        fetchPolicy: 'network-only',\n        onCompleted: (data) => setCredits(data.getProfile.credits)\n    });\n\n    const [ redeemPromotion, { loading: loadingRedeem} ] = useMutation(\n        REDEEM_PROMOTION, \n        {\n            onCompleted: async (data) => {\n                console.log(`[>>] redeem got ${data.redeemPromotion.success}`);\n                if (data.redeemPromotion.success) {\n                    setAlertMessage('Promotion successfully saved to profile');\n                    setAlertType('success');\n                    setShowAlert(true);\n                    refetchProfile(); \n                    setOpenRedeem(false);\n                } else {\n                    setAlertMessage('Redeem failed, please try again!');\n                    setAlertType('error');\n                    setShowAlert(true);\n                }\n            }\n        }\n    );\n\n\n    const handleRedeem = () => {\n        redeemPromotion({ variables: { venueID } });\n        setOpenRedeem(false);\n    }\n\n    if (loadingProfile || loadingRedeem) {\n        return (\n            <Backdrop\n                sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\n                open={loadingProfile}\n            >\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    }\n\n    return (\n        <>\n            <Dialog\n                open={open}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={() => setOpenRedeem(false)}\n            >\n                <DialogTitle>\n                    <Box\n                        sx={{\n                            display: 'flex',\n                            justifyContent: 'space-between',\n                        }}\n                    >\n                        <Typography variant=\"h6\">\n                            Redeem Promotion\n                        </Typography>\n\n                        <Typography variant=\"subtitle1\">\n                            Available {\n                                new Date(startDate).toLocaleDateString()\n                            } - {\n                                new Date(endDate).toLocaleDateString()\n                            }\n                        </Typography>\n                    </Box>\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        <Typography variant=\"body1\">\n                            Earn {percentageOff}% off select \n                            menu items when you redeem this \n                            promotion for {creditsRequired} credits.\n                        </Typography>\n\n                        <Typography variant=\"body1\">\n                            You currently have {credits} credits \n                            {credits >= creditsRequired ? \n                                ` and will have ${credits - creditsRequired} credits remaining\n                                after redeeming` \n                                : ' and cannot redeem the promotion'\n                            }.\n                        </Typography>\n                    </DialogContentText>\n                        <DialogActions>\n                            <Button \n                                onClick={() => setOpenRedeem(false)}\n                                variant=\"contained\"\n                                color=\"error\"\n                            >\n                                Cancel\n                            </Button>\n                            <Button \n                                onClick={handleRedeem}\n                                variant=\"contained\"\n                                color=\"success\"\n                                disabled={credits < creditsRequired}\n                            >\n                                Redeem!\n                            </Button>\n                        </DialogActions>\n                </DialogContent>\n            </Dialog>\n            <AlertBar\n                show={showAlert}\n                setShow={setShowAlert}\n                message={alertMessage}\n                severity={alertType}\n            />\n       </>\n    )\n};\n\n\nexport default RedeemPromotion;","import React, {useState} from 'react';\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport Tooltip from '@mui/material/Tooltip';\nimport CardGiftcardIcon from '@mui/icons-material/CardGiftcard';\nimport RedeemPromotion from './RedeemPromotion';\n\n/**\n * Displays information about\n * a venues promotion and acts\n * as a handler for the redeem\n * promotion dialog.\n * \n * @param authenticated\n * @param promotion\n * \n * @todo \n * \n * + make onclick redirect to login\n * page if user is not logged in\n */\nconst PromotionSection = ({ promotion, venueID }) => {\n\n    const { creditsRequired, endDate, percentageOff, startDate } = promotion;\n\n    const [openRedeem, setOpenRedeem] = useState(false);\n\n    const handleRedeem = () => {\n        console.log('[>>] Redeeming promotion');\n        setOpenRedeem(true);\n    }\n\n    return (\n       <Box sx={{  marginLeft: '5%' }} >\n           <Tooltip\n                arrow \n                title={`Promotion! ${percentageOff}% off selected menu items`}\n            >\n            <Chip \n                    icon={<CardGiftcardIcon />} \n                    label={`${percentageOff}% off`}\n                    onClick={handleRedeem}\n                />\n            </Tooltip>\n\n            <RedeemPromotion \n                open={openRedeem}\n                setOpenRedeem={setOpenRedeem}\n                venueID={venueID}\n                creditsRequired={creditsRequired}\n                endDate={endDate}\n                percentageOff={percentageOff}\n                startDate={startDate}\n            />\n       </Box>\n    )\n};\n\n\n\nexport default PromotionSection;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport './index.css';\n\nconst days = [\n    'Sunday', 'Monday', 'Tuesday', 'Wednesday', \n    'Thursday', 'Friday', 'Saturday'\n];\n\n/**\n * \n * @param openingHours \n * @returns returns a formatted\n * version of trading or available\n * hours to render on menu pages\n * and venue cards. \n */\nconst OpeningHours = ({openingHours, title, special, menuInfo}) => {\n    return (\n        <div className='opening-hours'>\n            {title && <Typography variant='h6'> Opening Hours: </Typography>}\n\n            {\n                days.map((day, index) => {\n                    const trading = openingHours.find(hour => hour.day === day);\n                    \n                    if (trading) {\n                        return (\n                            <Stack \n                                key={index}\n                                direction=\"row\"\n                                alignItems=\"left\"\n                                justifyContent=\"space-between\"\n                                spacing={3}\n                            >\n                                <Box>\n                                    <Typography color=\"text.secondary\"> \n                                        {trading.day} \n                                    </Typography> \n                                </Box>\n                                <Box>\n                                    <Typography color=\"text.secondary\">\n                                        {String(trading.open.hours).padStart(2, '0')}:\n                                        {String(trading.open.minutes).padStart(2, '0')} \n                                        <> - </> \n                                        {String(trading.close.hours).padStart(2,'0')}:\n                                        {String(trading.close.minutes).padStart(2, '0')}\n                                    </Typography>\n                                </Box>\n                            </Stack>\n                        );\n                    } else {\n                        return (\n                            <Stack \n                                key={index}\n                                direction=\"row\"\n                                justifyContent=\"space-between\" \n                            >\n                                <Box sx={{ mr: 2 }}>\n                                    <Typography color=\"text.secondary\">\n                                        {day} \n                                    </Typography>\n                                </Box>\n                                <Box sx={{ mr: 0.3  }} >\n                                    <Typography color=\"text.secondary\">\n                                        {(special || menuInfo) ? 'Closed' : 'Not Available'}\n                                    </Typography>\n                                </Box>\n                            </Stack>\n                        );\n                    } \n                })  \n            }\n        </div>\n    )\n};\n\nOpeningHours.propTypes = {\n    openingHours: PropTypes.array,\n    title: PropTypes.bool\n};\n\nexport default OpeningHours;","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport AddItemForm from './AddItemForm';\nimport { Button } from \"semantic-ui-react\";\nimport 'semantic-ui-less/semantic.less';\nimport './index.css';\nimport Rating from '@mui/material/Rating';\nimport Popover from '@mui/material/Popover';\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport Typography from '@mui/material/Typography';\nimport AddItemGroup from './AddItemGroup';\nimport PromotionSection from './PromotionSection';\nimport OpeningHours from './OpeningHours';\n\n/**\n * \n * @param {*} name\n * @param {*} rating\n * @param {*} price\n *  \n * @returns a banner with the name, \n * rating and price of the venue\n * as well as a button to upload\n * a new item to the venue\n * if authenticated\n * \n * @note the price will need to\n * be formatted to a tag between\n * $ - $$$ \n * \n * @todo change rating to use \n * material ui rating component\n * \n * @todo connect rating stubs\n * to backend\n * \n * @todo add icon + popup for \n * credit gain\n */\nconst Banner = ({ \n    venueID,\n    name, \n    rating, \n    promotion,\n    openingHours,\n    tags,\n    selectedTags,\n    selectTag,\n    canSelect,\n    credits,\n    authenticated,\n    addRating\n}) => {\n    const [openForm, setFormOpen] = useState(false);\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const handleRate = (newRating) => {\n        addRating({\n            variables: {\n                venueID: venueID,\n                rating: newRating\n            }\n        })\n    };\n\n    const renderLabel = (label) => {\n\t\treturn {\n\t\t\tcontent: `${label.text}`,\n\t\t\tclassName: 'yellow'\n\t\t}\n\t};\n\n    const addMenuItem = () => setFormOpen(true);\n    const reviewsOpen = Boolean(anchorEl);\n\n    return (\n        <>\n            {authenticated &&             \n                <AddItemForm \n                    open={openForm} \n                    setOpen={setFormOpen} \n                    venueID={venueID}\n                    credits={credits}\n                />\n            }\n\n            <div className='banner'>\n                <Rating \n                    readOnly={!authenticated}\n                    size='large'\n                    precision={0.5}\n                    maxRating={5} \n                    onChange={(event, value) => handleRate(value)}\n                    defaultValue={rating}\n                />\n                \n                <h1 className='heading'>\n                    {name}\n                </h1>\n\n                <Button\n                    onClick={(event) => {\n                        if (authenticated) setAnchorEl(event.currentTarget);\n                    }}\n                    disabled={!authenticated}\n                >\n                    Add Tags\n                </Button>\n                <Popover\n                    open={reviewsOpen}\n                    anchorEl={anchorEl}\n                    onClose={() => {\n                        setAnchorEl(null);\n                    }}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                    transformOrigin={{\n                        vertical: 'top',\n                        horizontal: 'center',\n                    }}\n                >\n                    <Typography align='center'>\n                        Select tags that represent the vibe\n                    </Typography>\n                    <div container spacing={1} columns={3} className='tags-selector'>\n                        {tags.map(tag => (\n                            <Chip \n                                label={tag.text}\n                                clickable={canSelect}\n                                variant={selectedTags.includes(tag._id) ? 'filled' : 'outlined'}\n                                onClick={() => {\n                                    selectTag(tag._id)\n                                }}\n                                className='tag'\n                            />\n                        ))}\n                    </div>\n                </Popover>\n            </div>\n            <hr className='banner-rule'/>\n\n            <Box \n                sx={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    justifyContent: 'space-between',\n                    flex: '1 200px'\n                }}\n            >\n\n                <OpeningHours \n                    openingHours={openingHours.hours}\n                    title\n                    menuInfo\n                /> \n\n                {authenticated && promotion && <PromotionSection promotion={promotion} venueID={venueID}/>}\n                \n                {authenticated && <AddItemGroup trigger={addMenuItem} credits={credits}/>}                \n            </Box>\n        </>\n    )\n};\n\n\nBanner.propTypes = {\n    venueID: propTypes.string.isRequired,\n    name: propTypes.string.isRequired,\n    rating: propTypes.number.isRequired,\n    price: propTypes.number.isRequired,\n    credits: propTypes.number\n};\n\n\nexport default Banner;","import React from 'react';\nimport { Icon } from 'semantic-ui-react';\nimport 'semantic-ui-less/semantic.less';\nimport './index.css';\n\nconst MenuSection = ({ type }) => {\n\n    let iconName;\n    switch (type) {\n        case 'Specials':\n            iconName = 'tag';\n            break;\n        case 'Food':\n            iconName = 'food';\n            break;\n        case 'Drinks':\n            iconName = 'coffee';\n            break;\n        default:\n            iconName = 'food';\n    }\n\n    return (\n        <>\n            <div className='menu-section'>\n                <h3>\n                    <Icon \n                        name={iconName}\n                        size='large'\n                    />\n                    { type }\n                </h3>\n            </div>\n            <hr className='menu-section-rule' />\n            <br />\n        </>\n    )\n};\n\n\n\nexport default MenuSection;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { \n    Icon,\n    Header,\n    Popup\n } from 'semantic-ui-react';\nimport 'semantic-ui-less/semantic.less';\nimport Typography from '@mui/material/Typography';\nimport Checkbox from '@mui/material/Checkbox';\nimport OpeningHours from './OpeningHours';\nimport Box from '@mui/material/Box';\nimport * as FaIcons from 'react-icons/fa';\nimport * as GiIcons from 'react-icons/gi';\nimport * as MdIcons from 'react-icons/md';\nimport './index.css';\nimport { Stack } from '@mui/material';\n\n// week days\nconst days = [\n    \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \n    \"Thursday\", \"Friday\", \"Saturday\",\n];\n\n// determine if the item is on special\n// now\nconst specialOnNow = (specialHours) => {\n    const now = new Date();\n    const day = days[now.getDay()];\n    const currentHour = now.getHours();\n    const currentMinute = now.getMinutes();\n\n    const isActive = specialHours.find(specialHour => {\n            if (\n                specialHour.day === day && \n                specialHour.close.hours >= currentHour &&\n                specialHour.open.hours <= currentHour \n            ) {\n                // close edge case\n                if (\n                    specialHour.close.hours === currentHour &&\n                    specialHour.close.minutes < currentMinute\n                )\n                    return;\n                \n                // open edge case\n                if (\n                    specialHour.open.hours === currentHour &&\n                    specialHour.open.minutes > currentMinute\n                )\n                    return;\n                \n                else return specialHour;\n            }\n        }\n    );\n\n    return !!isActive;\n}\n\n/**\n * Display a item row including a dynamically chosen \n * icon based on the type and a icon symbolising whether a \n * venue is verified and if the item qualifies for a special \n * and/or a promotion. \n * @param name - item name \n * \n * @param price - item price\n * \n * @param verified - item is verified by business\n * \n * @param type - item type from itemKind\n * \n * @param special - the item is on special\n * \n * @param specialHours - the hours the special is \n *                          optionally valid for\n * \n * @param specialExpiry - the expiry date of the special\n * \n * @param promotion - the item is on promotion\n * \n * @param checkBoxPromo - the state handler for the \n * promotion checkbox\n * \n * @param checkedItems - list of items that are checked\n * \n * @param setCheckedItems - the state handler for the\n * checked items list\n * \n * @param addCheckedItem - the state handler for the\n * checked items list submission\n * \n * @todo \n *\n * + cleanup is active function\n */\nconst Item = ({\n    name,\n    price,\n    verified,\n    type,\n    special,\n    specialHours,\n    specialExpiry,\n    promotion,\n    checkBoxPromo,\n    checkBoxID,\n    checkedItems,\n    setCheckedItems,\n    addCheckedItems\n}) => {\n\n    let isActive;\n    // determine the icon to display\n    if (specialHours)\n        isActive = specialOnNow(specialHours);\n\n    /** \n     * Construct renderable for popup.\n     */\n    const specialTimes = (\n        <Box >\n            {specialHours ?\n                <>\n                    <Typography \n                        variant=\"subtitle1\"\n                        sx={{\n                            ml: 1\n                        }}\n                    >\n                        Available\n                    </Typography>\n                    <Box\n                        sx={{\n                            display: 'flex',\n                            justifyContent: 'space-between',\n                            width: 200\n                        }}\n                    >\n                        <OpeningHours openingHours={specialHours} />\n                    </Box>\n                </>\n                : 'Valid any time'\n            }\n        </Box>\n    );\n\n    const expiryTime = (\n        <>  \n            {specialExpiry ?\n                <>\n                    <Typography variant=\"subtitle1\">Expires</Typography>\n                    <Typography variant=\"body2\">\n                        {new Date(specialExpiry.specialEnd).toLocaleDateString()}\n                    </Typography>\n                </>\n                : null\n            }      \n        </>\n    );\n\n    // display different icon based on\n    // if special is on now\n    const specialHoursIcon = (\n        <>\n            {specialTimes ?\n                <>\n                    {isActive ?\n                        <Popup\n                            position='top center'\n                            content={specialTimes}\n                            trigger={\n                                <Icon name='clock' color='teal' />\n                            } \n                        />\n                        :\n                        <Popup\n                            position='top center'\n                            content={specialTimes}\n                            trigger={\n                                <Icon name='clock'/>\n                            } \n                        />\n                    }\n                </>\n                : null\n            }\n        </>\n    )\n\n    // determine icon to render for type\n    let itemIcon;\n    switch(type) {\n        case 'Burger':\n            itemIcon = <FaIcons.FaHamburger />\n            break;\n        case 'Beer':\n            itemIcon = <Icon name='beer' />\n            break;\n        case 'Asian':\n            itemIcon = <GiIcons.GiNoodles />\n            break;\n        case 'Noodles':\n            itemIcon = <GiIcons.GiFastNoodles />\n            break;\n        case 'Chips':\n            itemIcon = <GiIcons.GiFrenchFries />\n            break;\n        case 'Entree':\n            itemIcon = <GiIcons.GiBerriesBowl />\n            break;\n        case 'Dumplings':\n            itemIcon = <GiIcons.GiDumpling />\n            break;\n        case 'Juice':\n            itemIcon = <GiIcons.GiOrangeSlice />\n            break;\n        case 'Meal':\n            itemIcon = <MdIcons.MdFastfood />\n            break;\n        case 'Soft Drink':\n            itemIcon = <GiIcons.GiSodaCan />\n            break;\n        case 'Espresso martini':\n            itemIcon = <FaIcons.FaGlassMartiniAlt />\n            break;\n        case 'Cocktail':\n            itemIcon = <GiIcons.GiMartini />\n            break;\n        case 'Wine':\n            itemIcon = <GiIcons.GiWineBottle />\n            break;\n        case 'Mixed Spirits':\n            itemIcon = <GiIcons.GiBooze />\n            break;\n        case 'Shots':\n            itemIcon = <GiIcons.GiGlassShot />\n            break;\n        case 'Coffee':\n            itemIcon = <GiIcons.GiCoffeeCup />\n            break;\n        case 'Wrap':                                \n            itemIcon = <GiIcons.GiBread />\n            break;\n        case 'Pie':\n            itemIcon = <GiIcons.GiPieSlice />\n            break;\n        case 'Dessert':\n            itemIcon = <GiIcons.GiCakeSlice />\n            break;\n        case 'Ice Cream':\n            itemIcon = <FaIcons.FaIceCream />\n            break;\n        case 'Sushi':\n            itemIcon = <GiIcons.GiSushis />\n            break;\n        case 'Healthy':\n            itemIcon = <GiIcons.GiFruitBowl />\n            break;\n        case 'Thai':\n            itemIcon = <GiIcons.GiNoodles />\n            break;\n        case 'Pizza':\n            itemIcon = <FaIcons.FaPizzaSlice />\n            break;\n        case 'Breakfast':\n            itemIcon = <GiIcons.GiButterToast />\n            break;\n        case 'Sweets':\n            itemIcon = <GiIcons.GiWrappedSweet />\n            break;\n        case 'Seafood':\n            itemIcon = <GiIcons.GiFriedFish />\n            break;\n        case 'Sandwich':\n            itemIcon = <GiIcons.GiSlicedBread />\n            break;\n        case 'Stir Fry':\n            itemIcon = <GiIcons.GiWok />\n            break;\n        case 'Mexican':\n            itemIcon = <GiIcons.GiTacos />\n            break;\n        case 'Pasta':\n            itemIcon = <GiIcons.GiHotMeal />\n            break;\n        case 'Share Plate':\n            itemIcon = <MdIcons.MdPeople />\n            break;\n        case 'Main':\n            itemIcon = <GiIcons.GiMeal />\n            break;\n        case 'Hot Drink':\n            itemIcon = <GiIcons.GiCoffeeCup />\n            break;\n        case 'Cold Drink':\n            itemIcon = <MdIcons.MdLocalDrink />\n            break;\n        case 'Tea':\n            itemIcon = <GiIcons.GiTeapot />\n            break;\n        case 'Bubble Tea':\n            itemIcon = <GiIcons.GiBoba />\n            break;\n        case 'Milkshake':\n            itemIcon = <MdIcons.MdOutlineCoffeeMaker />\n            break;\n        case 'Smoothie':\n            itemIcon = <MdIcons.MdOutlineCoffeeMaker />\n            break;\n        case 'Energy Drink':\n            itemIcon = <GiIcons.GiBottledBolt />\n            break;\n        case 'Water':\n            itemIcon = <MdIcons.MdOutlineLocalDrink />\n            break;\n        case 'Milk':\n            itemIcon = <GiIcons.GiMilkCarton />\n            break;\n        default:\n            itemIcon = <MdIcons.MdMenuBook />\n    }   \n\n    \n    return (\n        <>\n            <Stack\n                direction=\"row\"\n                alignItems=\"left\"\n                justifyContent=\"space-between\"\n                marginBottom={2} \n            >\n                <Box>\n                    <Typography variant='h6'>\n                        { checkBoxPromo && (\n                                <Checkbox \n                                    onChange={(event, { checked }) => {\n                                        addCheckedItems(event.target.checked, checkBoxID);\n                                    }}\n                                />\n                            )\n                        }\n                        <>\n                            { itemIcon }\n                            { verified && <Icon name='check' size='tiny' corner='bottom right'/> } \n                        </>\n                        <> { name } </>\n                    </Typography>\n                </Box>\n                <Box\n                    sx={{\n                        mr: '10%'\n                    }}\n                >\n                    <Typography variant='h6'>\n                        { promotion && \n                            <Popup\n                                position=\"top center\"\n                                content=\"Qualifies for Promotion\"\n                                trigger={\n                                    <Icon name='gift' />\n                                }\n                            />\n                        }\n                        { special && \n                            specialHoursIcon\n                        }\n                        { specialExpiry &&\n                            <Popup\n                                position='top center'\n                                content={expiryTime}\n                                trigger={\n                                    <Icon name='hourglass end'/>\n                                }\n                            />\n                        }\n\n                        { price }\n                    \n                    </Typography>\n                </Box>\n            </Stack>\n            {/* <br /> */}\n        </>\n    )\n};\n\n\nItem.propTypes = {\n    name: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired,\n    verified: PropTypes.bool,\n    type: PropTypes.string,\n    special: PropTypes.string,\n    specialHours: PropTypes.object,\n    promotion: PropTypes.bool,\n    checkBoxPromo: PropTypes.bool,\n    checkBoxID: PropTypes.string,\n    checkedItems: PropTypes.array,\n    setCheckedItems: PropTypes.func,\n    addCheckedItems: PropTypes.func\n}\n\nexport default Item;","import React, { useState } from 'react';\nimport { \n    Dimmer, \n    Menu, \n    Loader, \n    Button, \n} from 'semantic-ui-react';\nimport { useParams } from 'react-router';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { useHistory } from 'react-router';\nimport { DetailedVenueInfo } from '../../gql/venueInfo/venueInfo.gql';\nimport { GetMyTags } from \"../../gql/venueInfo/getMyTags.gql\";\nimport GetAllTags from \"../../gql/venueInfo/getAllTags.gql\";\nimport { GetSelf } from '../../gql/self/getSelf.gql';\nimport { AddRating } from '../../gql/venueInfo/addRating.gql';\nimport { AddTag } from '../../gql/venueInfo/addTag.gql';\nimport { RemoveTag } from '../../gql/venueInfo/removeTag.gql';\nimport { Scrollbars } from 'react-custom-scrollbars-2';\nimport Banner from './Banner';\nimport 'semantic-ui-less/semantic.less';\nimport '../../styles/panes.css';\nimport MenuSection from './MenuSection';\nimport Item from './Item';\nimport AlertBar from '../../shared-components/AlertBar';\nimport Box from '@mui/material/Box';\n\n\n/**\n * Creates a menu pane for a venue\n * dictated by the id pulled from the\n * URI parameter\n *  \n */\nconst MenuPane = () => {\n\n    // grab the id from router\n    const { venueID } = useParams();\n    const history = useHistory();\n\n    const [selectedTags, setSelectedTags] = useState([]);\n    const [canSelect, setCanSelect] = useState(true);\n\n    // setup alert bar state\n    const [show, setShow] = useState(false);\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const [severity, setSeverity] = useState(\"\");\n\n\n    let authenticated = true;\n    const { loading: selfLoading, error: selfErrors } = useQuery(GetSelf);\n\tconst {\n        loading: loadingVenue, \n        error: errorsVenue, \n        data: dataVenue,\n        refetch: refetchVenueInfo\n    } = useQuery(DetailedVenueInfo, {\n        fetchPolicy: \"network-only\",\n        notifyOnNetworkStatusChange: true,\n\t\tvariables: { \n\t\t\tvenueID \n\t\t},\n\t});\n    const allTagsResults = useQuery(GetAllTags);\n    const getMyTags = useQuery(GetMyTags, {\n        variables: {\n            venueID\n        },\n        onCompleted: (data) => {\n            setSelectedTags(data.getMyTags.map(datum => datum.tag._id));\n        },\n        fetchPolicy: \"network-only\"\n    });\n    const [ addRating ] = useMutation(AddRating, {\n        onCompleted: (data) => {\n            refetchVenueInfo();\n            setAlertMessage(\"Rating added!\");\n            setSeverity(\"success\");\n            setShow(true);\n        }\n    });  \n      \n    const [ addTag ] = useMutation(AddTag, {\n        onCompleted: (data) => {\n            setCanSelect(true);\n            // notify user that tag was added\n            setAlertMessage('Tag added!');\n            setSeverity('success');\n            setShow(true);\n        }\n    });\n    const [ removeTag ] = useMutation(RemoveTag, {\n        onCompleted: (data) => {\n            setCanSelect(true);\n            // notify user that tag was removed\n            setAlertMessage('Tag removed!');\n            setSeverity('info');\n            setShow(true);\n        }\n    });\n\n\n    const backToMap = () => {\n        history.push('/');\n    };\n\n    const selectTag = (tagID) => {\n        if (!canSelect) return;\n\n        setCanSelect(false);\n        if (selectedTags.includes(tagID)) {\n            setSelectedTags(selectedTags.filter(tag => tag !== tagID));\n            removeTag({\n                variables: {\n                    venueID,\n                    tagID\n                }\n            });\n        } else {\n            setSelectedTags([...selectedTags, tagID]);\n            addTag({\n                variables: {\n                    venueID,\n                    tagID\n                }\n            });\n        }\n    };\n\n\tif (loadingVenue || selfLoading) {\n\t\treturn (\n\t\t\t<Dimmer active>\n\t\t\t\t<Loader />\n\t\t\t</Dimmer>\n\t\t)\n\t}\n    \n    if (selfErrors) \n        authenticated = false;\n\n\tif (errorsVenue) {\n\t\tconsole.log(\"[**] Menu pane\", errorsVenue);\n        return (\n            <div className='home-primary-pane menu-pane'>  \n                <h1 align=\"center\">\n                    Menu Unavailable\n                </h1>\n            </div>\n        )\n\t}\n\n\tlet propData;\n    let specials = [];\n    let food = [];\n    let drinks = [];\n    // pre-process data\n\tif (dataVenue && dataVenue.getVenueInfoByID.venueInformation !== null) {\n\t\tpropData = dataVenue;\n        console.log(\"[>>] Menu pane data\", propData);\n\n        dataVenue.getVenueInfoByID.venueInformation.menu.map(menuItem => {\n            if (menuItem.special !== 'FALSE') \n                specials.push(menuItem);\n            else\n                switch (menuItem.itemKind.category) {\n                    case 'FOOD':\n                        food.push(menuItem);\n                        break;\n                    case 'DRINK':\n                        drinks.push(menuItem);\n                        break;\n                    default:\n                        food.push(menuItem);\n                }\n        });\n\t}  else {\n        // router tries to cache or sth\n        window.location = '/';\n    }\n    \n    let tags = [];\n    if (allTagsResults.loading || allTagsResults.error) {\n        tags = [];\n    } else {\n        tags = allTagsResults.data.getAllTags;\n    }\n    \n\n    return (\n        <div className='home-primary-pane menu-pane'>  \n            <div className=\"ui secondary menu\">\n                <Menu.Menu \n                    position='left' \n                    style={{ \n                        marginTop: '10px', \n                    }}\n                >\n                    <Menu.Item >\n                        <Button \n                            icon='map' \n                            circular \n                            content='Back To Map'\n                            onClick={backToMap}\n                        /> \n                    </Menu.Item>\n                </Menu.Menu>\n            </div>\n            <Banner\n                venueID={venueID} \n                name={propData.getVenueInfoByID.venueInformation.name}\n                rating={propData.getVenueInfoByID.venueInformation.averageRating}\n                promotion={propData.getVenueInfoByID.venueInformation.promotion}\n                openingHours={propData.getVenueInfoByID.venueInformation.openingHours}\n                tags={tags}\n                selectedTags={selectedTags}\n                selectTag={selectTag}\n                canSelect={canSelect}\n                credits={propData.getVenueInfoByID.venueInformation.uploadValue}\n                authenticated={authenticated}\n                addRating={addRating}\n            />\n \n            <Scrollbars\n                autoHide\n                style={{ height: 220, float: 'left' }}\n\n            >\n                { specials.length > 0 && <MenuSection type='Specials'/> }\n                { specials.length > 0 &&\n                    <Box \n                        sx={{\n                            ml: '10%'\n                        }}\n                    >\n                        {\n                            specials.map((menuItem, index) => (   \n                                <Item \n                                    key={index}\n                                    name={menuItem.name}\n                                    price={menuItem.price}\n                                    type={menuItem.itemKind.type}\n                                    special={menuItem.special}\n                                    verified={menuItem.verified}\n                                    specialHours={menuItem.specialHours.hours}\n                                    specialExpiry={menuItem.specialExpiry}\n                                />\n                            ))\n                        }               \n                    </Box>\n                }\n                { food.length > 0 && <MenuSection type='Food' /> }\n                { food.length > 0 &&\n                    <Box \n                        sx={{\n                            ml: '10%'\n                        }}\n                    >\n                        {\n                            food.map((menuItem, index) => (\n                                <Item \n                                    key={index}\n                                    name={menuItem.name}\n                                    price={menuItem.price}\n                                    type={menuItem.itemKind.type}\n                                    verified={menuItem.verified}\n                                    promotion={menuItem.promotion}\n                                    special={false}\n                                />\n                            ))\n                        }   \n                    </Box>\n                }\n                { drinks.length > 0 && <MenuSection type='Drinks'/> }\n                { drinks.length > 0 &&\n                    <Box \n                        sx={{\n                            ml: '10%'\n                        }}\n                    >\n                        {\n                            drinks.map((menuItem, index) => (\n                                <Item \n                                    key={index}\n                                    name={menuItem.name}\n                                    price={menuItem.price}\n                                    type={menuItem.itemKind.type}\n                                    verified={menuItem.verified}\n                                    promotion={menuItem.promotion}\n                                    special={false}\n                                />\n                            ))\n                        }\n                    </Box>\n                }\n\n                <AlertBar \n                    message={alertMessage}\n                    severity={severity}\n                    show={show}\n                    setShow={setShow}\n                />\n            \n            </Scrollbars>\n        </div>\n    )\n};\n\n\nexport default MenuPane;","import React from 'react'\nimport Typography from '@mui/material/Typography';\nimport 'semantic-ui-less/semantic.less';\nimport PropTypes from 'prop-types'\nimport '../AdvancedSearchBar/index.css'\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\n\n/**\n * \n * @returns a header to the Route criteria segment\n *  \n * \n * @param content - Displays a title to the segment\n * \n * @param cancel - Fucntion to reset all states\n *  \n */\n\n\n\nconst Header = ({\n    content, cancel, \n    }) => {\n\t\n\treturn (\n\t\t<Stack direction=\"row\" style={{textAlign: 'right', marginTop: '2%'}} spacing={2}>\n\t\t\t<Typography variant=\"h6\" gutterBottom component=\"div\">\n\t\t\t\t{content}\n\t\t\t</Typography>\n\t\t\t\t<Button variant=\"contained\" startIcon={<CancelIcon />} onClick={e => cancel(e)}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tborderRadius: 15,\n\t\t\t\t\t\tbackgroundColor: \"#377f89\",\n\t\t\t\t\t\tcolor: 'white',\n\t\t\t\t\t\tmarginLeft: 'auto'\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tCancel\n\t\t\t</Button>\n\t\t</Stack>\n    );\n};\n\nexport default Header;\n\n\nHeader.propTypes = {\n    content: PropTypes.string,\n    cancel: PropTypes.func,\n}","import { useState, useCallback } from 'react'\nimport { \n\tGrid,  \n\tSegment, \n} from 'semantic-ui-react';\nimport Header from './Header';\nimport Radio from '@mui/material/Radio';\nimport Typography from '@mui/material/Typography';\nimport Slider from '@mui/material/Slider';\nimport 'semantic-ui-less/semantic.less';\nimport { Alert } from '@mui/material';\nimport PropTypes from 'prop-types'\nimport '../AdvancedSearchBar/index.css'\nimport { RadioGroup } from '@mui/material';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Button from '@mui/material/Button';\nimport ArrowForward from '@mui/icons-material/ArrowForward';\nimport Stack from '@mui/material/Stack';\nimport center from '@turf/center'\n\n/**\n * \n * @returns a extensive time criteria with validation\n *  \n * \n * @param back - back function used to go to previous form state\n * \n * @param next - function used to go to next form state\n * \n * @param cancel - clear function used passed to Header\n * \n * @param location - route coordinates, validation to check map is selected\n * \n * @param radius - radius value for slider\n * \n * @param setRadiusCallback - set radius callback function\n * \n * @param setSelRouteLocation - boolean value to see if clicking location on map\n * \n * @param routeLocationType - state location map or selectVenue\n * \n * @param setRouteLocationType - state function used to set routeLocationType\n * \n * @param setCalcCenter - state function to set calculated center for selected venues\n * \n * @param setVenueReq - set bool so check if selected venues is used\n * \n * @param routeVenues - state array that holds all selected venues\n * \n */\n\n\nconst LocationCriteria = ({\n\tnext, \n\tlocation, setRadiusCallback,\n\tsetSelRouteLocation, radius,\n\tcancel, routeVenues,\n\tsetVenueReq, \n\trouteLocationType, setRouteLocationType,\n\tsetCalcCenter\n\t}) => {\n\n\tconst [showMap, setShowMap] = useState(routeLocationType === 'map');\n\tconst [showSelected, setShowSelected] = useState(routeLocationType === 'selected venues');\n\tconst [errorOccured, setErrorOccured] = useState(false);\n\tconst [locationError, setLocationError] = useState(false);\n\n\tfunction handleNext(e) {\n\t\t\n\t\tif (showSelected) {\n\t\t\tif(routeVenues.length === 0) {\n\t\t\t\tsetErrorOccured(true);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnext(e);\n\t\t\t}\n\t\t}\n\t\tif (!showSelected) {\n\n\t\t\tsetErrorOccured(false)\n\t\t\t// error check for location\n\t\t\tif (location.routeCenter.longitude === '' && location.routeCenter.longitude === '') {\n\t\t\t\tsetLocationError(true);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsetLocationError(false);\n\t\t\t\tnext(e);\n\t\t\t}\n\t\t}\n\t}\n\n\t\n\tconst onRadiusChange = useCallback(e => {\n\t\tsetRadiusCallback(e.target.value)\n    },[]);\n\n\t\n\n\tfunction handleLocationChange(event) {\n\t\tsetRouteLocationType(event.target.value);\n\n\t\tif (event.target.value === 'selected venues') {\n\t\t\tsetShowMap(false);\n\t\t\tsetShowSelected(true);\n\t\t\tsetSelRouteLocation(false);\n\t\t\tsetLocationError(false);\n\t\t\t\n\t\t\tif (routeVenues.length !== 0){\n\t\t\t\tlet centre = center(\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\" : \"FeatureCollection\",\n\t\t\t\t\t\t\"features\" : routeVenues.map(venue => (\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"type\" : \"Feature\",\n\t\t\t\t\t\t\t\"properties\" : null,\n\t\t\t\t\t\t\t\"geometry\" : {\n\t\t\t\t\t\t\t\t\"type\" : \"Point\",\n\t\t\t\t\t\t\t\t\"coordinates\" : venue.location.coordinates\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t))\n\t\t\t\t\t}\n\t\t\t\t).geometry.coordinates;\n\n\t\t\t\tsetVenueReq(true);\n\t\t\t\tsetErrorOccured(false);\n\t\t\t\tsetCalcCenter({\n\t\t\t\t\tlongitude: centre[0],\n\t\t\t\t\tlatitude: centre[1],\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tsetErrorOccured(true);\n\t\t\t\tsetRouteLocationType('');\n\t\t\t\tsetShowSelected(false);\n\t\t\t}\n\t\t}\n\t\tif (event.target.value === 'map') {\n\t\t\tsetSelRouteLocation(true);\n\t\t\tsetShowMap(true);\n\t\t\tsetShowSelected(false);\n\t\t\tsetVenueReq(false);\n\t\t\tsetErrorOccured(false)\n\t\t}\n\t}\n\n\treturn (\n\t\t<div>\n\t\t<Header  \n\t\t\tcontent='Location Criteria'\n\t\t\tcancel={cancel}\n\t\t/>\n\t\t<Segment \n\t\t\tbasic={false} \n\t\t\tcolor='blue'\n\t\t\tstyle={{\n\t\t\t\tmargin: '3%', \n\t\t\t\tpaddingLeft: '1%', \n\t\t\t\tpaddingRight: '1%', \n\t\t\t\tborderRadius: '15px',\n\t\t\t\t}\n\t\t\t}>\n\t\t\t\n\t\t\t<Grid centered columns={2}>\n\t\t\t\t<RadioGroup row aria-label=\"locatin\" name=\"row-radio-buttons-group\" onChange={e => handleLocationChange(e)}>\n\t\t\t\t<Grid.Column width={8}>\n\t\t\t\t\t<FormControlLabel \n\t\t\t\t\t\tvalue=\"selected venues\" \n\t\t\t\t\t\tcontrol={<Radio checked={routeLocationType === 'selected venues'}/>} \n\t\t\t\t\t\tlabel=\"Use selected venues\" \n\t\t\t\t\t/>\n\t\t\t\t</Grid.Column>\n\t\t\t\t<Grid.Column width={8} style={{textAlign: 'center'}}>\n\t\t\t\t\t<FormControlLabel \n\t\t\t\t\t\tvalue=\"map\" \n\t\t\t\t\t\tcontrol={<Radio checked={routeLocationType === 'map'}/>} \n\t\t\t\t\t\tlabel=\"Choose location on map\" \n\t\t\t\t\t/>\n\t\t\t\t</Grid.Column>\n\t\t\t\t\n\t\t\t\t</RadioGroup>\n\t\t\t</Grid>\t\n\t\t\t\t<Segment\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tmarginTop: '5%', \n\t\t\t\t\t\tpaddingLeft: '1%', \n\t\t\t\t\t\tpaddingRight: '1%', \n\t\t\t\t\t\tborderRadius: '15px'}\n\t\t\t\t\t}>\n\t\t\t\t\t<Typography \n\t\t\t\t\t\tid=\"input-slider\" \n\t\t\t\t\t\tgutterBottom\n\t\t\t\t\t>\n\t\t\t\t\t\tSet Radius (km)\n\t\t\t\t\t</Typography>\n\t\t\t\t\t<Slider \t\t\t\t\t\t\n\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\taria-label=\"Small\"\n\t\t\t\t\t\tvalueLabelDisplay=\"auto\"\n\t\t\t\t\t\tvalue={radius}\n\t\t\t\t\t\tmin={1}\n\t\t\t\t\t\tmax={20}\n\t\t\t\t\t\tonChange={e => onRadiusChange(e)}\n\t\t\t\t\t/>\n\t\t\t\t\t{showMap ? (\n\t\t\t\t\t\t<Alert severity=\"info\">Double click on desired map location!</Alert>\n\t\t\t\t\t ) : (null)}\n\t\t\t\t\t\n\t\t\t\t\t{showSelected ? (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Alert severity=\"info\">Add venues through venue cards!</Alert>\n\t\t\t\t\t\t\t<Alert severity=\"info\">Ensure radius selected emcompasses all selected venues!</Alert>\n\t\t\t\t\t\t\t{errorOccured ? (\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<Alert severity=\"error\">No venues selected!</Alert>\n\t\t\t\t\t\t\t\t\t<Alert severity=\"info\">To add venues, select from venue cards!</Alert>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : (null)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{errorOccured ? (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Alert severity=\"error\">No venues selected!</Alert>\n\t\t\t\t\t\t\t<Alert severity=\"info\">To add venues, select from venue cards!</Alert>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (null)}\n\t\t\t\t\t{locationError ? (\n\t\t\t\t\t\t<Alert severity=\"error\">Please double click on the map before proceeding</Alert>\n\t\t\t\t\t): (null)}\n\t\t\t\t</Segment>\n\t\t</Segment>\n\t\t<Stack direction=\"row\" postion='right' style={{textAlign: 'right'}} spacing={2}>\n\t\t\t<Button variant=\"contained\" startIcon={<ArrowForward />} onClick={e => handleNext(e)}\n\t\t\t\tstyle={{\n\t\t\t\t\tborderRadius: 15,\n\t\t\t\t\tbackgroundColor: \"#FFC328\",\n\t\t\t\t\tcolor: 'black'}}\n\t\t\t>\n\t\t\t\tNext\n\t\t\t</Button>\n\t\t</Stack>\n\t\t</div>  \n    );\n};\n\nexport default LocationCriteria;\n\n\nLocationCriteria.propTypes = {\n    next: PropTypes.func,\n\tlocation: PropTypes.object,\n\tradius: PropTypes.number,\n\tsetRadiusCallback: PropTypes.func,\n\tsetSelRouteLocation: PropTypes.func,\n\tcancel: PropTypes.func,\n\trouteVenues: PropTypes.array,\n\tsetVenueReq: PropTypes.func,\n\trouteLocationType: PropTypes.string,\n\tsetRouteLocationType: PropTypes.func,\n\tsetCalcCenter: PropTypes.func,\n}","import { useState } from 'react'\nimport { \n\tSegment, \n} from 'semantic-ui-react';\n\nimport 'semantic-ui-less/semantic.less';\nimport PropTypes from 'prop-types'\nimport '../AdvancedSearchBar/index.css'\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport ArrowForward from '@mui/icons-material/ArrowForward';\nimport Header from './Header';\nimport ArrowBack from '@mui/icons-material/ArrowBack';\nimport Stack from '@mui/material/Stack';\nimport DateTimePicker from '@mui/lab/DateTimePicker';\nimport DateAdapter from '@date-io/date-fns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport { addHours } from 'date-fns/esm';\nimport { Alert } from '@mui/material';\nimport { differenceInMinutes } from 'date-fns';\n\n/**\n * \n * @returns a extensive time criteria with validation\n *  \n * \n * @param back - back function used to go to previous form state\n * \n * @param next - function used to go to next form state\n * \n * @param cancel - clear function used passed to Header\n * \n * @param maxHourTime - maxHourTime set to show how long tour lasts\n * \n * @param setMaxHourTime - set maxHourTime function\n * \n * @param venuesCount - set venue count -> min and max\n * \n * @param setVenuesCount - set venue count -> min and max\n * \n * @param timeAtVenue - state for how long you'd spend at a venue\n * \n * @param setTimeAtVenue - state function used to set timeAtVenue\n * \n * @param setStartTime - state function used to set startTime\n * \n * @param venueReq - state used check if selected venues is used\n * \n * @param routeVenue - state array that holds all selected venues\n * \n */\n\nconst TimeCriteria = ({\n    next, back, cancel,\n    maxHourTime, setMaxHourTime, \n    venueCount, setVenueCount,\n    timeAtVenue, setStartTime,\n    setTimeAtVenue, routeVenues,\n    venueReq\n    }) => {\n\t\n    const [dateVal, setDateVal] = useState(new Date());\n    const [venueMinError, setVenueMinError] = useState(false);\n    const [venueMaxError, setVenueMaxError] = useState(false)\n    const [dateError, setDateError] = useState(false);\n    const [pastError, setPastError] = useState(false); \n\n    /**\n     * @todo Have a date, time check for each venues\n     * passed in venues is @routeVenue prop\n     * Add function here!\n     */\n     const venueOpenAtTime = (venue, time) => {\n        const days = [\n            \"Sunday\",\n            \"Monday\",\n            \"Tuesday\",\n            \"Wednesday\",\n            \"Thursday\",\n            \"Friday\",\n            \"Saturday\"\n        ];\n\n        const currentDay = days[time.getDay()];\n\n        for (let hours of venue.openingHours.hours) {\n            if (hours.day !== currentDay) continue;\n\n            if (hours.open.hours > time.getHours() ||\n                (hours.open.hours === time.getHours() && hours.open.minutes > time.getMinutes())) \n                continue;\n\n            if (hours.close.hours < time.getHours() ||\n                (hours.close.hours === time.getHours() && hours.close.minutes < time.getMinutes()))\n                continue;\n        \n            return true;\n        }\n\n        return false;\n    }\n\n    const verifyRequiredRoutesOpen = (newDate) => {\n        // loop through all the required venues and ensure\n        // that they are open at some point during the date range\n        \n        if (venueReq) {\n            for (let venue of routeVenues) {\n                let open = false;\n    \n                for (let hourInc = 0; hourInc <= maxHourTime; hourInc++) {\n                    let dateToCheck = addHours(newDate, hourInc);\n    \n                    if (venueOpenAtTime(venue, dateToCheck)) {\n                        open = true;\n                        break;\n                    }\n                }\n    \n                // if this venue is never open during the date range\n                // return false\n                if (!open) {\n                    return false;\n                }\n            }\n        }\n        // return true if all venues are open\n        return true;\n    }\n\n    const handleChange = (newValue) => {\n        setDateVal(newValue)\n        setStartTime(newValue);\n\t};\n\n    const nextStep = (event) => {\n        \n        let flag = false;\n        if (venueCount.min > venueCount.max){\n            setVenueMaxError(true);\n            flag = true;\n        }\n        else {\n            setVenueMaxError(false);\n            \n        }\n        if (venueCount.min <= 0){\n            setVenueMinError(true);\n            flag = true;\n        }\n        else {\n            setVenueMinError(false);\n        }\n\n        if (venueReq) {\n            if (venueCount.min < routeVenues.length ) {\n                setVenueMinError(true);\n                flag = true;\n            }\n        }\n\n        if (!verifyRequiredRoutesOpen(dateVal)) { \n            setDateError(true);\n            flag = true;\n        }\n        else {\n            setDateError(false);\n        }\n\n        if ((Date.now() > dateVal) && (differenceInMinutes(Date.now(), dateVal) > 30)) {\n            setPastError(true);\n            flag = true;\n        } else {\n            setPastError(false);\n        }\n        \n        if (flag === false) {\n            next(event);\n        }\n        // next(event);\n    }\n    \n\treturn (\n\t\t<div> \n            <Header  \n                content='Route Time'\n                cancel={cancel}\n\t\t    />\n\t\t    <Segment \n\t\t\t\tbasic={false} \n\t\t\t\tcolor='blue' \n\t\t\t\tstyle={{\n\t\t\t\t\tmargin: '3%', \n\t\t\t\t\tpaddingLeft: '1%', \n\t\t\t\t\tpaddingRight: '1%', \n\t\t\t\t\tborderRadius: '15px',\n                    }\n\t\t\t\t}>\n                    <Stack direction=\"row\" spacing={2}>\n                    <LocalizationProvider dateAdapter={DateAdapter}>\n                        <DateTimePicker\n                            label=\"Tour date\"\n                            disablePast\n                            value={dateVal}\n                            onChange={handleChange}\n                            renderInput={(params) => <TextField fullWidth {...params} />}\n                            error={dateError || pastError}\n                            helperText={dateError ? 'Time has passed for venues!' : 'Start date and time for tour'}\n                        />\n                    </LocalizationProvider>\n                    <TextField \n                        type=\"number\" \n                        inputprops={{ inputprops: { min: 1, max: 12} }} \n                        id=\"outlined-basic\" \n                        label=\"Max tour time\" \n                        variant=\"outlined\"\n                        value={maxHourTime}\n                        helperText='Max tour time'\n                        onChange={event => setMaxHourTime(event.target.value)}\n                    />\n\n                    {venueReq ? (\n                        <TextField \n                            inputprops={{ inputprops: { min: 1, max: 100} }}\n                            type=\"number\"\n                            error={venueMinError}\n                            id=\"outlined-basic\" \n                            label=\"Min. venues\" \n                            variant=\"outlined\" \n                            helperText={venueMinError? 'Should be more than selected!' : 'Min Venues'}\n                            value={venueCount.min}\n                            onChange={event => setVenueCount({\n                                min: event.target.value,\n                                max: venueCount.max,\n                            }\n                        )}\n                    />\n                    ): (\n                        <TextField \n                            inputprops={{ inputprops: { min: 1, max: 100} }}\n                            type=\"number\"\n                            error={venueMinError}\n                            id=\"outlined-basic\" \n                            label=\"Min. venues\" \n                            variant=\"outlined\" \n                            helperText={venueMinError? 'Should be more than 0' : 'Min venues'}\n                            value={venueCount.min}\n                            onChange={event => setVenueCount({\n                                min: event.target.value,\n                                max: venueCount.max,\n                                }\n                            )}\n                            \n                        />\n                    )\n                \n                    }\n                        <TextField \n                            type=\"number\" \n                            error={venueMaxError}\n                            inputprops={{ inputprops: { min: 0, max: 100} }} \n                            id=\"outlined-basic\" \n                            label=\"Max. venues\" \n                            variant=\"outlined\"\n                            value={venueCount.max}\n                            onChange={event => setVenueCount({\n                                min: venueCount.min,\n                                max: event.target.value,\n                                }\n                            )}\n                            helperText={venueMaxError? 'Should be more than Min!' : 'Maximum venues'}\n                        />\n                        <TextField \n                            type=\"number\"\n                            inputprops={{ inputprops: { min: 0, max: 300} }} \n                            id=\"outlined-basic\" \n                            variant=\"outlined\"\n                            label=\"Average time\"\n                            value={timeAtVenue}\n                            onChange={event => setTimeAtVenue(event.target.value)}\n                            helperText='Average time spent at a venue'\n                        />\n                    \n                </Stack>\n                {dateError? (\n                    <Alert severity=\"error\">\n                        At least one saved venue is not open during this time range. Change date, or remove venues from\n                        route plan.\n                    </Alert>\n                ): (null)}\n                {pastError? (\n                    <Alert severity=\"error\">\n                        The selected time and date may not be in past.\n                    </Alert>\n                ): (null)}\n                \n            </Segment>\n            <Stack direction=\"row\" postion='right' style={{textAlign: 'right', marginTop: '2%'}} spacing={2}>\n                <Button variant=\"contained\" startIcon={<ArrowBack />} onClick={e => back(e)}\n                style={{\n                    borderRadius: 15,\n                    backgroundColor: \"#FFC328\",\n                    color: 'black'\n                }}\n                >\n                    Back\n                </Button>\n                <Button variant=\"contained\" startIcon={<ArrowForward />} onClick={e => nextStep(e)}\n                    style={{\n                        borderRadius: 15,\n                        backgroundColor: \"#377f89\",\n                        color: 'white'\n                    }}\n                >\n                    Next\n                </Button>\n\t\t    </Stack>\n\t\t</div>  \n    );\n};\n\nexport default TimeCriteria;\n\n\nTimeCriteria.propTypes = {\n    next: PropTypes.func,\n\tback: PropTypes.func,\n    cancel: PropTypes.func,\n    maxHourTime: PropTypes.number,\n    setMaxHourTime: PropTypes.func,\n    venueCount: PropTypes.object,\n    setVenueCount: PropTypes.func,\n    timeAtVenue: PropTypes.number,\n    setStartTime: PropTypes.func,\n    setTimeAtVenue: PropTypes.func,\n    routeVenues: PropTypes.array,\n    venueReq: PropTypes.bool,\n}","import React from 'react'\nimport { \n\tGrid, \n\tRating, \n\tSegment,\n} from 'semantic-ui-react';\nimport 'semantic-ui-less/semantic.less';\nimport Button from '@mui/material/Button';\nimport ArrowForward from '@mui/icons-material/ArrowForward';\nimport ArrowBack from '@mui/icons-material/ArrowBack';\nimport Stack from '@mui/material/Stack';\nimport AddMenuCard from '../AdvancedSearchBar/AddMenuCard';\nimport DropdownTagBar from '../AdvancedSearchBar/DropdownTagBar';\nimport Header from './Header';\nimport PropTypes from 'prop-types'\nimport '../AdvancedSearchBar/index.css'\n\n\n/**\n * \n * @returns a extensive searchbox with many criterias.\n *  \n * \n * @param back - back function used to go to previous form state\n * \n * @param confirm - confirm generate route\n * \n * @param cancel - clear function used passed to Header\n * \n * @param ratingStar - minimum rating value for search\n * \n * @param setRatingStar - set minimum rating value for search\n * \n * @param venueCondition - set venue condition -> open now and promotion\n * \n * @param searchTag - state array used to search tags passed to DropdownTagBar component\n * \n * @param setSearchTag - state function used to set search tags passed to DropdownTagBar component\n * \n * @param itemSearch - state used to items to search passed to AddItemCard component\n * \n * @param setItemSearch - state function used to set items to search AddItemCard component\n * \n */\n\n\nconst CriteriaBox2 = ({\n\tback, confirm,\n\titemSearch, setItemSearch,\n\trating, setRatingStar,\n\tsearchTags, setSearchTags,\n\tcancel\n\t}) => {\n\n\treturn (\n\t\t<div>\n\t\t<Header  \n\t\t\tcontent='Venue Criteria'\n\t\t\tcancel={cancel}\n\t\t/>\n\t\t<Grid>\n\t\t\t<Grid.Column width={8}>\n\t\t\t<Segment \n\t\t\t\tcolor='blue' \n\t\t\t\tclassName='rounded'\n\t\t\t\tstyle={{\n\t\t\t\t\tmarginTop: '3%', \n\t\t\t\t\tborderRadius: '5rem !important'\n\t\t\t\t}}>\n\t\t\t\t<h5>Set Minimum Rating</h5>\n\t\t\t\t<Rating\n\t\t\t\t\tonRate={(event, { rating }) => {\n\t\t\t\t\t\tsetRatingStar(rating);\n\t\t\t\t\t}}\n\t\t\t\t\tmaxRating={5}\n\t\t\t\t\trating={rating}\n\t\t\t\t\ticon='star'\n            \t/>\n\t\t\t</Segment>\n\t\t\t\t<Segment \n\t\t\t\t\tcolor='blue'\n\t\t\t\t\tclassName='rounded'\n\t\t\t\t>\n\t\t\t\t\t<h5>Add search tags</h5>\n\t\t\t\t\t<DropdownTagBar \n\t\t\t\t\t\tsearchTag={searchTags}\n\t\t\t\t\t\tsetSearchTag={setSearchTags}\n\t\t\t\t\t/>\n\t\t\t\t</Segment>\n\t\t\t</Grid.Column>\n\t\t\t<Grid.Column width={8}>\n\t\t\t\t<div style={{marginTop: '3%'}}>\n\t\t\t\t\t<AddMenuCard  \n\t\t\t\t\t\titemSearch={itemSearch}\n\t\t\t\t\t\tsetItemSearch={setItemSearch}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</Grid.Column>\n\t\t</Grid>  \n\t\t\t<Stack direction=\"row\" style={{textAlign: 'right', marginTop: '2%'}} spacing={2}>\n\t\t\t<Button variant=\"contained\" startIcon={<ArrowBack />} onClick={e => back(e)}\n\t\t\tstyle={{\n\t\t\t\tborderRadius: 15,\n\t\t\t\tbackgroundColor: \"#FFC328\",\n\t\t\t\tcolor: 'black'\n\t\t\t}}\n\t\t\t>\n\t\t\t\tBack\n\t\t\t</Button>\n\t\t\t<Button variant=\"contained\" startIcon={<ArrowForward />} onClick={() => confirm()}\n\t\t\t\tstyle={{\n\t\t\t\t\tborderRadius: 15,\n\t\t\t\t\tbackgroundColor: \"#377f89\",\n\t\t\t\t\tcolor: 'white'\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tGenerate\n\t\t\t</Button>\n\t\t</Stack>\n\t</div>        \n\t);\n};\n\nexport default CriteriaBox2;\n\n\nCriteriaBox2.propTypes = {\n\tback: PropTypes.func,\n\tconfirm: PropTypes.func,\n    itemSearch: PropTypes.array,\n    setItemSearch: PropTypes.func,\n\trating: PropTypes.number,\n\tsetRatingStar: PropTypes.func,\n\tsearchTags: PropTypes.array,\n\tsetSearchTag: PropTypes.func,\n\tconfrim: PropTypes.func,\n\tcancel: PropTypes.func,\n}\n","import { useState } from 'react'\nimport { \n\tSegment, \n} from 'semantic-ui-react';\n// import { Slider } from 'react-semantic-ui-range';\n\n\nimport 'semantic-ui-less/semantic.less';\nimport PropTypes from 'prop-types'\nimport '../AdvancedSearchBar/index.css'\nimport LocationCriteria from './LocationCriteria';\nimport TimeCriteria from './TimeCriteria';\nimport CriteriaBox2 from './CriteriaBox2';\n\n/**\n * \n * @returns a multi step form With 3 main components.\n * \n * Spliting functionalities to Time/Location/CriteraBox2\n *  \n * \n * @param back - back function used to go to previous form state\n * \n * @param next - function used to go to next form state\n * \n * @param cancel - clear function used passed to Header\n * \n * @param maxHourTime - maxHourTime set to show how long tour lasts\n * \n * @param setMaxHourTime - set maxHourTime function\n * \n * @param venuesCount - set venue count -> min and max\n * \n * @param setVenuesCount - set venue count -> min and max\n * \n * @param timeAtVenue - state for how long you'd spend at a venue\n * \n * @param setTimeAtVenue - state function used to set timeAtVenue\n * \n * @param setStartTime - state function used to set startTime\n * \n * @param venueReq - state used check if selected venues is used\n * \n * @param location - route coordinates, validation to check map is selected\n * \n * @param radius - radius value for slider\n * \n * @param setRadiusCallback - set radius callback function\n * \n * @param setSelRouteLocation - boolean value to see if clicking location on map\n * \n * @param routeLocationType - state location map or selectVenue\n * \n * @param setRouteLocationType - state function used to set routeLocationType\n * \n * @param setCalcCenter - state function to set calculated center for selected venues\n * \n * @param setVenueReq - set bool so check if selected venues is used\n * \n * @param routeVenues - state array that holds all selected venues\n * \n * @param ratingStar - minimum rating value for search\n * \n * @param setRatingStar - set minimum rating value for search\n * \n * @param venueCondition - set venue condition -> open now and promotion\n * \n * @param searchTag - state array used to search tags passed to DropdownTagBar component\n * \n * @param setSearchTag - state function used to set search tags passed to DropdownTagBar component\n * \n * @param itemSearch - state used to items to search passed to AddItemCard component\n * \n * @param setItemSearch - state function used to set items to search AddItemCard component\n * \n */\n\n\nconst MultiCrit = ({ \n\titemSearch, setItemSearch,\n\trating, setRatingStar,\n\tsearchTags, setSearchTags,\n\tlocation, setRadiusCallback,\n\tsetStartTime,\n\tsetSelRouteLocation,\n\tmaxHourTime, setMaxHourTime, \n    venueCount, setVenueCount,\n\ttimeAtVenue, confirm, \n\tsetTimeAtVenue, setShowCrit,\n\trouteVenues, radius,\n\trouteLocationType, setRouteLocationType,\n\tsetCalcCenter,\n\tvenueReq, setVenueReq, setRouteLocation\n\t}) => {\n\t\n    const [step, setStep] = useState(1);\n\n    const continues = (e) => {\n        e.preventDefault();\n        setStep(step + 1);\n    };\n\n    const back = (e) => {\n        e.preventDefault();\n        setStep(step - 1);\n    };\n\n\tconst cancel = (e) => {\n\t\t// clear all variables\n\t\tsetItemSearch([]);\n\t\tsetRatingStar(0);\n\t\tsetSearchTags([]);\n\t\tsetTimeAtVenue(20);\n\t\tsetVenueCount({\n\t\t\tmin: 0,\n\t\t\tmax: 0,\n\t\t})\n\t\tsetMaxHourTime(0);\n\t\tsetSelRouteLocation(false);\n\t\tsetStep(1);\n\t\tsetRadiusCallback(5);\n\t\tsetShowCrit(false);\n\t\tsetRouteLocationType('');\n\t\tsetVenueReq(false);\n\t\tsetRouteLocation({\n            routeCenter: {\n                longitude: '',\n                latitude: '',\n            },\n        })\n\n\t}\n\t\n\treturn (\n\t\t<Segment className='searchBox'\n\t\t\tbasic={false}\n\t\t\tstyle={{ \n\t\t\t\tborderRadius: '10px !important'\n\t\t\t}}\n\t\t>\n\t\t\t\n            {step === 1? (\n\t\t\t\t<LocationCriteria \n\t\t\t\t\tnext={continues}\n\t\t\t\t\tback={back}\n\t\t\t\t\tcancel={cancel}\n\t\t\t\t\tsetSelRouteLocation={setSelRouteLocation}\n\t\t\t\t\tsetRadiusCallback={setRadiusCallback}\n\t\t\t\t\tsetVenueReq={setVenueReq}\n\t\t\t\t\trouteVenues={routeVenues}\n\t\t\t\t\tradius={radius}\n\t\t\t\t\tlocation={location}\n\t\t\t\t\trouteLocationType={routeLocationType}\n\t\t\t\t\tsetRouteLocationType={setRouteLocationType}\n\t\t\t\t\tsetCalcCenter={setCalcCenter}\n\t\t\t\t/>\n                ) : (null)}\n\n            {step === 2? (\n\t\t\t\t<TimeCriteria\n\t\t\t\t\tnext={continues}\n\t\t\t\t\tback={back}\n\t\t\t\t\tcancel={cancel}\n\t\t\t\t\tmaxHourTime={maxHourTime}\n\t\t\t\t\tvenueCount={venueCount}\n\t\t\t\t\tsetVenueCount={setVenueCount}\n\t\t\t\t\tsetMaxHourTime={setMaxHourTime}\n\t\t\t\t\ttimeAtVenue={timeAtVenue}\n\t\t\t\t\tsetStartTime={setStartTime}\n\t\t\t\t\tsetTimeAtVenue={setTimeAtVenue}\n\t\t\t\t\tvenueReq={venueReq}\n\t\t\t\t\trouteVenues={routeVenues}\n\t\t\t\t/>\n                ) : (null)}\n\t\t\t\n\t\t\t{step === 3? (\n\t\t\t\t<CriteriaBox2\n\t\t\t\t\tconfirm={confirm}\n\t\t\t\t\tcancel={cancel}\n\t\t\t\t\tback={back}\n\t\t\t\t\trating={rating}\n\t\t\t\t\titemSearch={itemSearch}\n\t\t\t\t\tsetItemSearch={setItemSearch}\n\t\t\t\t\tsetRatingStar={setRatingStar}\n\t\t\t\t\tsearchTags={searchTags}\n\t\t\t\t\tsetSearchTags={setSearchTags}\n\t\t\t\t/>\n                ) : (null)}         \n\t</Segment> \n\t);\n};\n\nexport default MultiCrit;\n\n\nMultiCrit.propTypes = {\n    itemSearch: PropTypes.array,\n    setItemSearch: PropTypes.func,\n\trating: PropTypes.number,\n\tsetRatingStar: PropTypes.func,\n\tradius: PropTypes.number,\n\tsearchTags: PropTypes.array,\n\tsetSearchTag: PropTypes.func,\n\tlocation: PropTypes.object,\n\tsetRadiusCallback: PropTypes.func,\n\tsetSelRouteLocation: PropTypes.func,\n\tmaxHourTime: PropTypes.number,\n    setMaxHourTime: PropTypes.func,\n    venueCount: PropTypes.object,\n    setVenueCount: PropTypes.func,\n\ttimeAtVenue: PropTypes.number,\n\tconfirm: PropTypes.func,\n\tsetStartTime: PropTypes.func,\n\tsetTimeAtVenue: PropTypes.func,\n\tsetShowCrit: PropTypes.func,\n\trouteVenues: PropTypes.array,\n\trouteLocationType: PropTypes.string,\n\tsetRouteLocationType: PropTypes.func,\n\tvenueReq: PropTypes.bool,\n\tsetVenueReq: PropTypes.func,\n\tsetRouteLocation: PropTypes.func,\n}","import { gql } from '@apollo/client';\n\n//  todo fix this\nexport const GenerateRoute = gql`\n    mutation GenerateRoute($routeInput: RouteOptionsInput!) {\n        generateRoute(routeInput: $routeInput) {\n            errors\n            content {\n                venuesInRoute {\n                    _id\n                    name\n                    venueType\n                    address\n                    contactNumber\n                    location {\n                        type\n                        coordinates\n                    }\n                    tags {\n                        count\n                        tag {\n                            text\n                        }\n                    }\n                    openingHours {\n                        hours {\n                            day\n                            open {\n                                hours\n                                minutes\n                            }\n                            close {\n                                hours\n                                minutes\n                            }\n                        }\n                    }\n                }\n                routeGeometry\n            }\n        }\n    }\n`;","import { gql } from '@apollo/client';\n\nexport const GetRouteByID = gql`\n    query Query($routeID: String!) {\n        getRouteByID(routeID: $routeID) {\n            errors\n            content {\n                venuesInRoute {\n                    _id\n                    name\n                    venueType\n                    address\n                    contactNumber\n                    location {\n                        type\n                        coordinates\n                    }\n\n                    tags {\n                        tag {\n                            text\n                        }\n                    }\n\n                    openingHours {\n                        hours {\n                            day\n                            open {\n                                hours\n                                minutes\n                            }\n                            close {\n                                hours\n                                minutes\n                            }\n                        }\n                    }\n                }\n                routeGeometry\n            }\n        }\n    }\n`;","import React, { useState, useEffect } from 'react';\nimport { \n    Grid,\n    Button\n} from 'semantic-ui-react';\nimport { useMutation } from '@apollo/client';\nimport { useLazyQuery, useQuery } from '@apollo/client';\nimport GET_ALL_VENUES_MAP from '../components/MapView/getAllVenuesMap.gql';\nimport SEARCH_VENUES_MAP from '../components/MapView/venueSearchMaps.gql';\nimport MapView from '../components/MapView/MapView';\nimport PrimaryButton from '../shared-components/primary-button/PrimaryButton';\nimport { HomeSidebar } from '../components/HomeSidebar/HomeSidebar';\nimport { NavBar } from '../components/NavBar/NavBar';\nimport { SummaryVenueInfo, GET_FEATURED_VENUES } from '../gql/venueInfo/venueInfo.gql';\nimport AdvancedSearchBar from '../components/AdvancedSearchBar/AdvancedSearchBar';\nimport { useParams } from 'react-router';\nimport MenuPane from '../components/Menu/MenuPane';\nimport haversine from 'haversine-distance';\nimport MultiCrit from '../components/RouteCriteria/MultiCrit';\nimport { GenerateRoute } from '../gql/routes/generateRoute.gql'\nimport { GetRouteByID } from '../gql/routes/getRouteById.gql'\n\nimport Backdrop from '@mui/material/Backdrop';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport AlertBar from '../shared-components/AlertBar';\n\nimport '../styles/panes.css';\n\n// handle mobile || small screens\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Drawer from '@mui/material/Drawer';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport IconButton from '@mui/material/IconButton';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\n/**\n * Mounts the home page and its subsidiary\n * components, critically:\n * \n * + The sidebar\n * + The map view pane\n * + The nav bar\n * + Search & advanced search\n * + venue info pane\n * + Route criteria\n * \n * Navigation to the page is handled by the\n * Router component which also supplies params\n * as props that are used to handel viewing \n * shared routes, venues and venue menus.\n * \n */\n\n\n// Custom break points for responsiveness\nconst theme = createTheme({\n  breakpoints: {\n    values: {\n      xs: 0,\n      sm: 768,\n      md: 768,\n      lg: 1200,\n      xl: 1536,\n    },\n  },\n});\n\n\n\nconst Home = () => {\n\n    // authentication handler\n    const [authenticated, setAuthenticated] = useState(false);\n\n    // pull venue id or routeID from uri if\n    // present\n    const { venueID, routeID } = useParams();\n    const [venueData, setVenueData] = useState({\n        venueArray: [],\n    });\n\n    // setup alert bar state\n    const [show, setShow] = useState(false);\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const [severity, setSeverity] = useState(\"\");\n\n    const [panelData, setPanelData] = useState({\n        resArray: [],\n    });\n\n    // Toggle for showing advance search and route crit\n    const [showAdv, setShowAdv] = useState(false);\n    const [showCrit, setShowCrit] = useState(false);\n    \n    /**\n     * Handel small screens\n    */\n    // const theme = useTheme(customBps);\n    // breakpoint handler\n    const desktopRes = useMediaQuery(theme.breakpoints.up('sm'));\n    const [mobileOpen, setMobileOpen] = useState(false);\n    const handleDrawerToggle = () => {\n        setMobileOpen(!mobileOpen);\n    };\n\n    // Used for updating the venues to be displayed on the map\n    const updateDisplayData = (venues) => {\n        setVenueData({\n            venueArray: venues,\n        });\n    }\n\n    /**\n    * <-- Side bar state handlers -->\n    */\n\n    const updateSideBar = (venues) => {\n        const wrappedArray = [venues].flat();\n        setPanelData({\n            resArray: wrappedArray,\n        });\n    }\n    \n    const [ activePanel, setCurrentPanel ] = useState('featured');\n    const [ featuredVenues, setFeaturedVenues ] = useState([]);\n    const [ searchResultVenues, setSearchResultVenues ] = useState([]);\n    const [ routeVenues, setRouteVenues ] = useState([]);\n    const [ routePlanner, setRoutePlanner ] = useState(false);\n\n    // get featured venues \n    const { data: featuredVenuesData , loading: loadingFeatured} = useQuery(\n        GET_FEATURED_VENUES, {\n            onCompleted: (data) => {\n                setFeaturedVenues(data.getFeaturedVenues);\n                // initially set the panel data to featured venues\n                updateSideBar(data.getFeaturedVenues);\n            }\n        }\n    );\n\n    // set panel activity\n    const setActivePanel = (panel) => {\n        setCurrentPanel(panel);\n        setRoutePlanner(false);\n\n        switch (panel) {\n            case 'featured':\n                updateSideBar(featuredVenues);\n                break;\n            case 'searchResults':\n                updateSideBar(searchResultVenues);\n                break;\n            case 'routePlan':\n                setRoutePlanner(true);\n                updateSideBar(routeVenues);\n                break;\n            default:\n                break;\n        }\n    }    \n\n\n    // Our basic search criteria\n    const [venueType, setVenueType] = useState('');\n\n    // The following all states are for adv search\n    const [venueName, setVenueName] = useState('');\n    const [ratingStar, setRatingStar] = useState(0);\n    const [venueCondition, setVenueCondition] = useState({\n        openNow: false, \n        promotion: false,\n    });\n    const [itemSearch, setItemSearch] = useState([]); \n    const [searchTags, setSearchTags] = useState([]);\n    const [searchRadius, setSearchRadius] = useState(5);\n    const [locationType, setLocationType] = useState('');\n\n    const [showRouteData, setShowRouteData] = useState(null);\n\n\n    // Search center coordinates\n    const [location, setLocation] = useState({\n        searchCenter: {\n            longitude: '',\n            latitude: '',\n        },\n        radius: 5000\n    });\n\n    // The following stuff is used to control whether or not\n    // we're getting information from the map about location for search\n    const [selectingLocation, setSelectingLocation] = useState(false);\n\n\n    /** -------------------> Route States <---------------- */\n    // Similar to advance searches, these are states managing\n    // Route criteria searches.\n    const [routeRating, setRouteRating] = useState(0);\n    const [routeItemSearch, setRouteItemSearch] = useState([]); \n    const [routeTags, setRouteTags] = useState([]);\n    const [routeRadius, setRouteRadius] = useState(5);\n\n    const [startTime, setStartTime] = useState('');\n    const [maxHourTime, setMaxHourTime] = useState(5);\n    const [venueCount, setVenueCount] = useState({\n        min: 0,\n        max: 0,\n    })\n\n    const [timeAtVenue, setTimeAtVenue] = useState(20);\n    const [genRouteData, setGenRouteData] = useState(null);\n    const [routeLocationType, setRouteLocationType] = useState('');\n    const [calcCenter, setCalcCenter] = useState({\n        longitude: '',\n        latitude: '',\n    });\n\n    // const [showCalCenter, setShowCalCenter] = useState(false);\n    const [selectVenuesFlag, setSelectVenuesFlag] = useState(false);\n    const [routelocation, setRouteLocation] = useState({\n        routeCenter: {\n            longitude: '',\n            latitude: '',\n        },\n    });\n\n    // The following stuff is used to control whether or not\n    // we're getting information from the map about location for routes\n    const [selRouteLocation, setSelRouteLocation] = useState(false);\n\n\n    // When we launch a search we have to 'parse' the input\n    // we're given a little (if the user adds and then deletes\n    // a venue name, for example, we probably don't want to search\n    // for an empty string (even though the results should be fine))\n    // It's also a good chance to strip punctuation, etc. from names\n    const parseInput = () => {\n        setShowAdv(false);\n\n        let results = {};\n        if (venueType !== '') {\n            results.venueType = venueType;\n        }\n\n        if (venueName !== '') {\n            results.basicSearch = venueName;\n        }\n\n        if (itemSearch.length !== 0) {\n            results.menuItems = itemSearch.map(item => {\n                return {...item, 'itemKind':item.itemKind.id};\n            });\n            console.log(itemSearch);\n        }\n\n        if (searchTags.length !== 0) {\n            results.venueTags = searchTags;\n        }\n\n        if (venueCondition.openNow) {\n            results.openNow =  new Date();\n        }\n\n        if (venueCondition.promotion) {\n            results.promotionNow =  new Date();\n        }\n\n        if (ratingStar !== 0) {\n            let r = parseFloat(ratingStar);\n            results.minRating = r;\n        }\n        \n        if (location.searchCenter.longitude !== '' &&\n            location.searchCenter.latitude !== '' &&\n            location.radius !== '') {\n            \n            results.location = {\n                searchCenter: [\n                    location.searchCenter.longitude,\n                    location.searchCenter.latitude,\n                ],\n                radius: parseFloat(searchRadius*1000),\n            }\n        }\n        \n        return {\n            searchCriteria : results,\n            now : new Date()\n        };\n    };\n\n    function confirmGenRoute() {\n        parseRoute();\n        setShowCrit(false);\n    }\n\n\n    // When we launch a search we have to 'parse' the input\n    // Similar to advance search. This is to parse Route info\n    // Basic validation is done here\n    // Call generate route mutation.\n    const parseRoute = () => {\n        setShowAdv(false);\n\n        setSelRouteLocation(false);\n        setGenRouteData(null);\n\n        setGenRouteData(\n            {\n                content: {\n                    routeGeometry: \"\",\n                    venuesInRoute: []\n                }\n            }\n        );\n\n        let results = {};\n    \n        if (startTime !== '') {\n            results.startTime = startTime;\n        } else {\n            results.startTime = new Date();\n        }\n\n        if (maxHourTime !== '') {\n            results.maxTourTime = parseInt(maxHourTime);\n        }\n\n        if (routelocation.routeCenter.longitude !== '' &&\n            routelocation.routeCenter.latitude !== '') {\n            console.log(routelocation);\n            results.searchCenter = [\n                parseFloat(routelocation.routeCenter.longitude), \n                parseFloat(routelocation.routeCenter.latitude)\n            ]\n        }\n        else {\n\n            console.log(routeVenues);\n            results.requiredVenues = routeVenues.map(venue => venue._id);\n        }\n\n        if (routeRadius !== '') {\n            results.radius = parseInt(routeRadius*1000);\n        }\n\n        if (venueCount.min !== 0) {\n            results.minVenues = parseInt(venueCount.min);\n        }\n\n        if (venueCount.max !== 0) {\n            results.maxVenues = parseInt(venueCount.max);\n        }\n\n        if (timeAtVenue !== 0) {\n            results.timeAtVenue = parseInt(timeAtVenue);\n        }\n\n        let venueCriteria = [];\n        \n\n        if (routeTags.length !== 0) {\n            for (let i = 0; i < routeTags.length; i++) { \n                venueCriteria.push({\"venueTag\" : routeTags[i]})\n            }\n        }\n\n        if (routeItemSearch.length !== 0) {\n            for (let item of routeItemSearch) {\n                venueCriteria.push(\n                    {\n                        menuItem : {\n                            ...item,\n                            itemKind : item.itemKind.id\n                        }\n                    }\n                );\n            }\n        }\n\n        if (routeRating !== 0) {\n            let r = parseFloat(routeRating);\n            venueCriteria.minRating = r;\n        }\n        \n        results.venueCriteria = venueCriteria;\n\n        generateRoute({\n            variables: {\n                routeInput: results,\n            }\n        })\n        clearRoute();\n    };\n\n    function clearRoute() {\n        setRouteItemSearch([]);\n\t\tsetRouteRating(0);\n\t\tsetRouteTags([]);\n\t\tsetTimeAtVenue(20);\n\t\tsetVenueCount({\n\t\t\tmin: 0,\n\t\t\tmax: 0,\n\t\t})\n\t\tsetMaxHourTime(0);\n\t\tsetSelRouteLocation(false);\n\t\tsetRouteRadius(5);\n\t\tsetShowCrit(false);\n\t\tsetRouteLocationType('');\n        setStartTime('');\n\t\tsetSelectVenuesFlag(false);\n        setRouteLocation({\n            routeCenter: {\n                longitude: '',\n                latitude: '',\n            },\n        })\n    }\n    \n    // We need to use the fetch policy network-only\n    // because onCompleted isn't called when the data is cached\n    // for some reason, this is a bad solution but I'll revisit\n    // if we start having performance issues\n    const [defaultQuery, defaultResults] = useLazyQuery(\n        GET_ALL_VENUES_MAP,\n        {\n            onCompleted: () => {\n                updateDisplayData(defaultResults.data.getAllVenues);\n            },\n            fetchPolicy: 'network-only',\n        }\n    );\n\n    const [routeIDQuery, routeIDResults] = useLazyQuery(\n\n        GetRouteByID,\n        {\n            variables: {\n                routeID: routeID\n            },\n            onCompleted: (data) => {\n                console.log(data);\n                setRouteVenues(data.getRouteByID.content.venuesInRoute);\n                updateSideBar(data.getRouteByID.content.venuesInRoute);\n                setCurrentPanel('routePlan');\n                setRoutePlanner(true);\n            },\n            fetchPolicy: 'network-only',\n        }\n    );\n\n\n    const [searchQuery, searchResults] = useLazyQuery(\n        SEARCH_VENUES_MAP,\n        {\n            onCompleted: (data) => {\n                if (!data.searchVenues.content) {\n                    // show alert and clear search results\n                    setAlertMessage(data.searchVenues.errors[0]);\n                    setSeverity(\"error\");\n                    setShow(true);\n                    updateDisplayData([]);\n                    if (activePanel === 'searchResults')\n                        updateSideBar([]);\n                    setSearchResultVenues([]);\n\n                } else {\n                    updateDisplayData(data.searchVenues.content);\n                    updateSideBar(data.searchVenues.content);\n                    setSearchResultVenues(data.searchVenues.content);\n                    setCurrentPanel('searchResults');\n                    if (!desktopRes)\n                        handleDrawerToggle();\n                }\n            },\n            fetchPolicy: 'network-only',\n        }\n    );\n\n\n    // popUp query results passed to map\n    const [popUpQuery, popUpResults] = useLazyQuery(\n        SummaryVenueInfo,\n        {\n            onCompleted: () => {\n                if (!popUpResults.data.getVenueInfoByID) {\n                    // set alert bar message and display\n                    setAlertMessage(popUpResults.data.getVenueInfoByID.errors[0]);\n                    setSeverity(\"error\");\n                    setShow(true);\n                } else {               \n                    updateSideBar(popUpResults.data.getVenueInfoByID.venueInformation);\n                    setSearchResultVenues([popUpResults.data.getVenueInfoByID.venueInformation]);\n                    setCurrentPanel('searchResults');\n                    if (!desktopRes) \n                        handleDrawerToggle();\n                }\n            },\n            fetchPolicy: 'network-only',\n        }\n    );\n\n    function clearSearch() {\n        setLocation({\n            searchCenter: {\n                longitude: '',\n                latitude: '',\n            },\n            radius: 5000,\n        });\n        setVenueType('');\n        setVenueName('');\n        setVenueCondition({\n            openNow: false, \n            promotion: false,\n        })\n        setRatingStar(0);\n        setSelectingLocation(false);\n        setItemSearch([]);\n        setSearchTags([]);\n        defaultQuery(\n            {\n                variables : {\n                    now: new Date()\n                }\n            }\n        );\n        setSearchRadius(5)\n        // preserve featured\n        if (activePanel === 'searchResults')\n            updateSideBar([]);\n\n        setSearchResultVenues([]);\n        setLocationType('');\n\n        setAlertMessage('Search Cleared');\n        setSeverity('info');\n        setShow(true);\n    }\n\n\n    const  displayPopupInfo = (venueID) => {\n        popUpQuery({\n            variables: { venueID }\n        });\n    }\n\n    const [ generateRoute ] = useMutation(GenerateRoute, {\n        onCompleted: (data) => {\n            console.log('[>>] generate Route', data);\n\n            if (data.generateRoute.content !== null) {\n                setGenRouteData(null);\n                setGenRouteData({\n                    content: {\n                        routeGeometry: \"\",\n                        venuesInRoute: []\n                    }\n                })\n                setRouteVenues([]);\n                setGenRouteData(data.generateRoute);\n                setRouteVenues(data.generateRoute.content.venuesInRoute);\n                updateSideBar(data.generateRoute.content.venuesInRoute);\n                setCurrentPanel('routePlan');\n                setRoutePlanner(true);\n            }\n            if (data.generateRoute.errors !== null) {\n                setAlertMessage(data.generateRoute.errors[0]);\n                setSeverity(\"error\");\n                setShow(true);\n            }\n\n            if (data.errors) {\n                setAlertMessage('Route generation failed, try again');\n                setSeverity(\"error\");\n                setShow(true);\n            }\n\n            setSelectVenuesFlag(false);\n        }\n    })\n\n\n    // run the default query when the component loads\n    useEffect (() => {\n        defaultQuery(\n            {\n                variables : {\n                    now: new Date()\n                }\n            }\n        );\n        if (routeID) {\n            routeIDQuery({\n                variables : routeID\n            })\n            console.log(routeIDResults);\n        }\n    }, []);\n\n    function sortPrice() {\n        let sortedRes = [].concat(panelData.resArray);\n        sortedRes.sort((a, b) => {\n            let costA = a.averagePrice;\n            let costB = b.averagePrice;\n            return costA - costB;\n        });\n        console.log(sortedRes);\n        setPanelData({\n            resArray: sortedRes,\n        });\n    }\n\n    const toggleDrawer = (newOpen) => () => {\n        setShowAdv(newOpen);\n      };\n\n    function sortReviews() {\n        let sortedRes = [].concat(panelData.resArray);\n        sortedRes.sort((a, b) => {\n            let costA = a.averageRating;\n            let costB = b.averageRating;\n            return costB - costA;\n        });\n        setPanelData({\n            resArray: sortedRes,\n        });\n    }\n\n\n    const distance = (coor1, coor2) => {\n        const a = { latitude: coor2.latitude, longitude: coor2.longitude }\n        const b = { latitude: coor1[1], longitude: coor1[0] }\n        return(haversine(a, b))\n    };\t\n\n    function sortDistance() {\n        navigator.geolocation.getCurrentPosition(\n            function(position) {\n                if (position) {\n                    let sortedRes = [].concat(panelData.resArray);\n                    // let sortedRes = venueResults\n                    sortedRes.sort((a, b) => {\n                        let disA = distance(a.location.coordinates, position.coords);\n                        let disB = distance(b.location.coordinates, position.coords);\n                        return disA - disB;\n                    });\n                    setPanelData({\n                        resArray: sortedRes,\n                    });\n                }\n            },\n            console.log,\n            { maximumAge: 700_000 }\n        );\n    }\n\n    const matches = useMediaQuery('(min-width:800px)');\n    if (loadingFeatured) {\n        return (\n            <Backdrop\n                sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\n                open={loadingFeatured}\n            >\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )        \n    }\n\n    const sidebarProps = {\n        authenticated: authenticated,\n        setActivePanel: setActivePanel,\n        activePanel: activePanel,\n        routePlanner: routePlanner,\n        venueArray: panelData,\n        setVenueArray: setPanelData,\n        searchResultVenues: searchResultVenues,\n        featuredVenues: featuredVenues,\n        routeVenues: routeVenues,\n        setRouteVenues: setRouteVenues,\n        sortDistance: sortDistance,\n        sortPrice: sortPrice,\n        sortReviews: sortReviews,\n        setShowAlert: setShow,\n        setAlertSeverity: setSeverity,\n        setAlertMessage: setAlertMessage,\n        updateRouteGeo: setGenRouteData,\n        routeData: genRouteData,\n        existingRoute: routeID,\n    }\n\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <NavBar setAuthenticated={setAuthenticated} />\n            <Box\n                sx={{\n                    display: 'flex',\n                    justifyContent: 'right'\n                }}\n            >\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        edge=\"end\"\n                        onClick={handleDrawerToggle}\n                        sx={{ mr: 2, display: { sm: 'none' } }}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                </Toolbar>\n            </Box>\n\n            <Box sx={{ maxWidth: 2100 }} >\n                <Grid>\n                    <Grid.Column computer={10} mobile={16} tablet={10}>\n                        <div className='main-section'>\n                            <Grid>\n                                <Grid.Column width={16}>\n                                    <div width='80%' style={{borderRadius: '10px'}}>\n                                        <div className=\"ui right action left icon input fluid\"> \n                                            <input \n                                                style={{ borderRadius: '20px'}}\n                                                type=\"text\" \n                                                placeholder=\"Search...\" \n                                                onChange={event => setVenueName(event.target.value)}\n                                                value={venueName} \n                                            />\n                                            <i className=\"search icon\"></i>\n                                            {showAdv ? (\n                                                <button \n                                                    title=\"Basic Search\"\n                                                    className=\"ui basic icon button\" \n                                                    onClick={() => {\n                                                        setShowAdv(false);\n                                                        \n                                                    }}\n                                                >\n                                                    <i aria-hidden=\"true\" className=\"angle up icon\" />\n                                                        {/* Basic Search */}\n                                                </button>\n\n                                            ): (\n                                                <button \n                                                    title=\"Adavnced Search\"\n                                                    className=\"ui basic icon button\" \n                                                    onClick={() => {\n                                                        setShowAdv(true);\n                                                        setShowCrit(false);\n                                                    }}\n                                                >\n                                                        <i aria-hidden=\"true\" className=\"angle down icon\" />\n                                                    {/* Advanced Search */}\n                                                </button>\n\n                                            )}\n                \n                                            <button \n                                                style={{ borderRadius: '0px 20px 20px 0px' }}\n                                                className=\"ui basic icon button\" \n                                                onClick={() => {clearSearch()}}\n                                            >\n                                                <i className=\"cancel icon\" />\n                                            </button>\n                                            {matches ? (\n                                                    <button \n                                                        className=\"ui circular button secondary\" \n                                                        style={{borderRadius: '10em', marginLeft: '0.5%'}} \n                                                        onClick={() => {\n                                                            searchQuery({\n                                                                variables: parseInput()\n                                                            });\n                                                        }}\n                                                    >\n                                                        Search \n                                                    </button>        \n                                            ): (   \n                                                <Button \n                                                    circular \n                                                    icon='search' \n                                                    color='secondary' \n                                                    onClick={() => {\n                                                        searchQuery({\n                                                            variables: parseInput()\n                                                        });\n                                                    }}\n                                                    style={{borderRadius: '10em', marginLeft: '0.5%'}}\n                                                />\n\n                                            )}\n                                            {matches ? (\n                                                <div style={{marginLeft: '1%'}}>\n                                                    <PrimaryButton \n                                                        content={\"Generate Route\"}\n                                                        onClick={() => {\n                                                            setShowCrit(true);\n                                                            setShowAdv(false);\n\n                                                        }}\n                                                    />\n                                                </div>\n                                            ): (\n                                                <Button \n                                                    circular \n                                                    icon='map pin' \n                                                    color='primary' \n                                                    style={{borderRadius: '10em', marginLeft: '0.5%'}}\n                                                    onClick={() => {\n                                                        setShowCrit(true);\n                                                        setShowAdv(false);\n                                                    }}\n                                                />\n                                            )}            \n                                        </div>\n                                    </div>\n                                </Grid.Column>\n                            </Grid>\n                            {showAdv && matches ? (\n                                \n                                <AdvancedSearchBar \n                                    venueType={venueType}\n                                    setVenueType={setVenueType}\n                                    itemSearch={itemSearch}\n                                    setItemSearch={setItemSearch}\n                                    setRatingStar={setRatingStar}\n                                    setVenueCondition={setVenueCondition}\n                                    searchTags={searchTags}\n                                    setSearchTags={setSearchTags}\n                                    setLocation={setLocation}\n                                    setRadiusCallback={(res) => {\n                                        setSearchRadius(res);\n                                    }}\n                                    setSelectingLocation={(value) => {\n                                        setSelectingLocation(value);\n                                    }}\n                                    ratingStar={ratingStar}\n                                    venueCondition={venueCondition}\n                                    radius={searchRadius}\n                                    locationType={locationType}\n                                    setLocationType={setLocationType}\n\n                                />\n                            ): (null)}\n                            {showAdv && matches === false ? (\n                                <Drawer\n                                anchor=\"bottom\"\n                                open={showAdv}\n                                onClose={toggleDrawer(false)}\n                              >\n                                  <AdvancedSearchBar \n                                        venueType={venueType}\n                                        setVenueType={setVenueType}\n                                        itemSearch={itemSearch}\n                                        setItemSearch={setItemSearch}\n                                        setRatingStar={setRatingStar}\n                                        setVenueCondition={setVenueCondition}\n                                        searchTags={searchTags}\n                                        setSearchTags={setSearchTags}\n                                        setLocation={setLocation}\n                                        setRadiusCallback={(res) => {\n                                            setSearchRadius(res);\n                                        }}\n                                        setSelectingLocation={(value) => {\n                                            setSelectingLocation(value);\n                                        }}\n                                        ratingStar={ratingStar}\n                                        venueCondition={venueCondition}\n                                        radius={searchRadius}\n                                        locationType={locationType}\n                                        setLocationType={setLocationType}\n                                    />\n                              </Drawer>\n                            ): (null)}\n                            {showCrit ? (\n            \n                                <MultiCrit\n                                    itemSearch={routeItemSearch}\n                                    setItemSearch={setRouteItemSearch}\n                                    rating={routeRating}\n                                    setRatingStar={setRouteRating}\n                                    searchTags={routeTags}\n                                    setSearchTags={setRouteTags}\n                                    location={routelocation}\n                                    setRadiusCallback={(res) => {\n                                        setRouteRadius(res);\n                                    }}\n                                    setSelRouteLocation={(value) => {\n                                        setSelRouteLocation(value);\n                                    }}\n                                    radius={routeRadius}\n                                    maxHourTime={maxHourTime}\n                                    venueCount={venueCount}\n                                    setVenueCount={setVenueCount}\n                                    setMaxHourTime={setMaxHourTime}\n                                    confirm={confirmGenRoute}\n                                    setStartTime={setStartTime}\n                                    setTimeAtVenue={setTimeAtVenue}\n                                    setShowCrit={setShowCrit}\n                                    routeVenues={routeVenues}\n                                    timeAtVenue={timeAtVenue}\n                                    routeLocationType={routeLocationType}\n                                    setRouteLocationType={setRouteLocationType}\n                                    setCalcCenter={setCalcCenter}\n                                    venueReq={selectVenuesFlag}\n\t\t\t\t\t                setVenueReq={setSelectVenuesFlag}\n                                    setRouteLocation={setRouteLocation}\n                                /> \n                            ): (null)}\n\n                        </div>\n                        {venueID ? (\n                            <MenuPane />\n                        ) : ( routeID ? \n                                (\n                                    <MapView \n                                        data={venueData} \n                                        selecting={selectingLocation}\n                                        selectLocationCallback={(res) => {\n                                            setLocation({\n                                                searchCenter: {\n                                                    longitude: res[0],\n                                                    latitude: res[1],\n                                                },\n                                                radius: location.radius,\n                                            })\n                                        }}\n                                        popUpFunc={displayPopupInfo}\n                                        routeData={\n                                            (routeIDResults.data !== undefined && routeIDResults.data !== null) ?\n                                            routeIDResults.data.getRouteByID : null\n                                        }\n                                        routeRadius={routeRadius}\n                                        selectingRoute={selRouteLocation}\n                                        setRouteLocationCallback={(res) =>{\n                                            setRouteLocation({\n                                                routeCenter: {\n                                                    longitude: res[0],\n                                                    latitude: res[1],\n                                                }\n                                            })\n                                        }}\n                                        routePlanner={routePlanner}\n                                        calcCenter={calcCenter}\n                                        showCalCenter={selectVenuesFlag}\n                                    />\n                                )                   \n                            : (\n                                <MapView \n                                    data={venueData} \n                                    selecting={selectingLocation}\n                                    selectLocationCallback={(res) => {\n                                        setLocation({\n                                            searchCenter: {\n                                                longitude: res[0],\n                                                latitude: res[1],\n                                            },\n                                            radius: location.radius,\n                                        })\n                                    }}\n                                    popUpFunc={displayPopupInfo}\n                                    routeData={genRouteData}\n                                    routeRadius={routeRadius}\n                                    selectingRoute={selRouteLocation}\n                                    setRouteLocationCallback={(res) =>{\n                                        setRouteLocation({\n                                            routeCenter: {\n                                                longitude: res[0],\n                                                latitude: res[1],\n                                            }\n                                        })\n                                    }}\n                                    routePlanner={routePlanner}\n                                    calcCenter={calcCenter}\n                                    showCalCenter={selectVenuesFlag}\n                                />\n                            )\n                        )}\n                    </Grid.Column>\n                    <Grid.Column computer={6} mobile={0}>\n                        <Drawer\n                            variant=\"temporary\"\n                            anchor=\"right\"\n                            open={mobileOpen}\n                            onClose={handleDrawerToggle}\n                            ModalProps={{\n                                // Better open performance on mobile.\n                                keepMounted: true, \n                            }}\n                            sx={{\n                                width: 400,\n                                flexShrink: 0,\n                                display: { xs: 'block', sm: 'block', md: 'none' },\n                            }}\n                        >\n                            <Box sx={{ mt: 15 }}>\n                                { mobileOpen && \n                                    <HomeSidebar {...sidebarProps} />\n                                }\n                            </Box>\n                        </Drawer>\n\n                        <Box\n                            sx={{\n                                mr: 5,\n                                maxWidth: 500,\n                                display: { xs: 'none', sm: 'none', md: 'block' },\n                            }}\n                        >   \n                            <HomeSidebar {...sidebarProps} />\n                        </Box>\n                    </Grid.Column>\n                </Grid>\n            </Box>\n\n            <AlertBar \n                show={show}\n                setShow={setShow}\n                message={alertMessage}\n                severity={severity}\n            />\n\n        </ThemeProvider>\n    );\n}\n\nexport default Home;","import * as React from \"react\"\nimport { Form } from \"semantic-ui-react\";\nimport PropTypes from 'prop-types';\n\n\nexport const UsernameInput = ({\n  username, setUsername\n}) => {\n    return (\n        <Form.Input \n            fluid \n            icon='user' \n            iconPosition='left' \n            placeholder='Username' \n            required='required'\n            onChange={e => setUsername(e.target.value)}\n            value={username}\n            data-cy='username-input'\n        />\n    );\n};\n\n\nexport const EmailInput = ({\n  email, setEmail\n}) => {\n    return (\n        <Form.Input \n            fluid \n            icon='envelope' \n            iconPosition='left' \n            placeholder='Email' \n            required='required'\n            onChange={e => setEmail(e.target.value)}\n            value={email}\n            data-cy='email-input'\n        />\n    );\n};\n\n\nexport const PasswordInput = ({\n  password, setPassword\n}) => {\n    return (\n        <Form.Input \n            fluid \n            icon='lock' \n            iconPosition='left' \n            placeholder='Password' \n            required=\"required\"\n            type='password'\n            onChange={e => setPassword(e.target.value)}\n            value={password}\n            data-cy='password-input'\n        />\n    );\n};\n\n\nEmailInput.propTypes = {\n  email: PropTypes.string,\n  setEmail: PropTypes.func,\n};\n\n\nUsernameInput.propTypes = {\n  username: PropTypes.string,\n  setUsername: PropTypes.func,\n};\n\n\nPasswordInput.propTypes = {\n  password: PropTypes.string,\n  setPassword: PropTypes.func,\n};","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n    mutation Login($credentials: LoginInput!) {\n        login(credentials: $credentials) {\n            token\n            userType\n            errors {\n                message\n            }\n        }\n    }\n`;","import React, { useState } from 'react';\nimport { \n    Dimmer,\n    Loader,\n } from 'semantic-ui-react';\nimport 'semantic-ui-less/semantic.less';\nimport { useMutation } from '@apollo/client';\nimport { UsernameInput, PasswordInput } from '../AuthInput/AuthInput';\nimport { Form, Grid, Message, Segment } from 'semantic-ui-react';\nimport { useHistory  } from 'react-router-dom';\nimport { LOGIN } from '../../gql/auth/login.gql';\nimport { UserTypes } from '../../constants/userTypes';\nimport PrimaryButton from \"../../shared-components/primary-button/PrimaryButton\";\nimport '../../styles/auth.css';\n\n/** \n * Renders a login form for all users\n * to authenticate with the platform.\n * */\nconst LoginForm = () => {\n    let hideError = true;\n\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n\tconst [ login, {loading, error, data} ] = useMutation(LOGIN);\n\n    const history = useHistory();\n\n    const handleLogin = async () => {\n        hideError = true;        \n        if(!username || !password)\n            return;\n\n        // try {\n        const res = await login({\n            variables: {\n                credentials: {\n                    username,\n                    password\n                }\n            }\n        })\n    };\n\n    if (loading) \n        return (\n            <Dimmer active>\n                <Loader />\n            </Dimmer>\n        )\n\n    if (error)\n        hideError = false;\n\n\n    // display error ?\n    if (data && data.login.errors)\n        hideError = false;\n\n    // login success\n    if (data && data.login.token) {\n\n        // stash cookie for ws connection\n        localStorage.setItem('sesh', data.login.token);\n\n        // make websocket connect with\n        // hard redirect\n        switch(data.login.userType) {\n            case UserTypes.ADMIN:\n                history.push('/admin');\n                break;\n            case UserTypes.BUSINESS:\n                window.location = '/business';\n                break;\n            default:\n                window.location = '/';\n        }\n    }\n\n\n    return (\n        <Grid \n            textAlign='center' \n            style={{ height: '100vh' }} \n            verticalAlign='middle'\n        >\n            <Grid.Column style={{ maxWidth: 450 }}>\n                <h1 className=\"header\">\n                    Welcome to First Round!\n                </h1>\n                <Form size='large' verticalAlign='middle'>\n                    <Segment raised>\n                        <UsernameInput\n                            username={username}\n                            setUsername={setUsername}\n                        />\n                        <PasswordInput \n                            password={password}\n                            setPassword={setPassword}\n                        />\n                        <PrimaryButton\n                            content={'Login'}\n                            onClick={handleLogin}\n                            testReference='login-button-form' \n                        />\n                    </Segment>\n                </Form>\n                <Message \n                    hidden={hideError}\n                    error\n                    header='Login Failed'\n                    content='Incorrect username or password'\n                />\n                <Message>\n                    Don't have an account? \n                    <a \n                        href=\"/register\" \n                        className=\"signupLink\"\n                        data-cy=\"register-link\"\n                    >\n                        Register\n                    </a>\n                </Message>\n                <Message>\n                    <a href='/forgot' className='signupLink'>\n                        Forgot Password?\n                    </a>\n                </Message>\n            </Grid.Column>\n        </ Grid>\n    );\n};\n\nexport default LoginForm;","import React from 'react'\nimport 'semantic-ui-less/semantic.less';\nimport propTypes from 'prop-types';\nimport { NavBar } from '../components/NavBar/NavBar';\nimport LoginForm from '../components/LoginForm/LoginForm'\n\nconst Login = ({userType}) => { \n  \n  return (\n    <>\n      <NavBar/>\n      <LoginForm userType={userType}/>    \n    </>\n  );\n}\n\n\nLogin.propTypes = {\n  userType: propTypes.string\n}\n\nexport default Login;","import { gql } from '@apollo/client';\n\nexport const RegisterCustomer = gql`\n\tmutation RegisterCustomer($data: RegisterInput!) {\n\t\tregisterCustomer(data: $data){\n\t\t\ttoken\n            errors {\n                message\n            }\n\t}\n}`;\n\n\nexport const RegisterBusiness = gql`\n    mutation RegisterBusiness($data: RegisterInput!) {\n        registerBusiness(data: $data){\n            token\n            errors {\n                message\n            }\n    }\n}`;\n\n\nexport const RegisterQuery = { RegisterCustomer, RegisterBusiness };","import { useMutation } from '@apollo/client';\nimport React, { useState } from 'react';\nimport { useHistory  } from 'react-router-dom';\nimport { \n    Form, \n    Grid, \n    Message, \n    Segment,\n    Dimmer,\n    Loader \n} from 'semantic-ui-react';\nimport { \n    RegisterBusiness, \n    RegisterCustomer \n} from '../../gql/auth/register.gql';\nimport { UserTypes } from '../../constants/userTypes';\nimport { \n    UsernameInput, \n    PasswordInput, \n    EmailInput \n} from '../AuthInput/AuthInput';\nimport PrimaryButton from \"../../shared-components/primary-button/PrimaryButton\";\nimport propTypes from 'prop-types';\nimport '../../styles/auth.css';\n\n/**\n * Displays Registeration Form according to userType\n * \n * @param userType  - Takes in userType to handle different logic\n * \t\t\t  \t\t- for registration.\n * \n */\n\nexport const RegistrationForm = ({ userType }) => {\n\tconst RegisterQuery = (userType === UserTypes.CUSTOMER) \n\t\t\t\t\t\t\t? RegisterCustomer \n\t\t\t\t\t\t\t: RegisterBusiness;\n\tconst queryName = (userType === UserTypes.CUSTOMER)\n\t\t\t\t\t\t? 'registerCustomer'\n\t\t\t\t\t\t: 'registerBusiness';\n\n    const redirectRef = (userType === UserTypes.CUSTOMER)\n                        ? '/'\n                        : '/business';\n\n\n\tconst [username, setUsername] = useState('');\n\tconst [email, setEmail] = useState('');\n\tconst [password, setPassword] = useState('');\n\tconst [ register, {loading, error, data} ] = useMutation(RegisterQuery);\n    const history = useHistory();\n    let hideError = true;\n\n\n\tconst handleRegister = async () => {\n\t\tif (!username || !email || !password)\n\t\t\treturn;\n\n\t\ttry {\n\t\t\tconst res = await register({\n\t\t\t\tvariables: {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tusername,\n\t\t\t\t\t\temail,\n\t\t\t\t\t\tpassword\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tif (res.data[queryName].token) {\n                localStorage.setItem(\n                    'sesh', res.data[queryName].token\n                );\n                // force ws to connect\n\t\t\t\twindow.location = redirectRef;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t} catch (error) {\n            hideError = false;\n\t\t}\n\t};\n\n    if (loading) \n        return (\n            <Dimmer active>\n                <Loader />\n            </Dimmer>\n        )\n\n\n    if (data && data[queryName].errors) \n        hideError = false;\n\n\n\treturn (\n\t\t<Grid \n\t\t\ttextAlign='center' \n\t\t\tstyle={{ height: '100vh' }} \n\t\t\tverticalAlign='middle'\n\t\t>\n\t\t\t<Grid.Column style={{ maxWidth: 450 }}>\n\t\t\t\t<h1 className=\"header\">\n\t\t\t\t\tWelcome to First Round!\n\t\t\t\t</h1>\n\t\t\t\t<Form size='large' verticalAlign='middle'>\n\t\t\t\t\t<Segment raised>\n\t\t\t\t\t\t<UsernameInput\n\t\t\t\t\t\t\tusername={username}\n\t\t\t\t\t\t\tsetUsername={setUsername}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<EmailInput\n\t\t\t\t\t\t\temail={email}\n\t\t\t\t\t\t\tsetEmail={setEmail}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<PasswordInput \n\t\t\t\t\t\t\tpassword={password}\n\t\t\t\t\t\t\tsetPassword={setPassword}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<PrimaryButton \n\t\t\t\t\t\t\tcontent={'Register'}\n\t\t\t\t\t\t\tonClick={handleRegister}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Segment>\n\t\t\t\t</Form>\n                <Message \n                    hidden={hideError}\n                    error\n                    header='Register Failed'\n                    content='Email or username taken'\n                />\n\t\t\t\t<Message>\n\t\t\t\t\tAlready have an account? \n\t\t\t\t\t<a href=\"/login\" className=\"signupLink\">\n\t\t\t\t\t\tLogin\n\t\t\t\t\t</a>\n\t\t\t\t</Message>\n\t\t\t</Grid.Column>\n\t\t</ Grid>\n\t);\n};\n\n\nRegistrationForm.propTypes = {\n\tuserType: propTypes.string.isRequired\n};\n\n\nexport default RegistrationForm;","import * as React from \"react\";\nimport PropTypes from 'prop-types';\nimport { NavBar } from \"../components/NavBar/NavBar\";\nimport { RegistrationForm } from \"../components/RegisterForm/RegistrationForm\";\n\nconst Register = ({ userType }) => {\n\n    return (\n        <>\n            <NavBar />\n            <RegistrationForm userType={userType} />\n        </>\n    );\n}\n\n\nRegister.propTypes = {\n    userType: PropTypes.string.isRequired\n}\n\nexport default Register;","import { gql } from '@apollo/client';\n\n\nexport const ForgotPassword = gql`\n  query ForgotPassword($email: String!) {\n    forgotPassword(email: $email)\n  }\n`;\n\n\nexport const ResetAccount = gql`\n  mutation ResetAccount($token: String!, $password: String!) {\n    resetAccount(token: $token, password: $password)\n  }\n`;\n\n\nexport const AccountResets = { ForgotPassword, ResetAccount };\n\n","import React from 'react'\nimport { \n    Grid, \n    Form, \n    Segment,\n    Dimmer,\n    Loader\n} from 'semantic-ui-react'\nimport { NavBar } from '../components/NavBar/NavBar';\nimport { EmailInput } from '../components/AuthInput/AuthInput';\nimport { ForgotPassword } from '../gql/auth/reset.gql';\nimport { useLazyQuery } from '@apollo/client';\nimport { useHistory } from 'react-router';\n\nimport 'semantic-ui-less/semantic.less';\n\nconst Forgot = () => {\n\n    const [email, setEmail] = React.useState('');\n    const history = useHistory();\n    \n\n    const [ forgotPassword, { loading, error }] = useLazyQuery(ForgotPassword, {\n        variables: { \n            email \n        },\n        onCompleted: (data) => {\n            if (data.forgotPassword) {\n                history.push('/reset');\n                return;\n            }\n\n            console.log(\"error\");\n        }\n    }); \n\n    if (loading) {\n        return (\n            <Dimmer active>\n                <Loader size='massive' />\n            </Dimmer>\n        )\n    }\n\n    if (error) {\n        alert(\"service unavailable\");\n        history.push('/login');\n    }\n    \n\n    return (\n        <>\n            <NavBar />\n            <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n            <Grid.Column style={{ maxWidth: 450}} className=\"colClass circular\">\n            <Form size='large'>\n                <Segment stacked>\n                    Enter Email\n                    <EmailInput email={email} setEmail={setEmail} />\n                    <button \n                        type=\"submit\"\n                        className=\"buttonLogin\" \n                        onClick={forgotPassword}\n                    >\n                    Next\n                    </button>\n                </Segment>\n                </Form>\n            </Grid.Column>\n            </ Grid>\n        </>\n    );\n}\n\nexport default Forgot;","import { gql } from '@apollo/client';\n\nexport const GET_REQUESTS_BY_STATUS = gql`\n    query requestsByStatus($status: RequestStates!) {\n        getRequestsByStatus(status: $status) {\n            _id\n            venue {\n              name\n            }\n            claimant {\n              username\n            }\n            verificationDocuments\n        }\n    }\n`;","import { gql } from '@apollo/client';\n\nexport const UPDATE_REQUEST_STATUS = gql`\n    mutation updateRequestStatus($decision: RequestStates!, $requestID: ID!, $comment: String) {\n        processRequest(decision: $decision, requestID: $requestID, comment: $comment) \n    }\n`","import { gql } from '@apollo/client';\n\nexport const GET_USERS_COUNT = gql`\n    query getUsersCount {\n        getUsersCount {\n            count\n        }\n    }\n`;\n\nexport const GET_BUSINESS_COUNT = gql`\n    query getBusinessCount {\n        getBusinessCount {\n            count\n        }\n    }\n`;\n","import React, { useState } from 'react';\nimport {\n\tButton,\n\tModal,\n    TextArea,\n    Form,\n    Icon,\n} from 'semantic-ui-react'\nimport '../../styles/auth.css';\n\nexport const RejectVenueRequestModal = (props) => {\n    const [open, setOpen] = useState(false);\n    const [comment, setComment] = useState(\"\");\n    const { completeRejection } = props;\n\n    return (\n        <Modal\n            onClose={() => {\n                setComment(\"\");\n                setOpen(false);\n            }}\n            onOpen={() => {\n                setComment(\"\");\n                setOpen(true);\n            }}\n            open={open}\n            trigger={<Button negative>Reject</Button>}\n        >\n            <Modal.Header><Icon name='comment outline' />Provide feedback</Modal.Header>\n            <Modal.Content>\n                <Form>\n                    <TextArea \n                        placeholder=\"Your request was rejected because...\"\n                        value={comment}\n                        onChange={(event) => {\n                            setComment(event.target.value);\n                        }}\n                    />\n                </Form>\n            </Modal.Content>\n            <Modal.Actions>\n                <Button\n                    onClick={() => {\n                        setComment(\"\");\n                        setOpen(false);\n                    }}\n                >\n                    Abort rejection\n                </Button>\n\n                <Button\n                    onClick={() => {\n                        completeRejection(comment);\n                        setComment(\"\");\n                        setOpen(false);\n                    }}\n                >\n                    Submit rejection\n                </Button>\n            </Modal.Actions>\n        </Modal>\n    )\n}","import React, { useState } from 'react';\nimport {\n\tButton,\n\tHeader,\n\tIcon,\n\tSegment,\n\tGrid,\n\tCard,\n\tLabel,\n    Container,\n} from 'semantic-ui-react'\nimport { RejectVenueRequestModal } from './RejectVenueRequestModal';\nimport '../../styles/auth.css';\n\n// JavaScript's `%` operator is for remainder, not modulo\nconst mod = (n, m) => {\n\treturn ((n % m) + m) % m;\n};\n\n/**\n * Displays a carousel of pending\n * venue requests for all businesses\n * making applications across the platform.\n * \n * @param props  \n */\nexport const AdminDashboardCarousel = (props) => {\n\tconst [currentBusiness, setCurrentBusiness] = useState(0);\n    const { businessList, updateCallback } = props;\n\n    const approveRequest = () => {\n        // this is a deeply hacky workaround, but I need to think more carefully\n        // about how to handle all the delays, etc.\n        if (businessList.length > 1) {\n            setCurrentBusiness(mod(currentBusiness, businessList.length - 1));\n        } else {\n            setCurrentBusiness(0);\n        }\n        updateCallback({\n            variables: {\n                decision: \"APPROVED\",\n                requestID: businessList[currentBusiness]._id,\n            },\n        });\n    }\n\n    const rejectRequest = (comment) => {\n        if (businessList.length > 1) {\n            setCurrentBusiness(mod(currentBusiness, businessList.length - 1));\n        } else {\n            setCurrentBusiness(0);\n        }\n        updateCallback({\n            variables : {\n                decision: \"REJECTED\",\n                requestID: businessList[currentBusiness]._id,\n                comment,\n            },\n        });\n    }\n\n    // Sorry @Angus, breaking this into more components (great idea!) would\n    // be really annoying\n    if (businessList.length === 0) {\n        // setCurrentBusiness(0);\n        return (\n            <Container text>\n                <Header>You have processed all requests!</Header>\n                <p>\n                    Reload the page to see if there are new venue requests.\n                </p>\n            </Container>\n        );\n    }\n \n\treturn (\n\t\t<Grid columns='equal'>\n\t\t\t<Grid.Row>\n\t\t\t\t<Grid.Column verticalAlign='middle'>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tsize='massive'\n\t\t\t\t\t\tcircular\n\t\t\t\t\t\tfloated='right'\n\t\t\t\t\t\ticon={<Icon name='chevron left' />}\n\t\t\t\t\t\tonClick={() => setCurrentBusiness(mod(currentBusiness - 1, businessList.length))}\n\t\t\t\t\t/>\n\t\t\t\t</Grid.Column>\n\n\t\t\t\t<Grid.Column width={8}>\n\t\t\t\t\t<Card fluid centered={true}>\n\t\t\t\t\t\t<Card.Content>\n\t\t\t\t\t\t\t<Card.Header>\n\t\t\t\t\t\t\t\tValidate Business\n\t\t\t\t\t\t\t</Card.Header>\n\t\t\t\t\t\t\t<Segment.Group>\n\t\t\t\t\t\t\t\t<Segment>\n\t\t\t\t\t\t\t\t\t<Label align='left' attached='top'><Icon name='user' /> Claimant</Label>\n\t\t\t\t\t\t\t\t\t<div align='left'>\n\t\t\t\t\t\t\t\t\t\t{businessList[currentBusiness].claimant.username}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Segment>\n\t\t\t\t\t\t\t\t<Segment >\n\t\t\t\t\t\t\t\t\t<Label align='left' attached='top'><Icon name='map marker alternate' />Venue</Label>\n\t\t\t\t\t\t\t\t\t<div align='left'>\n\t\t\t\t\t\t\t\t\t\t{businessList[currentBusiness].venue.name}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Segment>\n\t\t\t\t\t\t\t\t<Segment>\n                                    <Label align='left' attached='top'><Icon name='file' />Verification Documents</Label>\n                                    <div align='left'>\n                                        <a href={businessList[currentBusiness].verificationDocuments} target='_blank' rel='noopener noreferrer'>\n                                            <Icon.Group size='massive'>\n                                                <Icon name='file pdf outline' />\n                                                <Icon corner size='tiny' name='download' />\n                                            </Icon.Group>\n                                            <br />\n                                            Click to download\n                                        </a>\n                                    </div>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t</Segment>\n                                <Segment>\n                                    <Button.Group fluid>\n\t\t\t\t\t\t\t\t\t\t<RejectVenueRequestModal \n                                            completeRejection={rejectRequest}\n                                        />\n\t\t\t\t\t\t\t\t\t\t<Button.Or />\n\t\t\t\t\t\t\t\t\t\t<Button \n                                            onClick={approveRequest}\n                                            positive\n                                        >\n                                            Approve\n                                        </Button>\n\t\t\t\t\t\t\t\t\t</Button.Group>\n                                </Segment>\n\t\t\t\t\t\t\t</Segment.Group>\n\t\t\t\t\t\t</Card.Content>\n\t\t\t\t\t</Card>\n\t\t\t\t</Grid.Column>\n\t\t\t\t\n\t\t\t\t<Grid.Column verticalAlign='middle'>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tsize='massive'\n\t\t\t\t\t\tcircular\n\t\t\t\t\t\tfloated='left'\n\t\t\t\t\t\ticon={<Icon name='chevron right' />}\n\t\t\t\t\t\tonClick={() => setCurrentBusiness(mod(currentBusiness + 1, businessList.length))}\n\t\t\t\t\t/>\n\t\t\t\t</Grid.Column>\n\t\t\t</Grid.Row>\n\t\t</Grid>\n\t);\n};\n","import { useQuery, useMutation } from '@apollo/client';\nimport React from 'react';\nimport {\n\tStatistic,\n\tHeader,\n\tGrid,\n\tLoader,\n} from 'semantic-ui-react';\n// handle mobile || small screens\nimport Box from '@mui/material/Box';\nimport { GET_REQUESTS_BY_STATUS } from '../../gql/venueRequests/getRequestsByStatus.gql';\nimport { UPDATE_REQUEST_STATUS } from '../../gql/venueRequests/updateRequestStatus.gql';\nimport { GET_USERS_COUNT, GET_BUSINESS_COUNT } from './getCounts.gql';\nimport { AdminDashboardCarousel } from './AdminDashboardCarousel';\nimport '../../styles/auth.css';\n\nexport const AdminDashboardComponent = () => {\n\tconst userResults = useQuery(GET_USERS_COUNT);\n\tconst businessResults = useQuery(GET_BUSINESS_COUNT);\n\tconst { loading, error, data } = useQuery(GET_REQUESTS_BY_STATUS, {\n\t\tvariables: {\n\t\t\tstatus: \"PENDING\",\n\t\t},\n\t});\n\n\t// Mutation for approving requests\n\tconst [updateRequest, /*updateResults*/] = useMutation(UPDATE_REQUEST_STATUS, {\n\t\trefetchQueries: [\n\t\t\t{\n\t\t\t\tquery: GET_REQUESTS_BY_STATUS,\n\t\t\t\tvariables: {\n\t\t\t\t\tstatus: \"PENDING\",\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t});\n\n\t\n\tlet mainDisplay;\n\tlet pendingStats;\n\tif (loading || error) {\n\t\tmainDisplay = <Loader active inline='centered' />;\n\t\tpendingStats = <Loader active inline='centered' />;\n\t} else {\n\t\tmainDisplay = <AdminDashboardCarousel \n\t\t\tbusinessList={data.getRequestsByStatus} \n\t\t\tupdateCallback={updateRequest}\n\t\t/>;\n\t\tpendingStats = data.getRequestsByStatus.length;\n\t}\n\n\tlet userStats;\n\tif (userResults.loading || userResults.error) {\n\t\tuserStats = <Loader active inline='centered' />;\n\t} else {\n\t\tconsole.log(userResults);\n\t\tuserStats = userResults.data.getUsersCount.count;\n\t}\n\n\tlet businessStats;\n\tif (businessResults.loading || businessResults.error) {\n\t\tbusinessStats = <Loader active inline='centered' />;\n\t} else {\n\t\tconsole.log(userResults);\n\t\tbusinessStats = businessResults.data.getBusinessCount.count;\n\t}\n\t\n\treturn (\n\t\t<Box sx={{minWidth: 530, overflowX: 'scroll' }} >\n\t\t\t<Header textAlign='center' >\n\t\t\t\tPlatform overview\n\t\t\t</Header>\n\t\t\t<Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='top'>\n\t\t\t\t<Grid.Column style={{ maxWidth: '95vw' }} className=\"colClass circular\">\n\t\t\t\t\t<div className=\"ui placeholder segment\" textAlign='center'>\n\t\t\t\t\t\t<Statistic.Group widths='three'textAlign='center'>\n\t\t\t\t\t\t\t<Statistic>\n\t\t\t\t\t\t\t\t<Statistic.Label>Pending Requests</Statistic.Label>\n\t\t\t\t\t\t\t\t<Statistic.Value>\n\t\t\t\t\t\t\t\t\t{pendingStats}\n\t\t\t\t\t\t\t\t</Statistic.Value>\n\t\t\t\t\t\t\t</Statistic>\n\n\t\t\t\t\t\t\t<Statistic>\n\t\t\t\t\t\t\t\t<Statistic.Label>Businesses</Statistic.Label>\n\t\t\t\t\t\t\t\t<Statistic.Value>\n\t\t\t\t\t\t\t\t\t{businessStats}\n\t\t\t\t\t\t\t\t</Statistic.Value>\n\t\t\t\t\t\t\t</Statistic>\n\n\t\t\t\t\t\t\t<Statistic>\n\t\t\t\t\t\t\t\t<Statistic.Label>Users</Statistic.Label>\n\t\t\t\t\t\t\t\t<Statistic.Value>\n\t\t\t\t\t\t\t\t\t{userStats}\n\t\t\t\t\t\t\t\t</Statistic.Value>\n\t\t\t\t\t\t\t</Statistic>\n\t\t\t\t\t\t</Statistic.Group>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{mainDisplay}\n\t\t\t\t\t\n\t\t\t\t</Grid.Column>\n\t\t\t</ Grid>\n\t\t</Box>\n\t);\n};\n\nexport default AdminDashboardComponent;\n","import * as React from \"react\";\nimport { NavBar } from \"../components/NavBar/NavBar\";\nimport { AdminDashboardComponent } from \"../components/AdminDashboardComponent/AdminDashboardComponent\";\n\n/**\n * This will mount the\n * different types of registration\n * forms: user, business, and\n * resolve the respective \n * gql quires for each \n */\n\nexport const AdminDashboard = () => (\n\n    // TODO :: Conditionally render the\n    // different registration forms\n    <>\n        <NavBar />\n        <AdminDashboardComponent />\n    </>\n);\n\n\nexport default AdminDashboard;","import React from 'react';\nimport AppBar from '@mui/material/AppBar';\n\nimport { NavBar } from './NavBar';\n\n/**\n * \n * @returns a nav bar that\n * wraps the regular navbar\n * using mui's AppBar\n * component to handel the\n * z-index expansion\n * required to properly\n * render the business dashboard.\n */\nconst BusinessNav = () => {\n    return (\n        <AppBar \n            enableColorOnDark\n            position=\"fixed\" \n            sx={{ \n                zIndex: (theme) => theme.zIndex.drawer + 1,\n                // minHeight: 80,\n                backgroundColor: 'transparent',\n            }}\n        >\n            <NavBar />\n        </AppBar>\n    )\n};\n\n\n\nexport default BusinessNav;","import { gql } from '@apollo/client';\n\nexport const GET_MY_PENDING_REQUESTS = gql`\n    query getMyPendingRequests {\n        getMyRequestsByStatus (status: \"PENDING\") {\n            _id\n            venue {\n                _id\n                name\n            }\n        }\n    }\n`;\n\nexport const GET_MY_REJECTED_REQUESTS = gql`\n    query getMyRejectedRequests {\n        getMyRequestsByStatus (status: \"REJECTED\") {\n            _id\n            venue {\n                _id\n                name\n            }\n            reasonForRejection\n            verificationDocuments\n        }\n    }\n`;","import { gql } from '@apollo/client';\n\nexport const GET_ALL_VENUES = gql`\n    query getVenueData {\n        getAllVenues {\n            _id\n            name\n        }\n    }\n`;","import React, { useEffect } from \"react\";\nimport { uppy } from './uppyConfig';\nimport { useMutation, gql } from \"@apollo/client\";\nimport Zone from './Zone';\n\nconst UPLOAD_FILE = gql`\n    mutation verificationUpload($file: Upload!, $venueID: String!) {\n        verificationUpload(file: $file, venueID: $venueID)\n    }\n`;\n\n/**\n * verification document upload component.\n*/\nconst VerificationUpload = (props) => {\n    const [uploadFile] = useMutation(UPLOAD_FILE, {\n        onCompleted: (data) => {\n            console.log('Done with', data)\n        }\n    });\n\n    const initUpload = async ( file, venueID ) => {\n        if (venueID !== \"\") {\n            await uploadFile({ variables: { file, venueID } })\n                .then(() => {\n                    console.log('File uploaded');\n                    uppy.reset();\n                    props.refetchQuery();\n                }).catch(err => {\n                    console.error(err);\n                });\n        }\n    }\n\n    useEffect(() => {\n        const { venueID } = props;\n        const handler = () => {\n            uppy.getFiles().forEach(file => {\n                initUpload(file.data, venueID);\n            });\n        };\n        uppy.on('upload', handler);\n\n        return () => {\n            uppy.off('upload', handler);\n        };\n    }, [props.venueID]);\n\n    useEffect(() => {\n        const handler = (file) => {\n            props.setShowCallback(true);\n            props.setFileCallback(file.id);\n        }\n\n        uppy.on('file-added', handler);\n        \n        return () => {\n            uppy.off('file-added', handler);\n        };\n    }, [])\n\n    useEffect(() => {\n        const handler = () => {\n            props.setFileCallback(false);\n        }\n\n        uppy.on('file-removed', handler);\n        \n        return () => {\n            uppy.off('file-removed', handler);\n        };\n    }, [])\n\n    return (\n        <Zone uppy={uppy}/>\n    )\n}\n\nexport default VerificationUpload;","import React, { useState } from 'react';\nimport { useQuery, NetworkStatus } from '@apollo/client';\nimport {\n\tButton,\n\t// Modal,\n    Icon,\n    Segment,\n    Label,\n    Loader,\n    Dropdown,\n} from 'semantic-ui-react'\nimport { uppy } from '../FileUpload/uppyConfig';\nimport PrimaryButton from '../../shared-components/primary-button/PrimaryButton';\nimport { GET_ALL_VENUES } from './getAllVenues.gql';\nimport VerificationUpload from '../FileUpload/VerificationUpload';\n\nimport Modal from '@mui/material/Modal';\nimport Box from '@mui/material/Box';\n\nconst queryToDropdownOptions = (venuesFound) => {\n    let results = [];\n    for (let venue of venuesFound) {\n        results.push({\n            key: venue._id,\n            value: venue._id,\n            text: venue.name,\n        });\n    }\n    return results;\n}\n\n\nconst style = {\n    transform: 'translate(-50%, -50%)',\n    boxShadow: 24,\n    p: 4,\n    bgcolor: 'background.paper',\n    position: 'fixed',\n    minWidth: '70%',\n    maxWidth: '80%',\n    top: '50%',\n    left: '50%',\n};\n\n\nexport const AddVenueModal = (props) => {\n    const { loading, error, data, refetch, networkStatus } = useQuery(GET_ALL_VENUES,\n        {\n            notifyOnNetworkStatusChange: true,\n        },\n    );\n    const [open, setOpen] = useState(false);\n    const [showUpload, setShowUpload] = useState(false);\n    const [venueID, setVenueID] = useState('');\n    const [fileID, setFileID] = useState('');\n\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    let mainDisplay;\n    if (loading || error || (networkStatus === NetworkStatus.refetch)) {\n        mainDisplay = <Loader active inline='centered' />;\n    } else {\n        mainDisplay = (\n            <Box sx={style}>\n                <Segment textAlign='center'>\n                    <Label attached='top'>Step 1: Select venue</Label>\n                    <Dropdown\n                        fluid\n                        placeholder=\"Search for a venue\"\n                        search\n                        selection\n                        clearable\n                        options={queryToDropdownOptions(data.getAllVenues)}\n                        onChange={(event, { value }) => {\n                            setVenueID(value);\n                        }}\n                    />\n                </Segment>\n                \n                <Segment hidden={venueID === ''} textAlign='center'>\n                    <Label attached='top'>Step 2: Upload verification documents</Label>\n                    <VerificationUpload \n                        venueID={venueID}\n                        setShowCallback={setShowUpload}\n                        setFileCallback={setFileID}\n                        refetchQuery={props.startRefetchPending}\n                    />\n                    <br />\n                </Segment>\n\n                <Segment hidden={!showUpload} textAlign='center'>\n                    <PrimaryButton content=\"Upload\" onClick={() => {\n                            uppy.upload();\n                            setVenueID('');\n                            setFileID('');\n                            setShowUpload(false);\n                            setOpen(false);\n                        }} \n                    />\n                </Segment>\n            </Box>\n        );\n    }\n\n\n    return (\n        <>\n            <Modal\n                onClose={() => {\n                    uppy.removeFile(fileID);\n                    setVenueID('');\n                    setFileID('');\n                    setOpen(false);\n                }}\n                onOpen={() => {\n                    refetch();\n                    setOpen(true);\n                }}\n                open={open}\n            >\n                {mainDisplay}\n            </Modal>\n            <Button onClick={handleOpen}>\n                <Icon circular name='add' />\n                Add Venue\n            </Button>\n        </>\n    );\n}","import { gql } from '@apollo/client';\n\nexport const GET_MY_VENUES = gql`\n    query getMyVenues {\n        getVenuesForSelf {\n            _id\n            name\n            openingHours {\n                hours {\n                    day\n                    open {\n                        hours\n                        minutes\n                    }\n                    close {\n                        hours\n                        minutes\n                    }\n                }\n            }\n\n            menu {\n                _id\n                name\n                price\n                itemKind {\n                    category\n                    type\n                }\n                verified\n                uploader\n                promotion\n                special\n                specialExpiry {\n                    specialStart\n                    specialEnd\n                }\n                specialHours {\n                    hours {\n                    day\n                    open {\n                        hours\n                        minutes\n                    }\n                    close {\n                        hours\n                        minutes\n                    }\n                }\n            }\n\n\n\n        }\n    }\n}`;","import { gql } from '@apollo/client';\n\nexport const AddPromotion = gql `\n    mutation AddPromotionMutation($promotionInput: PromotionInput!, $venueID: String!) {\n        addPromotion(promotionInput: $promotionInput, venueID: $venueID) {\n        errors\n        success\n        }\n    }\n`;\n\n","import React from 'react';\nimport TextField from '@mui/material/TextField';\nimport DateRangePicker from '@mui/lab/DateRangePicker';\n\nconst DateForm = ({\n    dateValue, setDateValue,\n}) => {\n\n    return (\n        <>\n            <DateRangePicker\n                disablePast\n                calendars={1}\n                value={dateValue}\n                onChange={(newValue) => {\n                    setDateValue(newValue);\n                }}\n                renderInput={(startProps, endProps) => (\n                    <React.Fragment>\n                    <TextField {...startProps} />\n                    <TextField {...endProps} />\n                    </React.Fragment>\n                )}\n            />\n            <br />\n        </>\n    )\n};\n\n\n\nexport default DateForm;","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport Slider from '@mui/material/Slider';\nimport FormControl from '@mui/material/FormControl';\nimport Slide from '@mui/material/Slide'; \nimport DateAdapter from '@date-io/date-fns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport { AddPromotion } from './addPromotion.gql';\nimport Typography from '@mui/material/Typography';\n\n\nimport DateForm from './DateForm';\nimport 'semantic-ui-less/semantic.less';\nimport { GET_MY_VENUES } from './getMyVenues.gql';\n\n\n/**\n * \n * @param {*} param0  \n */\nconst AddPromoForm = ({\n    venueID, \n    setOpen, \n    checkedItems,\n    setShow,\n    setAlertMessage,\n    setSeverity,\n    refetchVenues\n}) => {\n\n    const [percentage, setPercentage ] = useState(0);\n    const [points, setPoints ] = useState(0);\n    const [dateValue, setDateValue] = useState([new Date(), new Date()]);\n\n    // form error states\n    const [percentageError, setPercentageError] = useState(false);\n    const [pointsError, setPointsError] = useState(false);\n    const [dateError, setDateError] = useState(false);\n\n\n    const handleClose = () => {\n        setPercentage(0.0);\n        setPoints(0.0);\n        setDateValue([new Date(), new Date()]);\n        setOpen(false);\n    };\n\n    const [ addPromotion ] = useMutation(AddPromotion, {\n        onCompleted: (res) => {\n            console.log('[>>] Upload Menu Item Done', res);\n            \n            if (res.errors) {\n                setAlertMessage('Failed to Start Promotion, please try again');\n                setSeverity('error');\n                setShow(true);\n                handleClose();\n            } else {\n                setAlertMessage('Promotion Started!');\n                setSeverity('success');\n                setShow(true);\n                handleClose();\n            }\n        },\n        refetchQueries: [GET_MY_VENUES]\n    });\n   \n    const handleApplyPromotion = () => {\n        setPercentageError(false);\n        setPointsError(false);\n        setDateError(false);\n\n        if (!percentage || !points || !dateValue) {\n            if (!percentage) \n                setPercentageError(true);\n            if (!points) \n                setPointsError(true);\n            if (!dateValue) \n                setDateError(true);\n\n            setAlertMessage('Please fill out all fields');\n            setSeverity('error');\n            setShow(true);\n            return;\n        }\n\n        if (checkedItems.length === 0 ) {\n            setAlertMessage('Please select menu items!');\n            setSeverity('error');\n            setShow(true);\n            return;\n        }\n\n        if (percentage < 1 || percentage > 100) {\n            setPercentageError(true);\n            setAlertMessage('Percentage must be between 1-100');\n            setSeverity('error');\n            setShow(true);\n            return;\n        }\n\n        if (points < 1 ) {\n            setPointsError(true);\n            setAlertMessage('Credits must be more than 0');\n            setSeverity('error');\n            setShow(true);\n            return;\n        }\n\n        addPromotion({\n            variables: {\n                promotionInput: {\n                    creditsRequired: points,\n                    startDate: dateValue[0],\n                    endDate: dateValue[1],\n                    percentageOff: percentage,\n                    menuItemIDs: checkedItems\n                },\n                venueID: venueID,\n            }\n        })\n\n    }\n\n    const handlePercentage = (event) => setPercentage(Number(event.target.value));\n    const handlePoints = (event) => setPoints(Number(event.target.value));\n    \n\n    return (\n      <LocalizationProvider dateAdapter={DateAdapter}>\n    \n            <Box \n                noValidate\n                autoComplete=\"off\"\n                component=\"form\"  \n                sx={{\n                    //paddingLeft: '20%',\n                    aligntItems: 'center',\n                    marginRight: 'auto',\n                    marginLeft: 'auto',\n                    //textAlign: 'center'\n                }}  \n            >\n                <FormControl \n                    variant='standard'  \n                    sx={{ \n                        '& > :not(style)': { m: 1 }, \n                        '& .MuiTextField-root': { m: 0.5, width: '40%'},\n                        aligntItems: 'center',\n                        marginRight: 'auto',\n                        marginLeft: 'auto'\n                    }} \n                >\n                <div>\n                    <TextField \n                        id=\"outlined-number\" \n                        type='number'\n                        required\n                        label=\"Percentage Off\" \n                        InputProps={{\n                            startAdornment: <InputAdornment position=\"start\">\n                                                %\n                                            </InputAdornment>,\n                            inputProps: { min: 0, max: 100}\n                        }}\n                        onChange={handlePercentage}\n                        error={percentageError}\n                    />\n                    <TextField\n                        id=\"outlined-number\"\n                        label=\"Points\"\n                        type=\"number\"\n                        required\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        InputProps={{\n                            startAdornment: <InputAdornment position=\"start\">\n                                                #\n                                            </InputAdornment>,\n                            inputProps: { min: 0}\n                        }}\n                        onChange={handlePoints}\n                        // style={{width: '50%', marginLeft: '20%'}}\n                        min={0}\n                        error={pointsError}\n                    />\n                </div>               \n                    <DateForm \n                        dateValue={dateValue}\n                        setDateValue={setDateValue}\n                    />\n            </FormControl>\n            <br />\n            <Box sx={{ml: 1.2}}>\n                <Button\n                    sx={{mr: 2}} \n                    onClick={handleClose}\n                    variant=\"outlined\"\n                    color=\"error\"\n                >\n                    Cancel\n                </Button>\n                <Button \n                    onClick={handleApplyPromotion}\n                    variant=\"outlined\"\n                    color=\"success\"\n                >\n                    Apply!\n                </Button> \n            </Box>\n        </Box>\n      </LocalizationProvider>\n    )\n};\n\n\n\nexport default AddPromoForm;","import { gql } from '@apollo/client';\n\nexport const UploadMenu = gql`\n    mutation UploadMenuMutation($venueID: String!, $menuItemData: AddWholeMenuInput!) {\n        uploadMenu(venueID: $venueID, menuItemData: $menuItemData) {\n            errors\n            success\n        }\n    }\n`;","import React, { useState } from 'react';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { Dimmer, Loader } from 'semantic-ui-react';\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport Slide from '@mui/material/Slide'; \nimport Fade from '@mui/material/Fade';\nimport Select from '@mui/material/Select';\nimport DateAdapter from '@date-io/date-fns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport Collapse from '@mui/material/Collapse';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport { UploadMenu } from './gql/uploadMenu.gql';\nimport { GetAllItemKinds } from '../../gql/search/getAllItemKinds.gql';\n\nimport SpecialHoursForm from '../Menu/SpecialHoursForm';\nimport TimedSpecialForm from '../Menu/TimedSpecialForm';\nimport 'semantic-ui-less/semantic.less';\nimport AlertBar from '../../shared-components/AlertBar';\nimport { GET_MY_VENUES } from './getMyVenues.gql';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\n\n/**\n * Displays a upload form for business\n * users to add a menu to their business. \n */\nconst UploadMenuForm = ({\n    open, setOpen,\n    venueID,\n    refetchVenues\n}) => {\n\n    // on upload success / fail\n    const [show, setShow] = useState(false);\n    const [message, setMessage] = useState('');\n    const [severity, setSeverity] = useState('success');\n\n    const [itemName, setItemName ] = useState('');\n    const [itemPrice, setItemPrice ] = useState('');\n    const [dateValue, setDateValue] = useState([new Date(), new Date()]);\n    const [fromTime, setFromTime] = useState(new Date());\n    const [toTime, setToTime] = useState(new Date());\n    const [ isSpecial, setIsSpecial ] = useState(false);\n    const [ isTimedSpecial, setIsTimedSpecial ] = useState(false);\n    const [ category, setCategory ] = useState('');\n    const [ itemType, setItemType ] = useState('');\n    const [ isRecurring, setIsRecurring ] = useState(false);\n    const [ disableTypeSelect, setDisableTypeSelect ] = useState(true);\n\n    // form invalidators\n    const [itemNameInvalid, setItemNameInvalid] = useState(false);\n    const [itemPriceInvalid, setItemPriceInvalid] = useState(false);\n    const [categoryInvalid, setCategoryInvalid] = useState(false);\n    const [itemTypeInvalid, setItemTypeInvalid] = useState(false); \n\n    const [ sundayTime, setSundayTime ] = useState({\n        set: false, \n        from: new Date(),\n        to: new Date() \n    });\n\n    const [ mondayTime, setMondayTime ] = useState({ \n        set: false, \n        from: new Date(),\n        to: new Date() \n    });\n\n    const [ tuesdayTime, setTuesdayTime ] = useState({ \n        set: false, \n        from: new Date(),\n        to: new Date() \n    });\n\n    const [ wednesdayTime, setWednesdayTime ] = useState({\n        set: false, \n        from: new Date(),\n        to: new Date() \n    });\n\n    const [ thursdayTime, setThursdayTime ] = useState({ \n        set: false,\n        from: new Date(),\n        to: new Date() \n    });\n\n    const [ fridayTime, setFridayTime ] = useState({\n        set: false, \n        from: new Date(),\n        to: new Date() \n    });\n\n    const [ saturdayTime, setSaturdayTime ] = useState({\n        set: false, \n        from: new Date(),\n        to: new Date() \n    });\n\n    const constructSpecialHours = () => {\n        let specialHours = [];\n        if (sundayTime.set) {\n            specialHours.push({\n                day: 'Sunday',\n                open: {\n                    hours: sundayTime.from.getHours(),\n                    minutes: sundayTime.from.getMinutes()\n                },\n                close: {\n                    hours: sundayTime.to.getHours(),\n                    minutes: sundayTime.to.getMinutes()\n                }\n            });\n        }\n        if (mondayTime.set) {\n            specialHours.push({\n                day: 'Monday',\n                open: {\n                    hours: mondayTime.from.getHours(),\n                    minutes: mondayTime.from.getMinutes()\n                },\n                close: {\n                    hours: mondayTime.to.getHours(),\n                    minutes: mondayTime.to.getMinutes()\n                }\n            });\n        }\n        if (tuesdayTime.set) {\n            specialHours.push({\n                day: 'Tuesday',\n                open: {\n                    hours: tuesdayTime.from.getHours(),\n                    minutes: tuesdayTime.from.getMinutes()\n                },\n                close: {\n                    hours: tuesdayTime.to.getHours(),\n                    minutes: tuesdayTime.to.getMinutes()\n                }\n            });\n        }\n        if (wednesdayTime.set) {\n            specialHours.push({\n                day: 'Wednesday',\n                open: {\n                    hours: wednesdayTime.from.getHours(),\n                    minutes: wednesdayTime.from.getMinutes()\n                },\n                close: {\n                    hours: wednesdayTime.to.getHours(),\n                    minutes: wednesdayTime.to.getMinutes()\n                }\n            });\n        }\n        if (thursdayTime.set) {\n            specialHours.push({\n                day: 'Thursday',\n                open: {\n                    hours: thursdayTime.from.getHours(),\n                    minutes: thursdayTime.from.getMinutes()\n                },\n                close: {\n                    hours: thursdayTime.to.getHours(),\n                    minutes: thursdayTime.to.getMinutes()\n                }\n            });\n        }\n        if (fridayTime.set) {\n            specialHours.push({\n                day: 'Friday',\n                open: {\n                    hours: fridayTime.from.getHours(),\n                    minutes: fridayTime.from.getMinutes()\n                },\n                close: {\n                    hours: fridayTime.to.getHours(),\n                    minutes: fridayTime.to.getMinutes()\n                }\n            });\n        }\n        if (saturdayTime.set) {\n            specialHours.push({\n                day: 'Saturday',\n                open: {\n                    hours: saturdayTime.from.getHours(),\n                    minutes: saturdayTime.from.getMinutes()\n                },\n                close: {\n                    hours: saturdayTime.to.getHours(),\n                    minutes: saturdayTime.to.getMinutes()\n                }\n            });\n        }\n        return specialHours;\n    }\n\n\n    const handleReset = () => {\n\n        // restore valid form states\n        setItemNameInvalid(false);\n        setItemPriceInvalid(false);\n        setCategoryInvalid(false);\n        setItemTypeInvalid(false);\n        setItemPrice('');\n        setIsSpecial(false);\n        setIsTimedSpecial(false);\n        setIsRecurring(false);\n        setItemName('');\n        setCategory('');\n        setItemType('');\n        setCategory(null);\n        setItemType(null);\n        setItemPrice('');\n        setDateValue([null, null]);\n        setFromTime(new Date('2018-01-01T00:00:00.000Z'));\n        setToTime(new Date('2018-01-01T00:00:00.000Z'));\n        setIsRecurring(false);\n        setSundayTime({\n            set: false\n        });\n        setMondayTime({\n            set: false\n        });\n        setTuesdayTime({\n            set: false\n        });\n        setWednesdayTime({\n            set: false\n        });\n        setThursdayTime({\n            set: false\n        });\n        setFridayTime({\n            set: false\n        });\n        setSaturdayTime({\n            set: false\n        });\n    \n    };\n\n    const handleClose = () => {\n        refetchVenues();\n        setOpen(false);\n        handleReset();\n    }\n\n\n    const {loading, error, data} = useQuery(GetAllItemKinds);\n    const [ uploadMenuItem, { loading: uploadLoading } ] = useMutation(UploadMenu, {\n        onCompleted: (res) => {\n            if (!res.uploadMenu.success) {\n                setMessage('Error uploading menu item, please try again');\n                setSeverity('error');\n                setShow(true);\n            } else {\n                setMessage('Item Added!');\n                setSeverity('success');\n                setShow(true);\n                handleReset();   \n            }\n        },\n        // refetchQueries: [GET_MY_VENUES]\n    });\n\n    let foodTypes = [];\n    let drinkTypes = [];\n\n    const handleAddItem = () => {\n        \n        \n\n        // construct special hours\n        const specialHours = constructSpecialHours();\n        \n        if (!itemName || !itemPrice || itemPrice <= 0 || !category || !itemType) {\n            setMessage('Please fill out all fields correctly');\n            setSeverity('error');\n            setShow(true);\n\n            // set applicable error fields\n            if (!itemName) \n                setItemNameInvalid(true);\n            if (!itemPrice) \n                setItemPriceInvalid(true);\n            if (!category)\n                setCategoryInvalid(true);\n            if (!itemType)\n                setItemTypeInvalid(true);\n            return;\n        }\n\n        uploadMenuItem({\n            variables: {\n                venueID: venueID,\n                menuItemData: {\n                    menuItems: [\n                        {\n                            name: itemName,\n                            price: itemPrice,\n                            isSpecial: isSpecial,\n                            itemKind: itemType,\n                            specialExpiry: {\n                                specialStart: fromTime,\n                                specialEnd: toTime\n                            },\n                            specialHours: {\n                                hours: specialHours\n                            }\n                        }\n                    ]\n                }\n\n            }\n        });\n    }\n\n\n\n    const isSpecialToggle = () => setIsSpecial((isSpecial) => !isSpecial);\n    const recurringToggle = () => setIsRecurring((isRecurring) => !isRecurring);\n\n    const isTimedSpecialToggle = () => {\n        setIsTimedSpecial((isTimedSpecial) => !isTimedSpecial);\n    }\n\n    const handleItemName = (event) => setItemName(event.target.value);\n    const handleItemPrice = (event) => setItemPrice(Number(event.target.value));\n    const handleCategorySelect = (event) => {\n        setCategory(event.target.value);\n        setDisableTypeSelect(false);\n    }\n    const handleItemTypeSelect = (event) => setItemType(event.target.value);\n\n    const timedSpecialCheckbox = (\n        <FormGroup>\n            <FormControlLabel \n                control={\n                    <Checkbox\n                        onChange={isTimedSpecialToggle}\n                    />\n                } \n                label=\"Limited Availability\"\n            />\n        </FormGroup>\n    )\n\n    if (loading)\n        return (\n            <Dimmer active>\n                <Loader size=\"large\"/>\n            </Dimmer>\n        )\n\n    if (error) {\n        console.log(\"[**] Add Item Form error: \", error);\n        setOpen(false);\n        return null;\n    }\n\n    if (data) {\n        console.log(\"[>>] Add Item Form data: \", data);\n        foodTypes = data.getAllItemKinds.food;\n        drinkTypes = data.getAllItemKinds.drink;\n    }\n\n    return (\n        <LocalizationProvider dateAdapter={DateAdapter}>\n            <Dialog \n                open={open} \n                onClose={handleClose}\n                TransitionComponent={Transition}\n                fullWidth\n            >\n                {\n                    uploadLoading ?  \n                    <Dimmer active>\n                        <Loader size=\"small\"/>\n                    </Dimmer>\n                    : null \n                }\n                <DialogTitle>Add New Menu Item</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Add menu items to your venue\n                    </DialogContentText>\n                        <br />\n                        <Box \n                            noValidate\n                            autoComplete=\"off\"\n                            component=\"form\"\n                        >\n                            <FormControl \n                                variant='standard'  \n                                sx={{ \n                                    '& > :not(style)': { m: 1, width: '100%' }, \n                                    '& .MuiTextField-root': { m: 0.5, width: '32ch' },\n                                    width: '100%' \n                                }}\n                            >\n                            <div>\n                                <TextField \n                                    id=\"outlined-search\" \n                                    required\n                                    label=\"Item name\" \n                                    type=\"search\" \n                                    error={itemNameInvalid}\n                                    value={itemName}\n                                    onChange={handleItemName}\n                                />\n                                <TextField\n                                    id=\"outlined-number\"\n                                    label=\"Price\"\n                                    type=\"number\"\n                                    required\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    InputProps={{\n                                        startAdornment: <InputAdornment position=\"start\">\n                                                            $\n                                                        </InputAdornment>,\n                                        inputMode: 'numeric', \n                                        pattern: '[1-9]*'\n                                    }}\n                                    value={itemPrice}\n                                    error={itemPriceInvalid || itemPrice < 0}\n                                    onChange={handleItemPrice}\n                                    min={0}\n                                />\n                            </div>\n                            <div>\n                                <FormControl \n                                    sx={{ \n                                        m: 0.5, \n                                        minWidth: 150, \n                                        width: '32ch' \n                                    }}\n                                    error={categoryInvalid}\n                                >\n                                    <InputLabel htmlFor=\"grouped-select\" required>\n                                        Item Category\n                                    </InputLabel>\n                                    <Select \n                                        id=\"grouped-select\" \n                                        label=\"Grouping\"\n                                        onChange={handleCategorySelect}\n                                        value={category}\n                                        \n                                    >\n                                        <MenuItem value='food'>\n                                            Food\n                                        </MenuItem>\n                                        <MenuItem value='drink'>\n                                            Drink\n                                        </MenuItem>\n                                    </Select>\n                                </FormControl>\n\n                                <FormControl \n                                    sx={{ \n                                        m: 0.5, \n                                        minWidth: 150, \n                                        width: '32ch' \n                                    }} \n                                    error={itemTypeInvalid}\n                                >\n                                    <InputLabel htmlFor=\"grouped-select\" required>\n                                        Item Type\n                                    </InputLabel>\n                                    <Select \n                                        disabled={disableTypeSelect}\n                                        id=\"grouped-select\" \n                                        label=\"Grouping\"\n                                        onChange={handleItemTypeSelect}\n                                        value={itemType}\n                                    >\n                                        {\n                                            category === 'food' ?\n                                            foodTypes.map((foodItem, index) => (\n                                                <MenuItem value={foodItem._id} key={index + 1}>\n                                                    {foodItem.type}\n                                                </MenuItem>\n                                            )) :\n                                            drinkTypes.map((drinkItem, index) => (\n                                                <MenuItem value={drinkItem._id} key={index + 1}>\n                                                    {drinkItem.type}\n                                                </MenuItem>\n                                            ))\n                                        }\n                                    </Select>\n                                </FormControl>\n                            </div>\n                            <FormGroup>\n                                <FormControlLabel \n                                    control={\n                                        <Checkbox\n                                            disabled={isTimedSpecial || isRecurring}\n                                            onChange={isSpecialToggle}\n                                        />\n                                    } \n                                    label=\"On Special\"\n                                />\n                            </FormGroup>\n            \n                            <Fade in={isSpecial}>\n                                {timedSpecialCheckbox}\n                            </Fade>\n                            <Collapse in={isTimedSpecial}>\n                                <FormGroup>\n                                    <TimedSpecialForm \n                                        dateValue={dateValue}\n                                        setDateValue={setDateValue}\n                                        fromTime={fromTime}\n                                        setFromTime={setFromTime}\n                                        toTime={toTime}\n                                        setToTime={setToTime}\n                                        isRecurring={isRecurring}\n                                        setIsRecurring={setIsRecurring}\n                                        sundayTime={sundayTime}\n                                        setSundayTime={setSundayTime}\n                                        mondayTime={mondayTime}\n                                        setMondayTime={setMondayTime}\n                                        tuesdayTime={tuesdayTime}\n                                        setTuesdayTime={setTuesdayTime}\n                                        wednesdayTime={wednesdayTime}\n                                        setWednesdayTime={setWednesdayTime}\n                                        thursdayTime={thursdayTime}\n                                        setThursdayTime={setThursdayTime}\n                                        fridayTime={fridayTime}\n                                        setFridayTime={setFridayTime}\n                                        saturdayTime={saturdayTime}\n                                        setSaturdayTime={setSaturdayTime}\n\n                                    />\n                                </FormGroup>\n                            </Collapse>\n                            <Collapse in={isSpecial}>\n                                <FormGroup>\n                                <FormControlLabel \n                                    control={\n                                        <Checkbox\n                                            onChange={recurringToggle}\n                                        />\n                                    } \n                                    label=\"Recurring\"\n                                    />\n                                </FormGroup>\n                            </Collapse>\n                            <Collapse in={isRecurring}>\n                                <SpecialHoursForm \n                                    sundayTime={sundayTime}\n                                    setSundayTime={setSundayTime}\n                                    mondayTime={mondayTime}\n                                    setMondayTime={setMondayTime}\n                                    tuesdayTime={tuesdayTime}\n                                    setTuesdayTime={setTuesdayTime}\n                                    wednesdayTime={wednesdayTime}\n                                    setWednesdayTime={setWednesdayTime}\n                                    thursdayTime={thursdayTime}\n                                    setThursdayTime={setThursdayTime}\n                                    fridayTime={fridayTime}\n                                    setFridayTime={setFridayTime}\n                                    saturdayTime={saturdayTime}\n                                    setSaturdayTime={setSaturdayTime}\n                                />\n                            </Collapse>  \n                        \n                        </FormControl>\n                    </Box>\n                </DialogContent>\n                <DialogActions>\n                    <Button \n                        onClick={handleClose} \n                        color=\"error\"\n                        variant=\"outlined\"\n                    >\n                        Finish\n                    </Button>\n                    <Button \n                        onClick={handleAddItem}\n                        color=\"success\"\n                        variant=\"contained\"\n                        endIcon={<ChevronRightIcon />}\n                    >\n                        Add\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            \n            <AlertBar \n                show={show}\n                setShow={setShow}\n                message={message}\n                severity={severity}\n            />\n\n        </LocalizationProvider>\n\n    );\n};\n\n\n\nexport default UploadMenuForm;","import React, { useState } from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars-2';\n\n// import Banner from '../Menu/Banner';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Divider from '@mui/material/Divider';\nimport Button from '@mui/material/Button';\n\nimport OpeningHours from '../Menu/OpeningHours';\nimport MenuSection from '../Menu/MenuSection';\nimport Item from '../Menu/Item';\nimport AddPromoForm from './AddPromotionForm';\nimport '../Menu/index.css';\nimport UploadMenuForm from './UploadMenuForm';\nimport Stack from '@mui/material/Stack';\n\n/**\n * Ideally we want this component \n * to recycle more components from menu\n * but they are too tightly coupled\n * at the moment.\n * \n * Consider this a MVP ish\n * \n */\nconst VenueMenu = ({\n    venue, \n    refetchVenues,\n    setAlertMessage,\n    setSeverity,\n    setShow,\n}) => {\n\n    const [openPromo, setOpenPromo] = useState(false);\n    const [openForm, setFormOpen ] = useState(false);\n\n    // To remember checkedItems for promotion\n    const [checkedItems, setCheckedItems] = React.useState([]);\n\n\n\n    let specials = [];\n    let food = [];\n    let drinks = [];\n\n    function handlePromotionClick() {\n        setOpenPromo(true);\n    }\n\n    function addCheckedItem (checked, id) {\n        if (checked){\n            setCheckedItems([...checkedItems, id]);\n        }\n        else {\n            setCheckedItems([...checkedItems.filter(item => item !== id)]);\n        }\n\t}\n\n    if (venue.menu) {\n        venue.menu.forEach(menuItem => {\n            if (menuItem.special !== 'FALSE') \n                specials.push(menuItem);\n            else\n                switch (menuItem.itemKind.category) {\n                    case 'FOOD':\n                        food.push(menuItem);\n                        break;\n                    case 'DRINK':\n                        drinks.push(menuItem);\n                        break;\n                    default:\n                        food.push(menuItem);\n                }\n        });\n    }\n\n    return (\n        <Box \n            sx={{\n                mb: 3\n            }}\n        >\n            <Typography variant=\"h5\" align='center'>\n                {venue.name}\n            </Typography>    \n            <Divider />\n            <Box\n                sx={{\n                    mt: 1,\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    alignItems: 'baseline',\n                }}\n            >\n                <Box\n                    sx={{\n                        flexBasis: '400px',\n                    }}\n                >\n                    <OpeningHours \n                        openingHours={venue.openingHours.hours}\n                        menuInfo\n                    />\n                </Box>\n                <Box\n                    sx={{\n                        flexBasis: '180px',\n                    }}\n                >\n                    <Button \n                        variant=\"outlined\"\n                        onClick={() => setFormOpen(true) }\n                    >\n                        Upload Menu\n                    </Button>\n                </Box>\n            </Box>\n\n            <Button \n                variant=\"contained\"  \n                onClick={() => {handlePromotionClick()}}\n            >\n                Start Promotion\n            </Button>\n\n            {openPromo ? ( \n                <Box sx={{ ml: -1.2, mt: 1 }}>\n                    <AddPromoForm \n                        venueID={venue._id} \n                        setOpen={setOpenPromo} \n                        checkedItems={checkedItems}\n                        setShow={setShow}\n                        setAlertMessage={setAlertMessage}\n                        setSeverity={setSeverity}\n                        refetchVenues={refetchVenues} \n                    />\n                </Box>\n            ): null }\n \n            <br />\n\n            <br />\n            <UploadMenuForm \n                open={openForm}\n                setOpen={setFormOpen}\n                venueID={venue._id}\n                refetchVenues={refetchVenues} \n            />\n            <Box sx={{ mt: 5}} />\n            <Scrollbars\n                autoHide\n                style={{ height: 325, float: 'left'}}\n\n            >\n                { specials.length > 0 && <MenuSection type='Specials'/> }\n                { specials.length > 0 &&\n                    <Box \n                        sx={{\n                            ml: '10%'\n                        }}\n                    >\n                        {\n                            specials.map((menuItem, index) => (   \n                                <Item \n                                    key={index}\n                                    name={menuItem.name}\n                                    price={menuItem.price}\n                                    type={menuItem.itemKind.type}\n                                    verified={menuItem.verified}\n                                    special={menuItem.special}\n                                    specialHours={menuItem.specialHours.hours}\n                                    specialExpiry={menuItem.specialExpiry}\n                                />\n                            ))\n                        }               \n                    </Box>\n                }\n                { food.length > 0 && <MenuSection type='Food' /> }\n                { food.length > 0 &&\n                    <Box \n                        sx={{\n                            ml: '10%'\n                        }}\n                    >\n                        {\n                            food.map((menuItem, index) => (\n                                <Item \n                                    key={index}\n                                    name={menuItem.name}\n                                    price={menuItem.price}\n                                    type={menuItem.itemKind.type}\n                                    verified={menuItem.verified}\n                                    promotion={menuItem.promotion}\n                                    special={false}\n                                    checkBoxPromo={openPromo}\n                                    checkBoxID={menuItem._id}\n                                    checkedItems={checkedItems}\n                                    setCheckedItems={setCheckedItems}\n                                    addCheckedItems={addCheckedItem}\n                                />\n                            ))\n                        }   \n                    </Box>\n                }\n                { drinks.length > 0 && <MenuSection type='Drinks'/> }\n                { drinks.length > 0 &&\n                    <Box \n                        sx={{\n                            ml: '10%'\n                        }}\n                    >\n                        {\n                            drinks.map((menuItem, index) => (\n                                <Item \n                                    key={index}\n                                    name={menuItem.name}\n                                    price={menuItem.price}\n                                    type={menuItem.itemKind.type}\n                                    verified={menuItem.verified}\n                                    promotion={menuItem.promotion}\n                                    special={false}\n                                    checkBoxPromo={openPromo}\n                                    checkBoxID={menuItem._id}\n                                    checkedItems={checkedItems}\n                                    setCheckedItems={setCheckedItems}\n                                    addCheckedItems={addCheckedItem}\n                                />\n                            ))\n                        }\n                    </Box>\n                }\n            </Scrollbars>\n        </Box>\n    )\n};\n\n\n\nexport default VenueMenu;","import { gql } from '@apollo/client';\n\nexport const ProcessMenuItem = gql`\nmutation ProcessMenuItem($decision: RequestStates!, $menuItemID: ID!, $venueID: ID!) {\n    processMenuItem(decision: $decision, menuItemID: $menuItemID, venueID: $venueID)\n  }\n`;","import * as React from \"react\";\nimport { useMutation } from '@apollo/client';\nimport PropTypes from 'prop-types';\nimport { ProcessMenuItem } from './processMenuItem.gql'\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\n\n/**\n * Renders cards to depict unverified\n * menu items per venue in the queue\n * \n * @param menuItem - a menu item object \n * \n * @param propVenueID - the ID of the venue\n * \n * @param updateQueue - the update handler \n * for the list of jobs\n */\nconst MenuItemCard = ({\n    menuItem, \n    propVenueID, \n    updateQueue,\n    refetchVenues\n}) => {\n    const [ approveMenuItem ] = useMutation(ProcessMenuItem);\n\n    //approve item handler\n    const approveItem = () => {\n        approveMenuItem({\n            variables: {\n                decision: \n                \"APPROVED\",\n                menuItemID: menuItem._id,\n                venueID: propVenueID,\n            }\n        })\n        \n        updateQueue(menuItem._id);\n        refetchVenues();\n    }\n    \n    //reject item handler\n    const rejectItem = () => {\n        approveMenuItem({\n            variables: {\n                    decision: \n                    \"REJECTED\",\n                    menuItemID: menuItem._id,\n                    venueID: propVenueID,\n            }\n        })\n\n        updateQueue(menuItem._id);\n        refetchVenues();\n    }\n\n\n    return (\n        <Box sx={{ minWidth: 200, maxWidth: 500, mt: 2, mb: 2 }} >\n            <Card variant=\"outlined\">\n                <CardContent>\n                    <Box\n                        sx={{\n                            display: 'flex',\n                            justifyContent: 'space-between',\n                        }}\n                    >\n                        <Typography>\n                            {menuItem.name}\n                        </Typography>\n                        <Typography>\n                            ${menuItem.price}\n                        </Typography>\n                    </Box>\n                </CardContent>\n                <CardActions>\n                    <Button\n                        onClick={() => rejectItem()}\n                        negative\n                        variant=\"contained\"\n                        color=\"error\"\n                    >\n                        Reject\n                    </Button>\n                    <Button\n                        onClick={() => approveItem()}\n                        positive\n                        variant=\"contained\"\n                        color=\"success\"\n                    >\n                        Approve\n                    </Button>\n                </CardActions>\n            </Card>\n        </Box>\n    );\n}\n\n\nMenuItemCard.propTypes = {\n    menuItem: PropTypes.object.isRequired,\n    propVenueID: PropTypes.string.isRequired,\n    updateQueue: PropTypes.func.isRequired\n};\n\n\nexport default MenuItemCard;","import React, { useState } from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars-2';\nimport MenuItemCard  from './MenuItemCard';\nimport Card from '@mui/material/Card';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport { Button, Icon } from 'semantic-ui-react';\n\n/**\n * Displays a carousel of menus\n * per venue with unverified \n * items queue\n * \n * @param venuesList - the list of verified venues\n * the business owns\n * \n * @param refetchVenues - the refetching function \n * for the query that pulls a businesses verified\n * venues\n */\nconst ReviewVenueCarousel = ({ venuesList, refetchVenues, getVenues }) => {\n    \n    // filter by unverified menu items\n    const [verificationQueue, updateVerificationQueue] = useState(() =>\n        venuesList.filter(venue => venue.menu.find(item => !item.verified))\n    );\n\n    const [queueDone, setQueueDone] = useState(false);\n\n\n    // JavaScript's `%` operator is for \n    // remainder, not modulo\n    const mod = (n, m) => ((n % m) + m) % m;\n    const [currentVenue, setCurrentVenue] = useState(0);\n    \n    // increment venue queue\n    const nextVenue = () => setCurrentVenue(\n        mod(currentVenue + 1, verificationQueue.length)\n    );\n\n    // decrement venue queue\n    const prevVenue = () => setCurrentVenue(\n        mod(currentVenue - 1, verificationQueue.length)\n    );\n\n    // update the venue list to remove\n    // the item from the queue\n    const updateQueue = (itemID) => {\n        \n        // remove the item from the \n        // venue's menu\n        let newVenueJobs = verificationQueue[currentVenue].menu.filter(\n            item => item._id !== itemID\n        );\n        \n        updateVerificationQueue(\n            verificationQueue.map(\n                venue => venue._id === verificationQueue[currentVenue]._id\n                    ? {\n                        ...venue,\n                        menu: newVenueJobs\n                    }\n                    : venue\n            )\n        );\n\n        refetchVenues();\n        getVenues();\n        \n        if (newVenueJobs.length < 1 || verificationQueue.length < 1) {\n            setQueueDone(true);\n        }\n    }\n\n    // list for the current venue\n    return (\n        <Box sx={{ maxWidth: 600 }} >\n            <Card \n                variant=\"outlined\"\n            >\n                <Box>\n                    { (verificationQueue.length > 0 && !queueDone) ? (\n                        <Box sx={{ m: 5}} >\n                            <Typography variant=\"h5\" >\n                                { verificationQueue[currentVenue].name }\n                            </Typography>\n\n                            <Scrollbars\n                                autoHide\n                                style={{ height: 400, float: 'left' }}\n                            >\n                                {\n                                    verificationQueue[currentVenue].menu.map((menuItem, index) => {\n                                        if (!menuItem.verified)\n                                            return (\n                                                <MenuItemCard \n                                                    key={index}\n                                                    menuItem={menuItem}\n                                                    propVenueID={verificationQueue[currentVenue]._id}\n                                                    updateQueue={updateQueue}\n                                                    refetchVenues={refetchVenues}\n                                                />\n                                            ) \n                                    })\n                                }\n                            </Scrollbars>        \n\n                            <Box sx={{ml: 2, mr: 2, mt: 4}} >\n\n                                <Button\n                                    style={{ \n                                        marginBottom: 10,\n                                        marginTop: 10 \n                                    }}\n                                    size='large'\n                                    circular\n                                    floated='right'\n                                    icon={<Icon name='chevron right' />}\n                                    onClick={() => nextVenue()}\n                                />\n\n                                <Button\n                                    style={{ \n                                        marginBottom: 10,\n                                        marginTop: 10\n                                    }}\n                                    size='large'\n                                    circular\n                                    floated='left'\n                                    icon={<Icon name='chevron left' />}\n                                    onClick={() => prevVenue()}\n                                />\n                            </Box>\n                        </Box>\n\n                        ) : (\n                            <Box sx={{ mb: 5, ml: 1}} >\n                                <Typography variant=\"h5\">\n                                    No verification jobs\n                                </Typography>\n\n                                <Typography variant=\"body1\">\n                                    User added menu items will appear here.\n                                </Typography>\n                            </Box>\n                        )\n                    }\n                </Box>\n            </Card>\n        </Box>\n    );\n};\n\n\nexport default ReviewVenueCarousel;\n\n\n\n/**\n\n\n                      <Button\n                                size='massive'\n                                circular\n                                floated='right'\n                                icon={<Icon name='chevron left' />}\n                                onClick={() => prevVenue()}\n                            />\n\n\n                            <Button\n                                size='massive'\n                                circular\n                                floated='left'\n                                icon={<Icon name='chevron right' />}\n                                onClick={() => nextVenue()}\n                            />\n\n */","import React, { useState, useEffect } from 'react';\nimport { \n    useQuery, \n    NetworkStatus, \n    useLazyQuery\n} from '@apollo/client';\nimport {\n    Icon,\n    Loader,\n    Segment,\n    Label,\n} from 'semantic-ui-react';\nimport { GET_MY_REJECTED_REQUESTS } from './getMyRequests.gql';\nimport { GET_MY_VENUES } from './getMyVenues.gql';\nimport Accordion from '@mui/material/Accordion';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport Typography from '@mui/material/Typography';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport VenueMenu from './VenueMenu';\nimport ReviewVenueCarousel from './ReviewVenueCarousel';\nimport Box from '@mui/material/Box';\nimport PropTypes from 'prop-types';\nimport AlertBar from '../../shared-components/AlertBar';\n\n/**\n * Displays X to X\n * \n * @param  pendingResults - a function to refetch\n * venues pending verification\n * @param  stateProp - a boolean to indicate \n * which page the sidebar is currently set\n * to\n */\nexport const VenueDisplayAccordion = ({ pendingResults, stateProp }) => {\n    const [ venues, setVenues ] = useState([]);\n    const { loading, error, refetch: refetchVenues, data } = useQuery(GET_MY_VENUES, \n        {\n            // network only\n            fetchPolicy: \"network-only\",\n            notifyOnNetworkStatusChange: true,\n            onCompleted: (data) => {\n                setVenues(data.getVenuesForSelf);\n            }\n        }\n    );\n\n\n    const rejectedResults = useQuery(GET_MY_REJECTED_REQUESTS);\n\n    // setup alert bar state\n    const [show, setShow] = useState(false);\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const [severity, setSeverity] = useState(\"\");\n\n    // set component crate\n    let verifiedVenues;\n    if (loading || error) {\n        verifiedVenues = <Loader active inline='centered' />;\n    } else {\n\n        verifiedVenues = venues.map((venue, index) => (\n            <Accordion key={index}>\n                <AccordionSummary \n                    expandIcon={<ExpandMoreIcon />}\n                >\n                    <Typography>\n                        {index + 1}. {venue.name}\n                    </Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <VenueMenu \n                        venue={venue} \n                        refetchVenues={refetchVenues}\n                        setAlertMessage={setAlertMessage}\n                        setSeverity={setSeverity}\n                        setShow={setShow}\n                    />\n                </AccordionDetails>\n            </Accordion>\n        ));\n    }\n\n    let pendingVenues;\n    if (\n        pendingResults.loading \n        || pendingResults.error \n        || pendingResults.networkStatus === NetworkStatus.refetch\n    ) {\n        pendingVenues = <Loader active inline='centered' />;\n    } else {\n        \n        pendingVenues = pendingResults.data.getMyRequestsByStatus.map((datum, index) => (\n            <Typography>\n                {index + 1}. {datum.venue.name}\n            </Typography>\n        ));\n    }\n\n    let rejectedVenues;\n    if (rejectedResults.loading || rejectedResults.error) {\n        rejectedVenues = <Loader active inline='centered' />;\n    } else {\n        rejectedVenues = rejectedResults.data.getMyRequestsByStatus.map((datum, index) => (\n            <Accordion >\n                <AccordionSummary\n                    expandIcon={<ExpandMoreIcon />}\n                >\n                    <Typography>\n                        {index + 1}. {datum.venue.name}\n                    </Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <Segment.Group>\n                        <Segment>\n                            <Label attached='top'>Reason for rejection</Label>\n                            <p>\n                                {datum.reasonForRejection}\n                            </p>\n                        </Segment>\n                        <Segment>\n                            <Label attached='top'>\n                                Review your verification details\n                            </Label>\n                            <div>\n                                <a \n                                    href={datum.verificationDocuments} \n                                    target='_blank' \n                                    rel='noopener noreferrer'\n                                >\n                                    <Icon.Group size='massive'>\n                                        <Icon name='file pdf outline' />\n                                        <Icon corner size='tiny' name='download' />\n                                    </Icon.Group>\n                                    <br />\n                                    Click to download\n                                </a>\n                            </div>\n                        </Segment>\n                    </Segment.Group>\n                </AccordionDetails>\n            </Accordion>\n        ));\n    }\n\n    return (\n        <Box>\n            { !stateProp ? (\n                <>\n                    <Segment>\n                        <Label attached='top'>Verified</Label>\n                        {verifiedVenues}\n                    </Segment>\n\n                    <Segment>\n                        <Label attached='top'>\n                            Awaiting Verification\n                        </Label>\n                        <div>\n                            {pendingVenues}\n                        </div>\n                    </Segment>\n\n                    <Segment>\n                        <Label attached='top'>\n                            Rejected Requests\n                        </Label>\n                        <div>\n                            {rejectedVenues}\n                        </div>\n                    </Segment>\n                    </> \n                ) : (\n                    <>\n                        {venues ? (\n                            <ReviewVenueCarousel\n                                venuesList={venues}\n                                refetchVenues={refetchVenues}\n                            />\n                            ): null\n                        }\n                    </>\n                )\n            }\n\n            <AlertBar \n                message={alertMessage}\n                severity={severity}\n                show={show}\n                setShow={setShow}\n            />     \n        </Box>\n    );\n}\n\nVenueDisplayAccordion.propTypes = {\n    pendingResults: PropTypes.func.isRequired,\n\n}\n\n\nexport default VenueDisplayAccordion;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Drawer from '@mui/material/Drawer';\nimport IconButton from '@mui/material/IconButton';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport HomeIcon from '@mui/icons-material/Home';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport DomainVerificationIcon from '@mui/icons-material/DomainVerification';\nimport { AddVenueModal } from './AddVenueModal';\nimport { VenueDisplayAccordion } from './VenueDisplayAccordion';\n\nconst drawerWidth = 206;\n\n\n/**\n * Displays the sidebar nav for the business \n * homepage as well as mounting components\n * that must interconnect with the sidebar\n * to make it responsive. \n * \n * @prop pendingResults - apollo client query\n * instance\n * \n */\nconst SideNav = ({ pendingResults }) => {\n    const [mobileOpen, setMobileOpen] = useState(false);\n\n    const [ onHome, setOnHome ] = useState(true);\n    const [ onVerification, setOnVerification ] = useState(false);\n\n    const handleDrawerToggle = () => {\n        setMobileOpen(!mobileOpen);\n    };\n\n    const handleHomeNav = () => {\n        setOnVerification(false);\n        setOnHome(true); \n    };\n\n    const handleVerificationsNav = () => {\n        setOnHome(false);\n        setOnVerification(true);\n    };\n\n\n    const drawer = (\n        <Box\n            sx={{\n                mt: '50%'\n            }}\n        >\n        <Toolbar />\n    \n            <List>\n                <ListItem \n                    button key='Home' \n                    selected={onHome}\n                    onClick={handleHomeNav}\n                >\n                    <ListItemIcon>\n                        <HomeIcon />\n                    </ListItemIcon>\n                    <ListItemText primary='Home' />\n                </ListItem>\n                <ListItem \n                    button key='Verify Menu' \n                    selected={onVerification}\n                    onClick={handleVerificationsNav}\n                >\n                    <ListItemIcon>\n                        <DomainVerificationIcon />\n                    </ListItemIcon>\n                    <ListItemText primary='Menu Verifications' />\n                </ListItem>\n            </List>\n        </Box>\n    );\n\n\n\n    return (\n        <Box \n            sx={{ \n                mt: '150px',\n                display: 'flex' \n            }}\n        >\n            <CssBaseline />\n            \n            <AppBar\n                enableColorOnDark\n                color=\"\"\n                position=\"fixed\"\n                sx={{\n                    mt: '85px',\n                    width: { sm: `calc(100% - ${drawerWidth}px)` },\n                    ml: { sm: `${drawerWidth}px` },\n                    backgroundColor: 'white',\n                }}\n            >\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        edge=\"start\"\n                        onClick={handleDrawerToggle}\n                        sx={{ mr: 2, display: { sm: 'none' } }}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" noWrap component=\"div\">\n                        My Venues\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n\n            <Box\n                component=\"nav\"\n                sx={{\n                    mt: '85px', \n                    width: { sm: drawerWidth }, \n                    flexShrink: { sm: 0 } \n                }}\n                aria-label=\"mailbox folders\"\n            >\n                <Drawer\n                    variant=\"temporary\"\n                    open={mobileOpen}\n                    onClose={handleDrawerToggle}\n                    ModalProps={{\n                        // Better performance on mobile.\n                        keepMounted: true, \n                    }}\n                    sx={{\n                        display: { xs: 'block', sm: 'none' },\n                        '& .MuiDrawer-paper': { \n                            boxSizing: 'border-box', \n                            width: drawerWidth \n                        },\n                    }}\n                >\n                    {drawer}\n                </Drawer>\n                <Drawer\n                    variant=\"permanent\"\n                    sx={{\n                        display: { xs: 'none', sm: 'block' },\n                        '& .MuiDrawer-paper': { \n                            boxSizing: 'border-box', \n                            width: drawerWidth \n                        },\n                    }}\n                    open\n                >\n                    {drawer}\n                </Drawer>\n            </Box>\n\n            <Box\n                component=\"main\"\n                sx={{ flexGrow: 1, p: 3, width: { sm: `calc(100% - ${drawerWidth}px)` } }}\n            >\n                <VenueDisplayAccordion \n                    pendingResults={pendingResults}\n                    stateProp={onVerification}\n                />\n                <br />\n                { onHome &&                   \n                    <AddVenueModal \n                        startRefetchPending={() => {\n                            pendingResults.refetch();\n                        }}\n                    />\n                }\n            </Box>\n        </Box>\n    );\n}\n\n\nSideNav.propTypes = {\n    pendingResults: PropTypes.func.isRequired\n}\n\nexport default SideNav;","import React from 'react';\nimport { useQuery } from '@apollo/client';\nimport {\n\tHeader,\n    Container,\n} from 'semantic-ui-react'\nimport { GET_MY_PENDING_REQUESTS } from './getMyRequests.gql';\nimport SideNav from './SideNav';\n\nexport const BusinessDashboardComponent = () => {\n    const pendingResults = useQuery(GET_MY_PENDING_REQUESTS, {\n        notifyOnNetworkStatusChange: true,\n    });\n\n    return (\n        <Container textAlign='left'>\n            <SideNav pendingResults={pendingResults}/>\n        </Container>\n    );\n};","import * as React from \"react\";\nimport BusinessNav from \"../components/NavBar/BusinessNav\";\nimport { \n    BusinessDashboardComponent \n} from '../components/BusinessDashboard/BusinessDashboardComponent';\n\n\nexport const BusinessDashboard = () => (\n    <>\n        <BusinessNav />\n        <BusinessDashboardComponent />\n    </>\n);\n\n\nexport default BusinessDashboard;\n","import React from 'react'\nimport { \n    Grid, \n    Form, \n    Segment,\n    Dimmer,\n    Loader\n} from 'semantic-ui-react'\nimport { NavBar } from '../components/NavBar/NavBar';\nimport { PasswordInput } from '../components/AuthInput/AuthInput';\nimport { useMutation } from '@apollo/client';\nimport { useHistory } from 'react-router';\nimport { ResetAccount } from '../gql/auth/reset.gql';\nimport 'semantic-ui-less/semantic.less';\n\n\nconst Reset = () => {\n\n    const [ newPassword, setNewPassword ] = React.useState('');\n    const [ confirmPassword, setConfirmPassword ] = React.useState('');\n    const [ token, setToken ] = React.useState('');\n    const [ resetAccount, { loading, error } ] = useMutation(ResetAccount);\n\n    const history = useHistory();\n  \n    const handleReset = async () => {\n      const res = await resetAccount({\n        variables: {\n            token: token,\n            password: confirmPassword\n        }\n      });\n\n        if (res.data.resetAccount) {\n            // redirect home for now\n            history.push('/login');\n            return;\n        }\n\n        alert(\"Bad Token, expired or invalid\");\n    }\n\n    if (loading) {\n      return (\n        <Dimmer active>\n          <Loader />\n        </Dimmer>\n      )\n    }\n\n    if (error) {\n        return <div>Error: {error.message}</div>;\n    }\n\n    \n    return (\n        <>\n            <NavBar />\n            <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n                <Grid.Column style={{ maxWidth: 450}} className=\"colClass circular\">\n                    <h1 className=\"header\">\n                        Reset Account\n                    </h1>\n                    <Form size='large'>\n                        \n                            <div \n                                id=\"errorMessage\" \n                                style={{display: 'none', color: 'red'}}>\n                                    <b>Passwords do not match!</b>\n                            </div>\n                            <Segment stacked>\n                                <Form.Input \n                                    fluid \n                                    icon='tag' \n                                    iconPosition='left' \n                                    placeholder='Enter Token' \n                                    required=\"required\"\n                                    value={token}\n                                    onChange={(e) => setToken(e.target.value)}\n                                />\n                                <PasswordInput\n                                    password={newPassword}\n                                    setPassword={setNewPassword}\n                                />\n                                <PasswordInput\n                                    password={confirmPassword}\n                                    setPassword={setConfirmPassword}\n                                />\n                                <button \n                                    className=\"buttonLogin\" \n                                    onClick={handleReset}\n                                >\n                                    Reset Account\n                                </button>\n                            </Segment>\n                        </Form>\n                </Grid.Column>\n            </ Grid>\n        </>\n    );\n}\n\nexport default Reset;","import React from \"react\";\nimport { Image } from 'semantic-ui-react';\nimport propTypes from 'prop-types';\nimport 'semantic-ui-less/semantic.less';\n\n\n/**\n * Display a profile picture and\n * username on the users account.\n * \n * @param username - username\n * \n * @param avaterUrl - avarter to display for account\n */\n \n\nconst ProfileBadge = ({ username, avatarUrl }) => {\n\n    return (\n        <div className=\"profile-badge\" align='center'>\n            <Image \n                src={avatarUrl} \n                circular \n                size='small'\n            />\n            <h1>{username}</h1>\n        </div>\n    ); \n}\n\n\nProfileBadge.propTypes = {\n    username: propTypes.string.isRequired\n}\n\n\nexport default ProfileBadge;","import React from 'react';\nimport Chip from '@mui/material/Chip';\nimport Container from '@mui/material/Container';\nimport Box from '@mui/material/Box';\nimport BoltIcon from '@mui/icons-material/Bolt';\n\n/**\n * \n * @returns a badge that has the\n * users credit valueo on it\n * \n * @param creditScore credit number to be displayed\n * \n */\n\n\nconst CreditBadge = ({\n    creditScore\n}) => {\n    return (\n        <Container\n            sx={{\n                display: 'flex',\n                mt: 1\n            }}\n        >\n            <Box\n                m=\"auto\"\n            >\n                <Chip\n                    label={`Credits ${creditScore}`}\n                    variant=\"outlined\"\n                    icon={<BoltIcon />}\n                />\n            </Box>\n        </Container>\n    );\n};\n\n\n\nexport default CreditBadge;","import React from 'react';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\n\n\n/** \n * Provides a summary on the promotion that exists\n * \n * @param index\n * \n * @param venueName\n * \n * @returns \n */\nconst PromotionSummary = ({\n    index,\n    venueName,\n    validFrom,\n    validTo,\n}) => {\n    return (\n        <Paper \n            elevation={3}\n            sx={{\n                mb: 2\n            }}\n        >\n            <Box \n                p={2} \n                display=\"flex\"\n                alignItems=\"baseline\"\n                justifyContent=\"space-between\" \n            >\n                <Typography variant=\"h7\">\n                    {index}. {venueName}\n                </Typography>\n                <Typography variant=\"subtitle\" color=\"text.secondary\">\n                    {new Date(validFrom).toLocaleDateString()} \n                    <span> - </span> \n                    {new  Date(validTo).toLocaleDateString()}\n                </Typography>\n            </Box>\n        </Paper>\n    )\n};\n\n\n\nexport default PromotionSummary;","import React from 'react';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\nimport QRCode from 'qrcode.react';\n\n\nconst useCouponEndpoint = 'http://localhost:2048/promotion/use'\n\n/**\n * Display a card with promotion information\n * and a scanable QR code for the venue to use\n * to redeem the promotion.\n * \n * \n * @param venueName the name of the venue\n * for the promotion\n * \n * @param validFrom the date the promotion is valid from\n * \n * @param validTo the date the promotion is valid to\n * \n * @param percentageOff the discount the coupon is for\n * \n * @param menuItems the list of menu items\n *\n * @testing \n * \n * + since the site is hosted on localhost\n *   the QR code reader will need to be connected\n *   to the same network as the server to\n *   work. \n * + Thus a good approach is to paste the url\n *   generated by the QR code into the browser\n *   to test it.\n */\nconst PromotionCard = ({\n    promotionID,\n    userID,\n    venueName,\n    validFrom,\n    validTo,\n    percentageOff,\n    menuItems\n}) => {\n\n    // log the qrcodes url for testing\n    const qrCodeUrl = `${useCouponEndpoint}/${promotionID}/${userID}`;\n    console.log(\"[>>] go to: \", qrCodeUrl, \"to use promotion\");\n\n    return (\n       <Card \n            sx={{ \n                display: 'flex', \n                mb: 2,\n                justifyContent: 'space-between',\n            }}\n        >\n            <Box \n                sx={{ \n                    display: 'flex', \n                    flexDirection: 'column',\n                    \n                }}\n            >\n                <CardContent >\n                    <Typography variant=\"h6\">\n                        { venueName }\n                    </Typography>\n                    <Typography variant=\"subtitle1\" color=\"text.secondary\">\n                        {new Date(validFrom).toLocaleDateString()} \n                        <span> -  </span>\n                        {new Date(validTo).toLocaleDateString()}\n                    </Typography>\n                </CardContent>\n                <Box \n                    sx={{ \n                        display: 'flex', \n                        alignItems: 'center', \n                        pl: 2, \n                        pb: 1 \n                    }}\n                >\n                    <Typography variant=\"h5\">\n                        { percentageOff }% off\n                    </Typography>\n                </Box>\n            </Box>\n            <CardMedia\n                sx={{ \n                    '&:hover': {\n                        cursor: 'pointer'\n                    }\n                }} \n                onClick={() => window.open(`${useCouponEndpoint}/${promotionID}/${userID}`, '_blank')}\n            >\n                <QRCode\n                    value={`${useCouponEndpoint}/${promotionID}/${userID}`}\n                    size={140}\n                />\n            </CardMedia>\n       </Card>\n    )\n};\n\n\n\nexport default PromotionCard;","import React from 'react';\n\nimport Accordion from '@mui/material/Accordion';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport Typography from '@mui/material/Typography';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport Stack from '@mui/material/Stack';\nimport Container from '@mui/material/Container';\nimport PromotionSummary from './PromotionSummary';\nimport PromotionCard from './PromotionCard';\nimport IconButton from '@mui/material/IconButton';\nimport InfoIcon from '@mui/icons-material/Info';\nimport Tooltip from '@mui/material/Tooltip';\n\n\n/**\n * \n * @returns a list of promotions\n * in sets of accordion panels\n * one for the active promotions\n * and one for future and one \n * for expired. Similar in\n * fashion to the routes\n * summary\n * \n * @param myRoutes - user generated routes\n * \n * @param sharedWithMe - routes shared to the user\n */\n\n\nconst PromotionsFeed = ({\n    userID,\n    activePromotions,\n    futurePromotions,\n    expiredPromotions,\n}) => {\n    return (\n       <Container\n            sx={{\n                display: 'flex',\n                mt: 8,\n                // minWidth: '320px'\n            }}\n       >\n            <Stack \n                spacing={2} \n                m='auto'\n                width='100%'\n                minWidth={250}\n                maxWidth={500}\n            >\n                <Accordion>\n                    <AccordionSummary\n                        expandIcon={<ExpandMoreIcon />}\n                    >\n                        <Typography>\n                            Current Promotions \n                            <Tooltip \n                                title=\"Show coupons at venues to redeem\" \n                                placement=\"top\"\n                                arrow \n                            >\n                                <IconButton\n                                    aria-label=\"info\"\n                                >\n                                    <InfoIcon />\n                                </IconButton>\n                            </Tooltip>\n                        </Typography>\n\n                    </AccordionSummary>\n                        <AccordionDetails>\n                            {activePromotions.length > 0 && \n                                activePromotions.map((promotion, index) => (\n                                    <PromotionCard \n                                        key={index}\n                                        promotionID={promotion._id}\n                                        userID={userID}\n                                        venueName={promotion.venue.name}\n                                        validFrom={promotion.startDate}\n                                        validTo={promotion.endDate}\n                                        percentageOff={promotion.percentageOff}\n                                        menuItems={promotion.menuItems}\n                                    />\n                                ))\n                            }\n                        </AccordionDetails>\n                </Accordion>   \n\n\n                <Accordion>\n                    <AccordionSummary\n                        expandIcon={<ExpandMoreIcon />}\n                    >\n                        <Typography>\n                            Upcoming Promotions\n                        </Typography>\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        {futurePromotions.length > 0 &&\n                            futurePromotions.map((promotion, index) => (\n                                <PromotionSummary\n                                    key={index}\n                                    index={index + 1}\n                                    venueName={promotion.venue.name}\n                                    validFrom={promotion.startDate}\n                                    validTo={promotion.endDate}\n                                />\n                            ))\n                        }\n                    </AccordionDetails>\n                </Accordion> \n            \n                <Accordion>\n                    <AccordionSummary\n                        expandIcon={<ExpandMoreIcon />}\n                    >\n                        <Typography>\n                            Expired Promotions\n                        </Typography>\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        {expiredPromotions.length > 0 &&\n                            expiredPromotions.map((promotion, index) => (\n                                <PromotionSummary\n                                    key={index}\n                                    index={index + 1}\n                                    venueName={promotion.venue.name}\n                                    validFrom={promotion.startDate}\n                                    validTo={promotion.endDate}\n                                />\n                            ))\n                        }\n                    </AccordionDetails>\n                </Accordion> \n            </Stack>\n       </Container>\n    )\n};\n\n\n\nexport default PromotionsFeed;","import React from 'react';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport { useHistory } from 'react-router';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\n\n/**\n * Shows a summary of a route shared with the \n * user or one they saved.\n * \n * @param index - The index of the route in \n * the list\n * \n * @param name - the routes name\n * \n * @param id - the id of the route\n */\nconst RouteSummary = ({ index, name, id}) => {\n    const history = useHistory();\n    // handle view route\n    const handleViewRoute = () => {\n        history.push(`/route/${id}`);\n    }\n\n    return (\n        <Paper \n            elevation={3}\n            sx={{\n                mb: 2\n            }}\n        >\n            <Box \n                p={2} \n                display=\"flex\"\n                alignItems=\"baseline\"\n                justifyContent=\"space-between\"\n                sx={{\n                    '&:hover': {\n                        cursor: 'pointer'\n                    }\n                }}\n                onClick={handleViewRoute}\n            >\n                <Typography\n                    variant=\"h6\"\n                >\n                    {index}.\n                </Typography>\n                <Typography variant=\"h6\">\n                    {name}\n                </Typography>\n                <Box >\n                    <ArrowForwardIosIcon />\n                </Box>\n            </Box>\n        </Paper> \n    )\n};\n\n\n\nexport default RouteSummary;","import React from 'react';\nimport Accordion from '@mui/material/Accordion';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport Typography from '@mui/material/Typography';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport Stack from '@mui/material/Stack';\nimport Container from '@mui/material/Container';\nimport RouteSummary from './RouteSummary';\n\n\n/**\n * \n * @returns a list of routes\n * in two sets of accordion panels\n * one for the user's routes\n * and one for routes shared \n * with the user. Similar in\n * fashion to the promotions\n * feed\n * \n * @param myRoutes - user generated routes\n * \n * @param sharedWithMe - routes shared to the user\n */\nconst RoutesFeed = ({ myRoutes, sharedWithMe }) => {\n    return (\n        <Container\n            sx={{\n                display: 'flex',\n                mt: 8,\n                // minWidth: '320px'\n            }}\n        >\n            <Stack \n                spacing={2} \n                m='auto'\n                width='100%'\n                minWidth={250}\n                maxWidth={500}\n            >\n                <Accordion>\n                    <AccordionSummary\n                        expandIcon={<ExpandMoreIcon />}\n                    >\n                        <Typography>\n                            My Routes\n                        </Typography>\n                    </AccordionSummary>\n                        <AccordionDetails>\n                            {myRoutes.map((route, index) => (\n                                <RouteSummary\n                                    key={index}\n                                    index={index + 1}\n                                    id={route._id}\n                                    name={route.name}\n                                />\n                            ))}\n                        </AccordionDetails>\n                </Accordion>   \n\n\n                <Accordion>\n                    <AccordionSummary\n                        expandIcon={<ExpandMoreIcon />}\n                    >\n                        <Typography>\n                           Shared With Me\n                        </Typography>\n                    </AccordionSummary>\n                    <AccordionDetails>\n                            {sharedWithMe.map((route, index) => (\n                                <RouteSummary\n                                    key={index}\n                                    index={index + 1}\n                                    id={route._id}\n                                    name={route.name}\n                                />\n                            ))}\n                    </AccordionDetails>\n                </Accordion> \n            </Stack>\n       </Container>\n    )\n};\n\n\n\nexport default RoutesFeed;","import { gql } from '@apollo/client';\n\n\nexport const DeleteUser = gql`\n    mutation DeleteUser {\n        deleteUser\n    }\n`;","import React, { useState} from 'react';\nimport { \n    Dimmer, \n    Loader \n} from 'semantic-ui-react';\nimport 'semantic-ui-less/semantic.less';\nimport { useMutation } from '@apollo/client';\nimport { DeleteUser } from '../../gql/auth/delete.gql';\nimport SmallModal from '../SmallModal/SmallModal';\n\nconst DeleteButton = () => { \n    const [ deleteUser, {loading, error, data} ] = useMutation(DeleteUser);\n\n    const showModal = () => {\n        setOpen(true);\n    }\n\n    const handleDelete = async () => {\n        await deleteUser();\n        localStorage.removeItem('sesh');\n        // close modal\n        setOpen(false);\n    }\n\n    const [open, setOpen] = useState(false);\n\n    if (loading)\n        return (\n            <Dimmer active>\n                <Loader />\n            </Dimmer>\n        )\n\n    if (error)\n        console.log(\"[**] Delete failed\", error);\n\n    if (data && !data.deleteUser)\n        console.log(\"[**] Delete failed\", data);\n    \n    if (data) {\n        console.log(\"[**] Delete success\", data);\n        window.location = '/';\n    }\n\n\n    return (\n        <>\n            <button \n                className=\"ui red circular button\" \n                onClick={showModal}\n                data-cy='delete-account-button'\n            >\n                Delete Account\n            </button>\n            <SmallModal \n                open={open}\n                openState={setOpen}\n                handleFunction={handleDelete}\n                title={'Delete your account?'}\n                content={'Are you sure you want to delete your account?'}\n                buttonContent={'Delete'}\n            />\n        </>\n    );\n}\n\nexport default DeleteButton;","import React from 'react';\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport DeleteButton from '../DeleteButton/DeleteButton';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport Stack from '@mui/material/Stack';\nimport EmailIcon from '@mui/icons-material/Email';\nimport { Icon } from 'semantic-ui-react';\n\n/**\n * Display a basic account management dashboard\n * with the users email and joined date as well\n * as options to delete the account \n * \n * @param email - the users email\n * @param joinedDate - the date the user joined the site\n * \n */\nconst AccountDash = ({\n    email,\n    joinedDate\n}) => {\n    return (\n       <Container\n            sx={{\n                mt: 5,\n            }}\n       >\n            <Box\n                sx={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center',\n                    width: '100%',\n                }}\n            >\n                <Card\n                    raised\n                    sx={{\n                        // width: 355,\n                        mb: 5,\n                        // ml: 10,\n                    }}\n                >   \n                    <CardContent>\n                        <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\n                            About you\n                        </Typography>\n                        <Stack direction=\"row\" spacing={20}>\n                            \n                            <Typography variant=\"h6\">\n                                <Icon name=\"mail\"/> Email\n                            </Typography>\n                            <Typography variant=\"h6\">\n                                    {email}\n                            </Typography>\n                        </Stack>\n                        <Stack direction=\"row\" spacing={19}>\n                            <Typography variant=\"h6\">\n                                <Icon name=\"calendar alternate\" /> Joined\n                            </Typography>\n                            <Typography variant=\"h6\">\n                                {new Date(Number(joinedDate)).toLocaleDateString()}\n                            </Typography>\n                        </Stack>\n   \n                    </CardContent>\n                </Card>\n\n                <DeleteButton />\n            </Box>\n       </Container>\n    )\n};\n\n\n\nexport default AccountDash;","import React from 'react';\n// import Box from '@mui/material/Box';\nimport SpeedDial from '@mui/material/SpeedDial';\nimport SpeedDialIcon from '@mui/material/SpeedDialIcon';\nimport SpeedDialAction from '@mui/material/SpeedDialAction';\nimport HomeIcon from '@mui/icons-material/Home';\nimport MapIcon from '@mui/icons-material/Map';\nimport ManageAccountsIcon from '@mui/icons-material/ManageAccounts';\n\n\nconst actions = [\n  { icon: <HomeIcon />, name: 'Home' },\n  { icon: <MapIcon />, name: 'Routes' },\n  { icon: <ManageAccountsIcon />, name: 'Account' },\n];\n\n/**\n * \n * @returns a speed dial component\n * to use as a navbar on the profile \n * page\n */\nconst NavDial = ({ setPage }) => {\n    const handleActionClick = (name) => {\n        setPage(name);\n    };\n\n    return (\n        // <Box sx={{ transform: 'translateZ(0px)' }}>\n        <>\n            <SpeedDial\n                ariaLabel=\"SpeedDial basic example\"\n                sx={{ position: 'absolute', bottom: 25, left: 5 }}\n                icon={<SpeedDialIcon />}\n            >\n                {actions.map((action) => (\n                    <SpeedDialAction\n                        key={action.name}\n                        icon={action.icon}\n                        tooltipTitle={action.name}\n                        onClick={() => handleActionClick(action.name)}\n                    />\n                ))}\n            </SpeedDial>\n        </>   \n    )\n};\n\n\n\nexport default NavDial;","import React, { useState } from 'react'\nimport { NavBar } from '../components/NavBar/NavBar';\nimport {\n  Loader,\n  Dimmer\n} from 'semantic-ui-react';\nimport { useQuery } from \"@apollo/client\";\nimport { GetSelf } from \"../gql/self/getSelf.gql\";\nimport { GET_PROFILE } from '../gql/self/profile.gql';\nimport { useHistory } from 'react-router-dom';\nimport ProfileBadge from '../components/ProfileBadge/ProfileBadge';\nimport Box from '@mui/material/Box';\nimport CreditBadge from '../components/Profile/CreditBadge';\nimport PromotionsFeed from '../components/Profile/PromotionsFeed';\nimport RoutesFeed from '../components/Profile/RoutesFeed';\nimport AccountDash from '../components/Profile/AccountDash';\nimport NavDial from '../components/Profile/NavDial';\nimport 'semantic-ui-less/semantic.less';\nimport { UserTypes } from '../constants/userTypes';\nimport { avatarEndpoint } from \"../constants/urls\";\n\nconst Profile = () => {\n    const [username, setUsername] = useState('username');\n    const [avatarUrl, setAvatarUrl] = useState('');\n    const [userID, setUserID] = useState('');\n    const [userType, setUserType] = useState('');\n    const [credits, setCredits] = useState('');\n    const [email, setEmail] = useState('');\n    const [joinedDate, setJoinedDate] = useState('');\n    const [activePromotions, setActivePromotions] = useState([]);\n    const [futurePromotions, setFuturePromotions] = useState([]);\n    const [expiredPromotions, setExpiredPromotions] = useState([]);\n    \n    // routes\n    const [myRoutes, setMyRoutes] = useState([]);\n    const [sharedRoutes, setSharedRoutes] = useState([]);\n\n    const [page, setPage] = useState('Home');\n\n    const history = useHistory();\n\n    const  { loading, error, /*data*/ } = useQuery(\n        GetSelf, \n        {\n            onCompleted: (data) => {\n                setUsername (data.getSelf.username);\n                setUserID (data.getSelf.userID);\n                setUserType (data.getSelf.userType);\n                setAvatarUrl(\n                    `${avatarEndpoint}/:${data.getSelf.username}.svg`\n                );\n            }\n        },\n    );\n\n    const {loading: loadingProfile, error: errorProfile} = useQuery(\n        GET_PROFILE,\n        {\n            onCompleted: (data) => {\n                let customerData = data.getProfile;\n                console.log(\"[>>] customer data\", customerData);\n                setCredits(customerData.credits);\n                setActivePromotions(customerData.activePromotions);\n                setFuturePromotions(customerData.futurePromotions);\n                setExpiredPromotions(customerData.expiredPromotions);\n                setEmail(customerData.email);\n                setJoinedDate(customerData.joinedDate);\n                setMyRoutes(customerData.myRoutes);\n                setSharedRoutes(customerData.sharedRoutes);\n            }\n        }\n    )\n\n\n    if (error || errorProfile) {\n        console.log(`[**] profile ${error}`);\n        // redirect to home,\n        // probably unauthenticated\n        history.push('/');\n    }\n\n    if (loading || loadingProfile) {\n        return (\n            <Dimmer active>\n                <Loader />\n            </Dimmer>\n        )\n    }\n\n    return (\n        <Box style={{ height: \"100vh\" }}>\n            <NavBar />\n            <ProfileBadge \n                username={username}\n                avatarUrl={avatarUrl}\n            />\n            {userType === UserTypes.CUSTOMER &&  \n                <CreditBadge creditScore={credits}/>\n            }\n\n            <Box \n                sx={{ ml: 6 }}\n            >\n                {userType === UserTypes.CUSTOMER &&\n                    page === 'Home' &&\n                    <PromotionsFeed\n                        userID={userID} \n                        activePromotions={activePromotions}\n                        futurePromotions={futurePromotions}\n                        expiredPromotions={expiredPromotions}\n                    />\n                }\n\n                {userType === UserTypes.CUSTOMER &&\n                    page === 'Routes' &&\n                    <RoutesFeed \n                        myRoutes={myRoutes}\n                        sharedWithMe={sharedRoutes}\n                    />\n                }\n\n                {userType === UserTypes.BUSINESS &&\n                    <AccountDash \n                        email={email}\n                        joinedDate={joinedDate}\n                    />\n                }\n\n                {page === 'Account' &&\n                    <AccountDash\n                        email={email}\n                        joinedDate={joinedDate}\n                    />\n                }\n\n            </Box>\n\n            {userType === UserTypes.CUSTOMER &&\n                <NavDial setPage={setPage}/>\n            }\n            \n        </Box>\n    );\n}\n\nexport default Profile;","import React from 'react';\nimport { \n    ApolloClient, \n    InMemoryCache\n} from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client/react';\nimport { createUploadLink } from 'apollo-upload-client';\nimport { split } from '@apollo/client';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { \n    BrowserRouter, \n    Route, \n    Switch \n} from 'react-router-dom';\nimport { CookiesProvider } from 'react-cookie';\nimport { UserTypes } from '../../constants/userTypes';\nimport Home from '../../pages/Home';\nimport Login from '../../pages/Login';\nimport Register from '../../pages/Register';\nimport Forgot from '../../pages/Forgot'\nimport AdminDashboard from '../../pages/AdminDashboard'\nimport BusinessDashboard from '../../pages/BusinessDashboard'\nimport Reset from '../../pages/Reset';\nimport Profile from '../../pages/Profile';\n\n\n/**\n * Router components -> Routes our web app\n * to their correct page\n * \n */\n\nexport const authToken = localStorage.getItem('sesh');\n\n/**\n * apollo client only allows one terminating\n * link that sends gql requests, so we need\n * to split between the websocket service\n * and the http service. Note the http\n * service itself also splits based on \n * weather the gql variable contains\n * files.\n */\n\n\n/** websocket handler */\nconst wsService = new WebSocketLink({\n    uri: 'ws://localhost:2048/graphql',\n    options: {\n        // if ws dies attempt reconnect\n        reconnect: true,\n        connectionParams: {\n            // send the token on connection,\n            // will be used on subsequent reconnects\n            authToken: authToken\n        } \n    }, \n});\n\n/**\n * split between regular http service or \n * file upload service based on weather the\n * gql query contains file variable(s)\n */\nconst httpUploadServiceSplitter = createUploadLink({\n    uri: 'http://localhost:2048/graphql',\n    credentials: 'include'\n});\n\n\n\n/**\n * Split the listening client instance\n * between HTTP and WebSocket based on the \n * graphql query type\n * \n * @subscription WS\n * @Query HTTP\n * @Mutation HTTP ->  if files -> uploadLink\n */\nconst splitService = split(\n    ({ query }) => {\n        const definition = getMainDefinition(query);\n        return (\n            definition.kind === 'OperationDefinition' &&\n            definition.operation === 'subscription'\n        );\n    },\n    wsService,\n    httpUploadServiceSplitter\n);\n\n\n// Create an apollo client instance\nconst client = new ApolloClient({\n    link: splitService,\n    cache: new InMemoryCache(),\n});\n\n\n/**\n * Pass props to the router to\n * dictate what type of login\n * and register is required \n * */\nexport const Router = () => (\n    <CookiesProvider>\n        <ApolloProvider client={client}>\n            <BrowserRouter>\n                <Switch>\n                    <Route exact path=\"/\" \n                        component={Home} \n                    />\n                    <Route exact path=\"/login\" >\n                        <Login userType={UserTypes.CUSTOMER} />\n                    </Route>\n                    <Route exact path=\"/register\"> \n                        <Register userType={UserTypes.CUSTOMER}/>\n                    </Route>\n                    <Route exact path=\"/register-business\">\n                       <Register userType={UserTypes.BUSINESS}/> \n                    </Route>\n                    <Route exact path=\"/business\"\n                        component={BusinessDashboard}\n                    />\n                    <Route exact path=\"/admin\" \n                        component={AdminDashboard} \n                    />\n                    <Route exact path=\"/forgot\" \n                        component={Forgot}\n                    />\n                    <Route exact path=\"/reset\" \n                        component={Reset}\n                    />\n                    <Route exact path=\"/profile\" \n                        component={Profile}\n                    />\n                    <Route exact path=\"/menu/:venueID\" \n                        component={Home}\n                    />\n                    <Route exact path=\"/route/:routeID\" \n                        component={Home}\n                    />\n                </Switch>\n            </BrowserRouter>\n        </ApolloProvider>\n    </CookiesProvider>\n);\n\nexport default Router;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-less/semantic.less';\nimport { Router } from './components/Router/Router';\n\nReactDOM.render(\n\t<React.StrictMode>\n        <Router />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n"],"sourceRoot":""}